using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Linq.Dynamic;
using Sigesoft.Node.WinClient.BE;
using Sigesoft.Node.WinClient.DAL;
using Sigesoft.Common;
using System.Collections;
using Sigesoft.Node.WinClient.BE.Custom;

namespace Sigesoft.Node.WinClient.BLL
{
    public class ServiceBL
    {
        List<int> ListaDiente = new List<int>();
        //Devart.Data.PostgreSql.PgSqlMonitor mon = new Devart.Data.PostgreSql.PgSqlMonitor();

        #region Service

        public List<ServiceList> GetServicesPagedAndFiltered(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service

                            join A1 in dbContext.servicecomponent on A.v_ServiceId equals A1.v_ServiceId into A1_join
                            from A1 in A1_join.DefaultIfEmpty()

                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()

                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()

                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()

                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

                            join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId

                            join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId

                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId

                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            // Empresa / Sede Cliente ******************************************************
                            join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                                    equals new { a = oc.v_OrganizationId } into oc_join
                            from oc in oc_join.DefaultIfEmpty()

                            join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                                  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            from lc in lc_join.DefaultIfEmpty()

                            //**********************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0 && D.i_LineStatusId == (int)LineStatus.EnCircuito 
                            //&& A.i_ServiceStatusId == (int)ServiceStatus.Culminado
                            select new ServiceList
                            {
                                v_ServiceComponentId = A1.v_ServiceComponentId,
                               i_ServiceComponentStatusId = A1.i_ServiceComponentStatusId,
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_StatusLiquidation,
                                v_ComponentId = A1.v_ComponentId,
                                i_IsFac = A.i_IsFac,
                                i_ServiceId = D.i_ServiceId.Value
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }


          
                List<ServiceList> objData = query.ToList();
                pobjOperationResult.Success = 1;

                if (componentIds != null)
                {
                   var xx=  objData.FindAll(p => componentIds.Contains(p.v_ComponentId));

                   var y = xx.GroupBy(g => g.v_ServiceId)
                                 .Select(s => s.First());

                    return y.ToList();
                }
                else
                {
                    var y = objData.GroupBy(g => g.v_ServiceId)
                               .Select(s => s.First());

                    return y.ToList();
                
                }


               

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public string AddService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId = "(No generado)";
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

                objEntity.d_InsertDate = DateTime.Now;
                objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                objEntity.i_IsDeleted = 0;
                // Autogeneramos el Pk de la tabla
                int intNodeId = int.Parse(ClientSession[0]);
                NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 23), "SR");
                objEntity.v_ServiceId = NewId;

                dbContext.AddToservice(objEntity);
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Ok, null);
                return NewId;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICIO", "v_ServiceId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return null;
            }
        }

        public void UpdateService(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                pobjDtoEntity.d_UpdateDate = DateTime.Now;
                pobjDtoEntity.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                service objEntity = serviceAssembler.ToEntity(pobjDtoEntity);

                // Copiar los valores desde la entidad actualizada a la Entidad Fuente
                dbContext.service.ApplyCurrentValues(objEntity);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + objEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void UpdateFlagFacturacion(serviceDto pobjDtoEntity, int psintFlag)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                objEntitySource.i_IsFac = psintFlag;            
             
                // Guardar los cambios
                dbContext.SaveChanges();

               return;
            }
            catch (Exception ex)
            {               
                 return;
            }
        }


        public serviceDto GetService(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                serviceDto objDtoEntity = null;

                var objEntity = (from a in dbContext.service
                                 where a.v_ServiceId == pstrServiceId
                                 select a).FirstOrDefault();

                if (objEntity != null)
                    objDtoEntity = serviceAssembler.ToDTO(objEntity);

                pobjOperationResult.Success = 1;
                return objDtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateServiceOffice(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados

                objEntitySource.i_ServiceStatusId = pobjDtoEntity.i_ServiceStatusId;
                objEntitySource.v_Motive = pobjDtoEntity.v_Motive;
                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public ServiceList GetServiceReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
                                 from B in B_join.DefaultIfEmpty()

                                 join C in dbContext.organization on B.v_WorkingOrganizationId equals C.v_OrganizationId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.datahierarchy on new { a = C.i_SectorTypeId.Value, b = 104 }
                                                        equals new { a = D.i_ItemId, b = D.i_GroupId } into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.datahierarchy on new { a = C.i_DepartmentId.Value, b = 113 }
                                                       equals new { a = E.i_ItemId, b = E.i_GroupId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join F in dbContext.datahierarchy on new { a = C.i_ProvinceId.Value, b = 113 }
                                                       equals new { a = F.i_ItemId, b = F.i_GroupId } into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 join G in dbContext.datahierarchy on new { a = C.i_DistrictId.Value, b = 113 }
                                                       equals new { a = G.i_ItemId, b = G.i_GroupId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on A.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.datahierarchy on new { a = H.i_DepartmentId.Value, b = 113 }
                                                       equals new { a = I.i_ItemId, b = I.i_GroupId } into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.datahierarchy on new { a = H.i_ProvinceId.Value, b = 113 }
                                                       equals new { a = J.i_ItemId, b = J.i_GroupId } into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 join K in dbContext.datahierarchy on new { a = H.i_DistrictId.Value, b = 113 }
                                                       equals new { a = K.i_ItemId, b = K.i_GroupId } into K_join
                                 from K in K_join.DefaultIfEmpty()

                                 join L in dbContext.systemparameter on new { a = H.i_TypeOfInsuranceId.Value, b = 188 }
                                                      equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 join M in dbContext.systemparameter on new { a = H.i_MaritalStatusId.Value, b = 101 }
                                              equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 join N in dbContext.datahierarchy on new { a = H.i_LevelOfId.Value, b = 108 }
                                                 equals new { a = N.i_ItemId, b = N.i_GroupId } into N_join
                                 from N in N_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on B.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()


                                 join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
                                 from su in su_join.DefaultIfEmpty()

                                 join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                                 from pr in pr_join.DefaultIfEmpty()


                                 join P1 in dbContext.person on new { a = pr.v_PersonId }
                                         equals new { a = P1.v_PersonId } into P1_join
                                 from P1 in P1_join.DefaultIfEmpty()

                                 join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
                                                        equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
                                 from O in O_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrServiceId

                          
                                 select new ServiceList
                                 {
                                     //-----------------CABECERA---------------------------------
                                     v_PersonId = H.v_PersonId,
                                     v_ServiceId = A.v_ServiceId,
                                     d_ServiceDate = A.d_ServiceDate,
                                     i_DiaV = A.d_ServiceDate.Value.Day,
                                     i_MesV = A.d_ServiceDate.Value.Month,
                                     i_AnioV = A.d_ServiceDate.Value.Year,
                                     i_EsoTypeId = B.i_EsoTypeId.Value, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
                                     RUC = C.v_IdentificationNumber,
                                     //---------------DATOS DE LA EMPRESA--------------------------------
                                     EmpresaTrabajo = C.v_Name,
                                     EmpresaEmpleadora = C1.v_Name,
                                     RubroEmpresaTrabajo = D.v_Value1,
                                     DireccionEmpresaTrabajo = C.v_Address,
                                     DepartamentoEmpresaTrabajo = E.v_Value1,
                                     ProvinciaEmpresaTrabajo = F.v_Value1,
                                     DistritoEmpresaTrabajo = G.v_Value1,
                                     v_CurrentOccupation = H.v_CurrentOccupation,
                                     //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
                                     i_DocTypeId = H.i_DocTypeId.Value,
                                     v_Pacient = H.v_FirstName + " " + H.v_FirstLastName + " " + H.v_SecondLastName,
                                     d_BirthDate = H.d_Birthdate,
                                     i_DiaN = H.d_Birthdate.Value.Day,
                                     i_MesN = H.d_Birthdate.Value.Month,
                                     i_AnioN = H.d_Birthdate.Value.Year,
                                     v_DocNumber = H.v_DocNumber,
                                     v_AdressLocation = H.v_AdressLocation,

                                     DepartamentoPaciente = I.v_Value1,
                                     ProvinciaPaciente = J.v_Value1,
                                     DistritoPaciente = K.v_Value1,
                                     i_ResidenceInWorkplaceId = H.i_ResidenceInWorkplaceId.Value,
                                     v_ResidenceTimeInWorkplace = H.v_ResidenceTimeInWorkplace,
                                     i_TypeOfInsuranceId = H.i_TypeOfInsuranceId.Value,
                                     Email = H.v_Mail,
                                     Telefono = H.v_TelephoneNumber,
                                     EstadoCivil = M.v_Value1,
                                     GradoInstruccion = N.v_Value1,
                                     v_Story = A.v_Story,
                                     i_AptitudeStatusId = A.i_AptitudeStatusId,

                                     HijosVivos = H.i_NumberLivingChildren,
                                     HijosMuertos = H.i_NumberDeadChildren,
                                     HijosDependientes = H.i_NumberDependentChildren,

                                     v_BirthPlace = H.v_BirthPlace,
                                     i_PlaceWorkId = H.i_PlaceWorkId.Value,
                                     v_ExploitedMineral = H.v_ExploitedMineral,
                                     i_AltitudeWorkId = H.i_AltitudeWorkId.Value,
                                     v_EmergencyPhone = H.v_EmergencyPhone,
                                     i_SexTypeId = H.i_SexTypeId,
                                     i_MaritalStatusId = H.i_MaritalStatusId.Value,
                                     i_LevelOfId = H.i_LevelOfId.Value,
                                     FirmaTrabajador = H.b_RubricImage,
                                     HuellaTrabajador = H.b_FingerPrintImage,

                                     //Datos del Doctor
                                     FirmaDoctor = pr.b_SignatureImage,
                                     NombreDoctor = P1.v_FirstName + " " + P1.v_FirstLastName + " " + P1.v_SecondLastName,
                                     CMP = pr.v_ProfessionalCode,

                                     d_Fur = A.d_Fur,
                                     v_CatemenialRegime = A.v_CatemenialRegime,
                                     i_MacId = A.i_MacId,
                                     v_Mac = O.v_Value1,

                                     // Antecedentes ginecologicos
                                     d_PAP = A.d_PAP.Value,
                                     d_Mamografia = A.d_Mamografia.Value,
                                     v_CiruGine = A.v_CiruGine,
                                     v_Gestapara = A.v_Gestapara,
                                     v_Menarquia = A.v_Menarquia,
                                     v_Findings = A.v_Findings
                                    

                                 });


                var sql = (from a in objEntity.ToList()
                           let FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrServiceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID)

                           select new ServiceList
                           {
                                //-----------------CABECERA---------------------------------
                                v_ServiceId = a.v_ServiceId,
                                d_ServiceDate = a.d_ServiceDate,
                                i_DiaV = a.d_ServiceDate.Value.Day,
                                i_MesV = a.d_ServiceDate.Value.Month,
                                i_AnioV = a.d_ServiceDate.Value.Year,
                                i_EsoTypeId = a.i_EsoTypeId, // tipo de ESO : Pre-Ocupacional ,  Periodico, etc 
                                RUC = a.RUC,
                                //---------------DATOS DE LA EMPRESA--------------------------------
                                EmpresaTrabajo = a.EmpresaTrabajo,
                                EmpresaEmpleadora = a.EmpresaEmpleadora,
                                RubroEmpresaTrabajo = a.RubroEmpresaTrabajo,
                                DireccionEmpresaTrabajo = a.DireccionEmpresaTrabajo,
                                DepartamentoEmpresaTrabajo = a.DepartamentoEmpresaTrabajo,
                                ProvinciaEmpresaTrabajo = a.ProvinciaEmpresaTrabajo,
                                DistritoEmpresaTrabajo = a.DistritoEmpresaTrabajo,
                                v_CurrentOccupation = a.v_CurrentOccupation,
                                //---------------DATOS DE FILIACIÓN TRABAJADOR--------------------------------
                                i_DocTypeId = a.i_DocTypeId,
                                v_Pacient = a.v_Pacient,
                                d_BirthDate = a.d_BirthDate,
                                i_DiaN = a.i_DiaN,
                                i_MesN = a.i_MesN,
                                i_AnioN = a.i_AnioN,
                                i_Edad = GetAge(a.d_BirthDate.Value),
                                //i_Edad =30,
                                v_DocNumber = a.v_DocNumber,
                                v_AdressLocation = a.v_AdressLocation,
                                DepartamentoPaciente = a.DepartamentoPaciente,
                                ProvinciaPaciente = a.ProvinciaPaciente,
                                DistritoPaciente = a.DistritoPaciente,
                                i_ResidenceInWorkplaceId = a.i_ResidenceInWorkplaceId,
                                v_ResidenceTimeInWorkplace = a.v_ResidenceTimeInWorkplace,
                                i_TypeOfInsuranceId = a.i_TypeOfInsuranceId,
                                Email = a.Email,
                                Telefono = a.Telefono,
                                EstadoCivil = a.EstadoCivil,
                                GradoInstruccion = a.GradoInstruccion,
                                v_Story = a.v_Story,
                                i_AptitudeStatusId = a.i_AptitudeStatusId,
                                v_OwnerOrganizationName = (from n in dbContext.organization
                                                            where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                                            select n.v_Name + " " + n.v_Address).SingleOrDefault<string>(),

                                HijosVivos = a.HijosVivos,
                                HijosMuertos = a.HijosMuertos,
                                HijosDependientes = a.HijosDependientes,
                                v_BirthPlace = a.v_BirthPlace,
                                i_PlaceWorkId = a.i_PlaceWorkId,
                                v_ExploitedMineral = a.v_ExploitedMineral,
                                i_AltitudeWorkId = a.i_AltitudeWorkId,
                                v_EmergencyPhone = a.v_EmergencyPhone,
                                i_SexTypeId = a.i_SexTypeId,
                                i_MaritalStatusId = a.i_MaritalStatusId,
                                i_LevelOfId = a.i_LevelOfId,

                                FirmaTrabajador = a.FirmaTrabajador,
                                HuellaTrabajador = a.HuellaTrabajador,

                                //Datos del Doctor
                                FirmaDoctor = a.FirmaDoctor,
                                NombreDoctor = a.NombreDoctor,
                                CMP = a.CMP,

                                d_Fur = a.d_Fur,
                                v_CatemenialRegime = a.v_CatemenialRegime,
                                i_MacId = a.i_MacId,
                                v_Mac = a.v_Mac,

                                //// Antecedentes ginecologicos
                                d_PAP = a.d_PAP,
                                d_Mamografia = a.d_Mamografia,
                                v_CiruGine = a.v_CiruGine,
                                v_Gestapara = a.v_Gestapara,
                                v_Menarquia = a.v_Menarquia,
                                v_Findings = a.v_Findings,
                                FirmaMedicoMedicina = FirmaMedicoMedicina
                                //FirmaMedicoMedicina = null
                           }).FirstOrDefault();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        private byte[] ObtenerFirmaMedicoExamen(string pstrServiceId, string p1, string p2)
        {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from E in dbContext.servicecomponent

                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()


                                 where E.v_ServiceId == pstrServiceId &&
                                 (E.v_ComponentId == p1 || E.v_ComponentId == p2)
                                 select new {

                                     FirmaMedicoMedicina =  pme.b_SignatureImage
                                        }).FirstOrDefault();

                return objEntity.FirmaMedicoMedicina;
        }

        #region Info Cabecera / Anamnesis  del sericio

        public ServiceList GetServicePersonData(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
                                     equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join  // ESTADO SERVICIO
                            from B in B_join.DefaultIfEmpty()

                            join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
                                    equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
                            from G in J4_join.DefaultIfEmpty()

                            join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                       equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
                                                      equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()

                            join D in dbContext.person on A.v_PersonId equals D.v_PersonId

                            join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                               equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                            from J in J_join.DefaultIfEmpty()

                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

                            join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                            join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from H in J3_join.DefaultIfEmpty()

                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == isDeleted)

                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_ProtocolName = E.v_Name,
                                v_PersonId = D.v_PersonId,
                                v_FirstName = D.v_FirstName,
                                v_FirstLastName = D.v_FirstLastName,
                                v_SecondLastName = D.v_SecondLastName,
                                d_BirthDate = D.d_Birthdate,
                                i_SexTypeId = D.i_SexTypeId,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId,
                                d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
                                d_ObsExpirationDate = A.d_ObsExpirationDate,
                                d_ServiceDate = A.d_ServiceDate,
                                v_MasterServiceName = J1.v_Value1,
                                v_ServiceTypeName = J2.v_Value1,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_GroupOcupationName = F.v_Name,
                                v_EsoTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                v_GenderName = J.v_Value1,

                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                i_DreamId = A.i_DreamId,
                                i_UrineId = A.i_UrineId,
                                i_DepositionId = A.i_DepositionId,
                                i_AppetiteId = A.i_AppetiteId,
                                i_ThirstId = A.i_ThirstId,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                i_DestinationMedicationId = A.i_DestinationMedicationId,
                                i_TransportMedicationId = (int)A.i_TransportMedicationId,
                                i_HasMedicalBreakId = A.i_HasMedicalBreakId,
                                i_HasRestrictionId = A.i_HasRestrictionId,
                                d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
                                d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
                                d_StartDateRestriction = A.d_StartDateRestriction,
                                d_EndDateRestriction = A.d_EndDateRestriction,
                                v_GeneralRecomendations = A.v_GeneralRecomendations,
                                i_IsNewControl = A.i_IsNewControl,
                                b_PersonImage = D.b_PersonImage,
                                i_HazInterconsultationId = A.i_HazInterconsultationId,
                                d_NextAppointment = A.d_NextAppointment,
                                i_SendToTracking = A.i_SendToTracking,
                                v_CurrentOccupation = D.v_CurrentOccupation,
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings,
                                i_InicioEnf = A.i_InicioEnf.Value,
                                i_CursoEnf = A.i_CursoEnf.Value,
                                i_Evolucion = A.i_Evolucion.Value,
                                v_ExaAuxResult = A.v_ExaAuxResult,
                                v_ObsStatusService = A.v_ObsStatusService,
                                v_DocNumber = D.v_DocNumber
                            };

                ServiceList objData = query.FirstOrDefault();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public ServiceList GetServicePersonDataReport(string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 }
                                     equals new { a = B.i_ParameterId, b = B.i_GroupId }  // ESTADO SERVICIO

                            join G in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } // ESTADO APTITUD ESO 
                                    equals new { a = G.i_ParameterId, b = G.i_GroupId } into J4_join
                            from G in J4_join.DefaultIfEmpty()

                            join J1 in dbContext.systemparameter on new { a = 119, b = A.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                       equals new { a = J1.i_GroupId, b = J1.i_ParameterId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemparameter on new { a = 119, b = J1.i_ParentParameterId.Value } // TIPO DE SERVICIO
                                                      equals new { a = J2.i_GroupId, b = J2.i_ParameterId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()

                            //join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.person on A.v_PersonId equals D.v_PersonId
                            join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                               equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                            join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = H.i_ParameterId, b = H.i_GroupId } into J3_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from H in J3_join.DefaultIfEmpty()

                            where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == 0
                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_ProtocolName = E.v_Name,
                                v_PersonId = D.v_PersonId,
                                v_FirstName = D.v_FirstName,
                                v_FirstLastName = D.v_FirstLastName,
                                v_SecondLastName = D.v_SecondLastName,
                                d_BirthDate = D.d_Birthdate,
                                i_SexTypeId = D.i_SexTypeId,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId,
                                d_GlobalExpirationDate = A.d_GlobalExpirationDate.Value,
                                d_ObsExpirationDate = A.d_ObsExpirationDate,
                                d_ServiceDate = A.d_ServiceDate,
                                v_MasterServiceName = J1.v_Value1,
                                v_ServiceTypeName = J2.v_Value1,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_GroupOcupationName = F.v_Name,
                                v_EsoTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                v_GenderName = J.v_Value1,

                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                i_DreamId = A.i_DreamId,
                                i_UrineId = A.i_UrineId,
                                i_DepositionId = A.i_DepositionId,
                                i_AppetiteId = A.i_AppetiteId,
                                i_ThirstId = A.i_ThirstId,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                i_DestinationMedicationId = A.i_DestinationMedicationId,
                                i_TransportMedicationId = (int)A.i_TransportMedicationId,
                                i_HasMedicalBreakId = A.i_HasMedicalBreakId,
                                i_HasRestrictionId = A.i_HasRestrictionId,
                                d_MedicalBreakStartDate = A.d_MedicalBreakStartDate,
                                d_MedicalBreakEndDate = A.d_MedicalBreakEndDate,
                                d_StartDateRestriction = A.d_StartDateRestriction,
                                d_EndDateRestriction = A.d_EndDateRestriction,
                                v_GeneralRecomendations = A.v_GeneralRecomendations,
                                i_IsNewControl = A.i_IsNewControl,
                                b_PersonImage = D.b_PersonImage,
                                i_HazInterconsultationId = A.i_HazInterconsultationId,
                                d_NextAppointment = A.d_NextAppointment,
                                i_SendToTracking = A.i_SendToTracking,
                                v_CurrentOccupation = D.v_CurrentOccupation,
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings
                            };

                ServiceList objData = query.FirstOrDefault();

                return objData;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        #endregion

        #endregion

        #region Service Component

        public void AddServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId = "(No generado)";
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

                objEntity.d_InsertDate = DateTime.Now;
                objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                objEntity.i_IsDeleted = 0;
                // Autogeneramos el Pk de la tabla
                int intNodeId = int.Parse(ClientSession[0]);
                NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 24), "SC");
                objEntity.v_ServiceComponentId = NewId;

                dbContext.AddToservicecomponent(objEntity);
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsRoadMap(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.servicecomponent
                            join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
                            join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                            join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
                                   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                            from F in F_join.DefaultIfEmpty()
                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == 0) &&
                                  (A.i_IsRequiredId == 1)
                            orderby F.v_Value1, C.v_Name
                            select new ServiceComponentList
                            {
                                v_ComponentId = A.v_ComponentId,
                                v_ComponentName = C.v_Name,
                                i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                v_ServiceComponentStatusName = B.v_Value1,
                                d_StartDate = A.d_StartDate.Value,
                                d_EndDate = A.d_EndDate.Value,
                                i_QueueStatusId = A.i_QueueStatusId.Value,
                                v_QueueStatusName = D.v_Value1,
                                ServiceStatusId = E.i_ServiceStatusId.Value,
                                v_Motive = E.v_Motive,
                                v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1
                            };

                List<ServiceComponentList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsPreLiquidation(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.servicecomponent
                            join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                            join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 } equals new { a = D.i_ParameterId, b = D.i_GroupId }
                            join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                            join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }  // Categoria
                                   equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                            from F in F_join.DefaultIfEmpty()
                            where (A.v_ServiceId == pstrServiceId) &&
                                  (A.i_IsDeleted == 0) &&
                                  (A.i_IsRequiredId == (int)SiNo.SI)

                            orderby F.v_Value1, C.v_Name

                            let InternalGroup = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "Ginecología" :
                                                  A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "Ginecología" :
                                                  A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID_1 ? "Medicina" :
                                                  A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "Medicina" :
                                                  A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "Odontología" :
                                                  A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "Oftalmología" :
                                                  A.v_ComponentId == Constants.PAPANICOLAU_ID ? "Papanicolau" :
                                                  string.Empty
                                                 )

                            let InternalCode = (A.v_ComponentId == Constants.GINECOLOGIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.EXAMEN_MAMA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.EXAMEN_FISICO_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ANTROPOMETRIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.FUNCIONES_VITALES_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ALTURA_ESTRUCTURAL_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ALTURA_GEOGRAFICA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.OSTEO_MUSCULAR_ID_1 ? "1314" :
                                                 A.v_ComponentId == Constants.TAMIZAJE_DERMATOLOGIO_ID ? "1314" :
                                                 A.v_ComponentId == Constants.TEST_ROMBERG_ID ? "1314" :
                                                 A.v_ComponentId == Constants.ODONTOGRAMA_ID ? "1532" :
                                                 A.v_ComponentId == Constants.OFTALMOLOGIA_ID ? "1314" :
                                                 A.v_ComponentId == Constants.PAPANICOLAU_ID ? "69" :
                                                 string.Empty
                                                )

                            select new ServiceComponentList
                            {
                                v_ComponentId = A.v_ComponentId,
                                v_ComponentName = C.v_Name,
                                i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                v_ServiceComponentStatusName = B.v_Value1,
                                d_StartDate = A.d_StartDate.Value,
                                d_EndDate = A.d_EndDate.Value,
                                i_QueueStatusId = A.i_QueueStatusId.Value,
                                v_QueueStatusName = D.v_Value1,
                                ServiceStatusId = E.i_ServiceStatusId.Value,
                                v_Motive = E.v_Motive,
                                v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                r_Price = A.r_Price,
                                v_InternalGroup = InternalGroup,
                                v_InternalCode = InternalCode,
                                i_StatusLiquidation = E.i_InsertUserOccupationalMedicalId
                            };

                List<ServiceComponentList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return objData;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponents(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
       

            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1)
                             .GroupBy(x => x.i_CategoryId)
                             .Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));

                pobjOperationResult.Success = 1;
                return obj;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsByCategoryExceptLab(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
  

            int isDeleted = (int)SiNo.NO;
            int isRequired = (int)SiNo.SI;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                      equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             join D in dbContext.systemparameter on new { a = A.i_QueueStatusId.Value, b = 128 }
                                      equals new { a = D.i_ParameterId, b = D.i_GroupId }
                             join E in dbContext.service on A.v_ServiceId equals E.v_ServiceId
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted &&
                                   A.i_IsRequiredId == isRequired &&
                                  A.v_ComponentId != Constants.LABORATORIO_ID

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 d_StartDate = A.d_StartDate.Value,
                                 d_EndDate = A.d_EndDate.Value,
                                 i_QueueStatusId = A.i_QueueStatusId.Value,
                                 v_QueueStatusName = D.v_Value1,
                                 ServiceStatusId = E.i_ServiceStatusId.Value,
                                 v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId.Value,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 v_ServiceId = E.v_ServiceId
                             });

                var objData = query.AsEnumerable()
                             .Where(s => s.i_CategoryId != -1 && s.i_CategoryId != 1 && s.i_CategoryId != 6)
                             .GroupBy(x => x.i_CategoryId)
                             .Select(group => group.First());

                List<ServiceComponentList> obj = objData.ToList();

                obj.AddRange(query.Where(p => p.i_CategoryId == -1));
                obj.AddRange(query.Where(p => p.i_CategoryId == 1));
                obj.AddRange(query.Where(p => p.i_CategoryId == 6));
                pobjOperationResult.Success = 1;
                var orden = obj.OrderBy(o => o.i_CategoryId).ToList();
                return orden;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsCulminados(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from A in dbContext.servicecomponent
                             join B in dbContext.systemparameter on new { a = A.i_ServiceComponentStatusId.Value, b = 127 }
                                    equals new { a = B.i_ParameterId, b = B.i_GroupId }
                             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId
                             where (A.v_ServiceId == pstrServiceId) &&
                                   (A.i_IsDeleted == 0) &&
                                   (A.i_IsRequiredId == (int?)SiNo.SI) &&
                                   (A.i_ServiceComponentStatusId != (int)ServiceComponentStatus.Culminado)

                             select new ServiceComponentList
                             {
                                 v_ComponentId = A.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        private List<ComponentFieldsList> GetComponentFields(string pstrComponentId, string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var query = (from A in dbContext.componentfields
                         join B in dbContext.componentfield on A.v_ComponentFieldId equals B.v_ComponentFieldId
                         join J1 in dbContext.datahierarchy on new { a = 105, b = B.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                   equals new { a = J1.i_GroupId, b = J1.i_ItemId } into J1_join
                         from J1 in J1_join.DefaultIfEmpty()
                         orderby B.i_Order
                         where A.v_ComponentId == pstrComponentId &&
                         A.i_IsDeleted == 0 &&
                         B.i_IsDeleted == 0
                         select new ComponentFieldsList
                         {
                             v_ComponentFieldId = A.v_ComponentFieldId,
                             v_ComponentId = A.v_ComponentId,
                             v_TextLabel = B.v_TextLabel,
                             i_LabelWidth = B.i_LabelWidth.Value,
                             v_DefaultText = B.v_DefaultText,
                             i_ControlId = B.i_ControlId.Value,
                             i_GroupId = B.i_GroupId.Value,
                             i_ItemId = B.i_ItemId.Value,
                             i_ControlWidth = B.i_WidthControl.Value,
                             i_HeightControl = B.i_HeightControl.Value,
                             i_MaxLenght = B.i_MaxLenght.Value,
                             i_IsRequired = B.i_IsRequired.Value,
                             i_Column = B.i_Column.Value,
                             v_MeasurementUnitName = J1.v_Value1,
                             i_IsCalculate = B.i_IsCalculate.Value,
                             i_Order = B.i_Order.Value,
                             i_MeasurementUnitId = B.i_MeasurementUnitId.Value,
                             r_ValidateValue1 = B.r_ValidateValue1.Value,
                             r_ValidateValue2 = B.r_ValidateValue2.Value,
                             v_Group = A.v_Group,
                             v_Formula = B.v_Formula

                         }).ToList();


            var q = (from a in query
                     select new ComponentFieldsList
                     {
                         v_ComponentFieldId = a.v_ComponentFieldId,
                         v_ComponentId = a.v_ComponentId,
                         v_TextLabel = a.v_TextLabel,
                         i_LabelWidth = a.i_LabelWidth,
                         v_DefaultText = a.v_DefaultText,
                         i_ControlId = a.i_ControlId,
                         i_GroupId = a.i_GroupId,
                         i_ItemId = a.i_ItemId,
                         i_ControlWidth = a.i_ControlWidth,
                         i_HeightControl = a.i_HeightControl,
                         i_MaxLenght = a.i_MaxLenght,
                         i_IsRequired = a.i_IsRequired,
                         i_Column = a.i_Column,
                         v_MeasurementUnitName = a.v_MeasurementUnitName,
                         i_IsCalculate = a.i_IsCalculate,
                         i_Order = a.i_Order,
                         i_MeasurementUnitId = a.i_MeasurementUnitId,
                         r_ValidateValue1 = a.r_ValidateValue1,
                         r_ValidateValue2 = a.r_ValidateValue2,
                         v_Group = a.v_Group,
                         v_Formula = a.v_Formula,
                         i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
                                               where jjj.v_ComponentFieldId == a.v_ComponentFieldId &&
                                               jjj.v_ServiceId == pstrServiceId &&
                                               jjj.i_IsDeleted == 0
                                               select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                               ).SingleOrDefault()

                     }).ToList();


            Formulate formu = null;
            TargetFieldOfCalculate targetFieldOfCalculate = null;

            foreach (var item in q)
            {
                List<Formulate> formuList = new List<Formulate>();
                List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                var find = (from a in q
                            where ((a.v_Formula != null) &&
                                (a.v_Formula.Contains(item.v_ComponentFieldId)))
                            select a).ToList();

                if (find.Count != 0)
                {
                    item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                    foreach (var f in find)
                    {
                        formu = new Formulate();
                        formu.v_Formula = f.v_Formula;
                        formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                        formuList.Add(formu);

                        targetFieldOfCalculate = new TargetFieldOfCalculate();
                        targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                        targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                    }

                    item.Formula = formuList;
                    item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                }

            }

            return q;

        }

        private List<ComponentFieldValues> GetComponentFieldValues(string pstrComponentFieldId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ComponentFieldValues> fieldValues = (from A in dbContext.componentfieldvalues

                                                      join ddd in dbContext.diseases on A.v_Diseases equals ddd.v_DiseasesId into J3_join // Diagnosticos
                                                      from ddd in J3_join.DefaultIfEmpty()
                                                      join D in dbContext.componentfields on A.v_ComponentFieldId equals D.v_ComponentFieldId
                                                      join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                                                      equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                      from J1 in J1_join.DefaultIfEmpty()

                                                      join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                                                      equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                      from J2 in J2_join.DefaultIfEmpty()

                                                      where A.v_ComponentFieldId == pstrComponentFieldId &&
                                                      A.i_IsDeleted == isDeleted
                                                      select new ComponentFieldValues
                                                      {
                                                          v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                          v_ComponentFieldsId = A.v_ComponentFieldId,
                                                          v_AnalyzingValue1 = A.v_AnalyzingValue1,
                                                          v_AnalyzingValue2 = A.v_AnalyzingValue2,
                                                          i_OperatorId = A.i_OperatorId.Value,
                                                          //v_Recommendation = A.v_Recommendation,
                                                          v_LegalStandard = A.v_LegalStandard,
                                                          i_IsAnormal = A.i_IsAnormal,
                                                          i_ValidationMonths = A.i_ValidationMonths,
                                                          v_DiseasesName = ddd.v_Name,
                                                          v_DiseasesId = A.v_Diseases,
                                                          v_ComponentId = D.v_ComponentId
                                                      }).ToList();



            // Carga inicial de Recomendaciones / Restricciones.
            foreach (var fv in fieldValues)
            {
                fv.Recomendations = (from A in dbContext.componentfieldvaluesrecommendation
                                     join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId // BOLSA CONFIG. POR M. MENDEZ
                                                                                         equals B.v_MasterRecommendationRestricctionId
                                     join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
                                     join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
                                     where (A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId) &&
                                     (A.i_IsDeleted == 0) && (B.i_TypifyingId == (int)Typifying.Recomendaciones)
                                     select new RecomendationList
                                     {
                                         v_MasterRecommendationRestrictionId = A.v_MasterRecommendationRestricctionId,
                                         v_ComponentFieldValuesRecommendationId = A.v_ComponentFieldValuesRecommendationId,
                                         v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                         v_MasterRecommendationId = A.v_MasterRecommendationRestricctionId,
                                         v_RecommendationName = B.v_Name,
                                         i_RecordStatus = (int)RecordStatus.Grabado,
                                         i_RecordType = (int)RecordType.NoTemporal,
                                         v_ComponentId = D.v_ComponentId
                                     }).ToList();



                fv.Restrictions = (from A in dbContext.componentfieldvaluesrestriction
                                   join B in dbContext.masterrecommendationrestricction on A.v_MasterRecommendationRestricctionId
                                                                                         equals B.v_MasterRecommendationRestricctionId
                                   join C in dbContext.componentfieldvalues on A.v_ComponentFieldValuesId equals C.v_ComponentFieldValuesId
                                   join D in dbContext.componentfields on C.v_ComponentFieldId equals D.v_ComponentFieldId
                                   where A.v_ComponentFieldValuesId == fv.v_ComponentFieldValuesId &&
                                   A.i_IsDeleted == 0 && B.i_TypifyingId == (int)Typifying.Restricciones
                                   select new RestrictionList
                                   {
                                       v_ComponentFieldValuesRestrictionId = A.v_ComponentFieldValuesRestrictionId,
                                       v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                       v_MasterRestrictionId = A.v_MasterRecommendationRestricctionId,
                                       v_RestrictionName = B.v_Name,
                                       i_RecordStatus = (int)RecordStatus.Grabado,
                                       i_RecordType = (int)RecordType.NoTemporal,
                                       v_ComponentId = D.v_ComponentId
                                   }).ToList();
            }

            return fieldValues;
        }

        private List<ServiceComponentFieldsList> GetServiceComponentFields(string pstrServiceComponentId, string pstrServiceId)
        {
            var isDeleted = (int)SiNo.NO;
            var isDeleted1 = (int)SiNo.NO;
            string serviceId = pstrServiceId;
            var serviceComponentId = pstrServiceComponentId;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            #region serviceComponentFieldValues

            var serviceComponentFieldValues = (from s in dbContext.service
                                               join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                               join scfs in dbContext.servicecomponentfields on sc.v_ServiceComponentId equals scfs.v_ServiceComponentId
                                               join A in dbContext.servicecomponentfieldvalues on scfs.v_ServiceComponentFieldsId equals A.v_ServiceComponentFieldsId

                                               where s.v_ServiceId == pstrServiceId &&
                                                     A.i_IsDeleted == isDeleted

                                               select new ServiceComponentFieldValuesList
                                               {
                                                   v_ComponentFieldId = scfs.v_ComponentFieldId,
                                                   v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                   v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                   v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                                   v_Value1 = A.v_Value1,
                                                   v_Value2 = A.v_Value2,
                                                   i_Index = A.i_Index,
                                                   i_Value1 = A.i_Value1
                                               }).ToList();

            #endregion

            var serviceComponentFields = (from A in dbContext.servicecomponentfields                                        
                                          join ss in (from jjj in dbContext.diagnosticrepository
                                                       where //(jjj.v_ComponentFieldId == "") &&
                                                             (jjj.v_ServiceId == serviceId) &&
                                                             (jjj.i_IsDeleted == 0)

                                                       select new
                                                       {
                                                           v_ComponentFieldId = jjj.v_ComponentFieldId,
                                                           i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                                       }) on A.v_ComponentFieldId equals ss.v_ComponentFieldId into feePayments
                                            
                                          from ss in feePayments.DefaultIfEmpty()

                                          where (A.v_ServiceComponentId == serviceComponentId) &&
                                                (A.i_IsDeleted == isDeleted)

                                          select new ServiceComponentFieldsList
                                          {
                                              v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                              v_ComponentFieldsId = A.v_ComponentFieldId,
                                              v_ServiceComponentId = A.v_ServiceComponentId,                                          
                                              i_HasAutomaticDxId = ss.i_HasAutomaticDxId,
                                          }).ToList();



            if (serviceComponentFields.Count != 0)
            {
                //serviceComponentFields = (from a in serviceComponentFields
                //                          let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                //                                           where (jjj.v_ComponentFieldId == a.v_ComponentFieldsId) &&
                //                                                 (jjj.v_ServiceId == serviceId) &&
                //                                                 (jjj.i_IsDeleted == 0)
                //                                           select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                //                          select new ServiceComponentFieldsList
                //                          {
                //                              v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                //                              v_ComponentFieldsId = a.v_ComponentFieldsId,
                //                              v_ServiceComponentId = a.v_ServiceComponentId,
                //                              //i_HasAutomaticDxId = (from jjj in dbContext.diagnosticrepository
                //                              //                      where jjj.v_ComponentFieldId == a.v_ComponentFieldsId &&
                //                              //                       jjj.v_ServiceId == pstrServiceId &&
                //                              //                       jjj.i_IsDeleted == 0
                //                              //                      select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                //                              //                      ).SingleOrDefault()
                //                              i_HasAutomaticDxId = hazAutoDx.FirstOrDefault<int?>(),


                //                          }).ToList();


                //// Carga inicial de servicecomponentfieldvalues
                //foreach (var fv in q)
                //{
                //    fv.ServiceComponentFieldValues = GetServiceComponentFieldValues(fv.v_ServiceComponentFieldsId);
                //}

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                serviceComponentFieldValues.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
                serviceComponentFields.Sort((x, y) => x.v_ServiceComponentFieldsId.CompareTo(y.v_ServiceComponentFieldsId));
                serviceComponentFields.ForEach(a => a.ServiceComponentFieldValues = serviceComponentFieldValues.FindAll(p => p.v_ServiceComponentFieldsId == a.v_ServiceComponentFieldsId));

                return serviceComponentFields;
            }
            else
            {
                return serviceComponentFields;
            }
            //var dd = new List<ServiceComponentFieldsList>();
            //return dd;
        }

        private List<ServiceComponentFieldValuesList> GetServiceComponentFieldValues(string pstrServiceComponentFieldsId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponentfieldvalues
                                                                                 join scf in dbContext.servicecomponentfields on A.v_ServiceComponentFieldsId equals scf.v_ServiceComponentFieldsId
                                                                                 where A.v_ServiceComponentFieldsId == pstrServiceComponentFieldsId &&
                                                                                  A.i_IsDeleted == 0
                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = scf.v_ComponentFieldId,
                                                                                     v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                                                     v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                                                     v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = A.v_Value1,
                                                                                     v_Value2 = A.v_Value2,
                                                                                     i_Index = A.i_Index,
                                                                                     i_Value1 = A.i_Value1
                                                                                 }).ToList();


            return serviceComponentFieldValues;
        }

        public List<ComponentList> GetServiceComponentsForBuildMenu(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
     
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var isDeleted = 0;
                int? componentTypeId = (int?)ComponentType.Examen;
                int? isRequiredId = (int?)SiNo.SI;
                var recomId = (int)Typifying.Recomendaciones;
                var restricId = (int)Typifying.Restricciones;
                int groupMeasurementUnitId = 105;

                #region Recomendation

                var _valueFieldsRecome = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join rec in dbContext.componentfieldvaluesrecommendation on cfsv.v_ComponentFieldValuesId equals rec.v_ComponentFieldValuesId
                                          join mrec in dbContext.masterrecommendationrestricction on rec.v_MasterRecommendationRestricctionId equals mrec.v_MasterRecommendationRestricctionId

                                          where (rec.i_IsDeleted == isDeleted) &&
                                                (mrec.i_TypifyingId == recomId) &&
                                                (s.v_ServiceId == pstrServiceId)

                                          select new RecomendationList
                                          {
                                              v_ComponentFieldValuesRecommendationId = rec.v_ComponentFieldValuesRecommendationId,
                                              v_ComponentFieldValuesId = rec.v_ComponentFieldValuesId,
                                              v_MasterRecommendationId = rec.v_MasterRecommendationRestricctionId,
                                              v_RecommendationName = mrec.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal,

                                          }).ToList();

                #endregion

                #region Restriction

                var _valueFieldsRestri = (from s in dbContext.service
                                          join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                          join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                          join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                          join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                          join res in dbContext.componentfieldvaluesrestriction on cfsv.v_ComponentFieldValuesId equals res.v_ComponentFieldValuesId
                                          join mres in dbContext.masterrecommendationrestricction on res.v_MasterRecommendationRestricctionId equals mres.v_MasterRecommendationRestricctionId

                                          where (res.i_IsDeleted == isDeleted) &&
                                                (mres.i_TypifyingId == restricId) &&
                                                (s.v_ServiceId == pstrServiceId)

                                          select new RestrictionList
                                          {
                                              v_ComponentFieldValuesRestrictionId = res.v_ComponentFieldValuesRestrictionId,
                                              v_ComponentFieldValuesId = res.v_ComponentFieldValuesId,
                                              v_MasterRestrictionId = res.v_MasterRecommendationRestricctionId,
                                              v_RestrictionName = mres.v_Name,
                                              v_ComponentId = sc.v_ComponentId,
                                              i_RecordStatus = (int)RecordStatus.Grabado,
                                              i_RecordType = (int)RecordType.NoTemporal
                                          }).ToList();
                #endregion

                #region Values

                var _valueFields = (from s in dbContext.service
                                    join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                    join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                    join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                    join cfsv in dbContext.componentfieldvalues on cfs.v_ComponentFieldId equals cfsv.v_ComponentFieldId
                                    where (cfsv.i_IsDeleted == isDeleted) &&
                                          (s.v_ServiceId == pstrServiceId)

                                    select new ComponentFieldValues
                                    {
                                        v_ComponentFieldValuesId = cfsv.v_ComponentFieldValuesId,
                                        v_ComponentFieldsId = cfsv.v_ComponentFieldId,
                                        v_AnalyzingValue1 = cfsv.v_AnalyzingValue1,
                                        v_AnalyzingValue2 = cfsv.v_AnalyzingValue2,
                                        i_OperatorId = cfsv.i_OperatorId.Value,
                                        v_LegalStandard = cfsv.v_LegalStandard,
                                        i_IsAnormal = cfsv.i_IsAnormal,
                                        i_ValidationMonths = cfsv.i_ValidationMonths,
                                        v_DiseasesName = cfsv.diseases.v_Name,
                                        v_DiseasesId = cfsv.v_Diseases,
                                        v_ComponentId = sc.v_ComponentId,
                                        i_GenderId = cfsv.i_GenderId,

                                    }).ToList();

                _valueFields.ForEach(a =>
                {
                    a.Recomendations = _valueFieldsRecome.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                    a.Restrictions = _valueFieldsRestri.FindAll(p => p.v_ComponentFieldValuesId == a.v_ComponentFieldValuesId);
                });

                #endregion

                #region Fields

                var _comFields = (from s in dbContext.service
                                  join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                                  join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                                  join cfs in dbContext.componentfields on c.v_ComponentId equals cfs.v_ComponentId
                                  join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId

                                  let hazAutoDx = (from jjj in dbContext.diagnosticrepository
                                                   where (jjj.v_ComponentFieldId == cfs.v_ComponentFieldId) &&
                                                       (jjj.v_ServiceId == pstrServiceId) &&
                                                       (jjj.i_IsDeleted == isDeleted)
                                                   //select jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO)
                                                   select new
                                                   {
                                                       //v_ComponentFieldId = jjj.v_ComponentFieldId
                                                       i_HasAutomaticDxId = jjj.v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                                   })

                                  //let measurementUnitId = cfs.componentfield.i_MeasurementUnitId.Value

                                  join dh in dbContext.datahierarchy on new { a = groupMeasurementUnitId, b = cf.i_MeasurementUnitId.Value }  // UNID MEDIDA
                                                      equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                  from dh in dh_join.DefaultIfEmpty()

                                  where (cfs.i_IsDeleted == isDeleted) &&
                                        (cf.i_IsDeleted == isDeleted) &&
                                        (s.v_ServiceId == pstrServiceId)

                                  select new ComponentFieldsList
                                  {
                                      v_ComponentFieldId = cf.v_ComponentFieldId,
                                      v_TextLabel = cf.v_TextLabel,
                                      v_ComponentId = cfs.v_ComponentId,
                                      i_LabelWidth = cf.i_LabelWidth.Value,
                                      v_DefaultText = cf.v_DefaultText,
                                      i_ControlId = cf.i_ControlId.Value,
                                      i_GroupId = cf.i_GroupId.Value,
                                      i_ItemId = cf.i_ItemId.Value,
                                      i_ControlWidth = cf.i_WidthControl.Value,
                                      i_HeightControl = cf.i_HeightControl.Value,
                                      i_MaxLenght = cf.i_MaxLenght.Value,
                                      i_IsRequired = cf.i_IsRequired.Value,
                                      i_Column = cf.i_Column.Value,
                                      v_MeasurementUnitName = dh.v_Value1,
                                      i_IsCalculate = cf.i_IsCalculate.Value,
                                      i_Order = cf.i_Order.Value,
                                      i_MeasurementUnitId = cf.i_MeasurementUnitId.Value,
                                      r_ValidateValue1 = cf.r_ValidateValue1.Value,
                                      r_ValidateValue2 = cf.r_ValidateValue2.Value,
                                      v_Group = cfs.v_Group,
                                      v_Formula = cf.v_Formula,
                                      //i_LabelHeight = cf.i_HeightLabel, // este campo no existe
                                      //i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().v_ComponentFieldId != null ? (int?)SiNo.SI : (int?)SiNo.NO
                                      i_HasAutomaticDxId = hazAutoDx.FirstOrDefault().i_HasAutomaticDxId,
                                      //Values = _valueFields.Where(p => p.v_ComponentFieldsId == cfs.v_ComponentFieldId)
                                      //Values = xcfsv
                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                _valueFields.Sort((x, y) => x.v_ComponentFieldsId.CompareTo(y.v_ComponentFieldsId));
                _comFields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));
                _comFields.ForEach(a => a.Values = _valueFields.FindAll(p => p.v_ComponentFieldsId == a.v_ComponentFieldId));

               
                Formulate formu = null;
                TargetFieldOfCalculate targetFieldOfCalculate = null;

                foreach (var item in _comFields)
                {
                    List<Formulate> formuList = new List<Formulate>();
                    List<TargetFieldOfCalculate> targetFieldOfCalculateList = new List<TargetFieldOfCalculate>();

                    var find = _comFields.FindAll(p => p.v_Formula != null && p.v_Formula.Contains(item.v_ComponentFieldId));

                    if (find.Count != 0)
                    {
                        item.i_IsSourceFieldToCalculate = (int)SiNo.SI;

                        foreach (var f in find)
                        {
                            formu = new Formulate();
                            formu.v_Formula = f.v_Formula;
                            formu.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            formuList.Add(formu);

                            targetFieldOfCalculate = new TargetFieldOfCalculate();
                            targetFieldOfCalculate.v_TargetFieldOfCalculateId = f.v_ComponentFieldId;
                            targetFieldOfCalculateList.Add(targetFieldOfCalculate);
                        }

                        item.Formula = formuList;
                        item.TargetFieldOfCalculateId = targetFieldOfCalculateList;
                    }

                }

                // obligatorio para que los controles se dibujen en orden adecuado
                _comFields.Sort((x, y) => x.i_Order.CompareTo(y.i_Order));

                #endregion

                #region Components

                List<ComponentList> components = (from aaa in dbContext.servicecomponent
                                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()		                        
            
                                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                                        (aaa.i_IsDeleted == 0) &&
                                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)
                                                  //orderby aaa.v_ServiceComponentId, aaa.i_index
                                                  select new ComponentList
                                                  {
                                                      v_ComponentId = bbb.v_ComponentId,
                                                      v_Name = bbb.v_Name,
                                                      i_UIIsVisibleId = bbb.i_UIIsVisibleId,
                                                      i_ComponentTypeId = bbb.i_ComponentTypeId,
                                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = aaa.d_InsertDate,
                                                      d_UpdateDate = aaa.d_UpdateDate,
                                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                                      i_CategoryId = bbb.i_CategoryId,
                                                      v_CategoryName = fff.v_Value1,
                                                      i_GroupedComponentId = bbb.i_CategoryId,
                                                      v_GroupedComponentName = fff.v_Value1,
                                                      v_ComponentCopyId = bbb.v_ComponentId,
                                                      //i_Index = aaa.i_index
                                                      i_Index = bbb.i_UIIndex
                                                  }).ToList();

                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
              
                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.Fields = _comFields.FindAll(p => p.v_ComponentId == a.v_ComponentId));

            
                // Orden obligatorio para capturar siempre el v_ServiceComponentId correcto
                components.OrderBy(o1 => o1.v_ServiceComponentId).ThenBy(o2 => o2.i_Index).ToList();

                #endregion
                   
                #region Agrupar componentes individuales en un solo examen component ejem: Laboratorio , Psicologia

		        List<ComponentList> groupedComponentsName = null;

                var categories = components.FindAll(p => p.i_CategoryId != -1)
                                .GroupBy(g => g.i_CategoryId)
                                .Select(s => s.First())
                                //.OrderBy(o => o.i_CategoryId).ToList();
                                .OrderByDescending(o => o.v_CategoryName).ToList();
                // Ordenar la lista temp para hacer busquedas rapidas sobre ella (obligatorio)
                components.Sort((x, y) => x.i_CategoryId.Value.CompareTo(y.i_CategoryId.Value));

                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                    var componentsByCategory = components.FindAll(p => p.i_CategoryId == categoryId)
                                              .OrderBy(o => o.i_Index).ToList();

                   var join = string.Join("|", componentsByCategory.Select(p => p.v_ComponentId));
                   categories[i].v_ComponentId = join;

                   groupedComponentsName = new List<ComponentList>();

                   for (int j = 0; j < componentsByCategory.Count; j++)
                   {
                       var groupedComponentName = new ComponentList();
                       groupedComponentName.v_ComponentId = componentsByCategory[j].v_ComponentCopyId;
                       groupedComponentName.v_GroupedComponentName = componentsByCategory[j].v_Name;
                       groupedComponentName.i_Index = componentsByCategory[j].i_Index;
                       groupedComponentsName.Add(groupedComponentName);
                   }

                   categories[i].GroupedComponentsName = groupedComponentsName;
               }


                // Buscar componentes individuales
                var componentsToImport = components.FindAll(p => p.i_CategoryId != -1)
                                        .OrderBy(o => o.i_CategoryId).ToList();

                // Importar los campos de cada uno de los componentes individuales hacia el nuevo componente             
                for (int i = 0; i < categories.Count; i++)
                {
                    var categoryId = categories[i].i_CategoryId;

                   var fields = componentsToImport.FindAll(p => p.i_CategoryId == categoryId)
                               .SelectMany(p => p.Fields).ToList();

                    categories[i].i_IsGroupedComponent = (int)SiNo.SI;
                    categories[i].v_Name = categories[i].v_CategoryName;
                    categories[i].Fields = new List<ComponentFieldsList>();
                    categories[i].Fields.AddRange(fields);
                }

                // Eliminar los componentes individuales ya no sirven
                for (int i = 0; i < componentsToImport.Count; i++)
                {
                    components.Remove(componentsToImport[i]);
                }

                // Agregar los nuevos componentes (LAB,PSICOLOGIA) a la lista de examenes que va alimentar el ESO
                components.AddRange(categories);

                #endregion

                pobjOperationResult.Success = 1;

                return components;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }      
        
        public ServiceComponentList GetServiceComponentsInfo(ref OperationResult pobjOperationResult, string pstrServiceComponentId, string pstrServiceId)
        {

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from aaa in dbContext.servicecomponent
                             join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                             join cfs in dbContext.componentfields on bbb.v_ComponentId equals cfs.v_ComponentId
                             join cf in dbContext.componentfield on cfs.v_ComponentFieldId equals cf.v_ComponentFieldId
                             join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_ApprovedUpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join B in dbContext.systemparameter on new { a = aaa.i_ServiceComponentStatusId.Value, b = 127 }
                                                        equals new { a = B.i_ParameterId, b = B.i_GroupId } // estado del examen componente

                             where aaa.v_ServiceComponentId == pstrServiceComponentId &&
                                    bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
                                    aaa.i_IsDeleted == 0
                             orderby aaa.i_index

                             select new ServiceComponentList
                             {
                                 v_ServiceComponentId = aaa.v_ServiceComponentId,
                                 v_ComponentId = aaa.v_ComponentId,
                                 v_ComponentName = bbb.v_Name,
                                 i_ServiceComponentStatusId = aaa.i_ServiceComponentStatusId.Value,
                                 v_ServiceComponentStatusName = B.v_Value1,
                                 v_Comment = aaa.v_Comment,
                                 i_ExternalInternalId = aaa.i_ExternalInternalId.Value,
                                 d_StartDate = aaa.d_StartDate.Value,
                                 d_EndDate = aaa.d_EndDate.Value,
                                 i_QueueStatusId = aaa.i_QueueStatusId.Value,
                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = aaa.d_InsertDate,
                                 d_UpdateDate = aaa.d_UpdateDate,
                                 i_IsDeleted = aaa.i_IsDeleted.Value,
                                 i_ControlId = cf.i_ControlId,
                                 i_IsApprovedId = aaa.i_IsApprovedId
                             }).FirstOrDefault();

                // Cargar campos del componente Ejem Triaje : talla ; Peso ; etc
                query.ServiceComponentFields = GetServiceComponentFields(pstrServiceComponentId, pstrServiceId);

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateServiceComponent(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                //pobjDtoEntity.d_UpdateDate = DateTime.Now;
                //pobjDtoEntity.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                servicecomponent objEntity = servicecomponentAssembler.ToEntity(pobjDtoEntity);

                // Copiar los valores desde la entidad actualizada a la Entidad Fuente
                dbContext.servicecomponent.ApplyCurrentValues(objEntity);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + objEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void UpdateServiceComponentOffice(List<servicecomponentDto> list)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                foreach (var item in list)
                {
                    // Obtener la entidad fuente

                    var objEntitySource = dbContext.servicecomponent.SingleOrDefault(p => p.v_ServiceComponentId == item.v_ServiceComponentId);
                    objEntitySource.i_QueueStatusId = item.i_QueueStatusId;
                    objEntitySource.i_Iscalling = item.i_Iscalling;
                    objEntitySource.d_EndDate = item.d_EndDate;
                }

                // Guardar los cambios
                dbContext.SaveChanges();

                return;
            }
            catch (Exception ex)
            {
                return;
            }
        }

        public void UpdateServiceComponentOfficeLlamando(servicecomponentDto pobjDtoEntity)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pobjDtoEntity.v_ServiceComponentId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                objEntitySource.v_NameOfice = pobjDtoEntity.v_NameOfice;
                objEntitySource.i_QueueStatusId = pobjDtoEntity.i_QueueStatusId;

                // Guardar los cambios
                dbContext.SaveChanges();
            }
            catch (Exception)
            {
                return;
            }
        }


        public void UpdateServiceComponentVisor(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlagIsCalling)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pstrServiceComponentId
                                       select a).FirstOrDefault();
                objEntitySource.i_Iscalling = pintFlagIsCalling;

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                return;
            }
        }

        public void UpdateServiceComponentFromEso(ref OperationResult pobjOperationResult, servicecomponentDto pobjDtoEntity, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                string[] componentId = null;

                if (pobjDtoEntity.v_ComponentId != null)
                {
                    if (pobjDtoEntity.v_ComponentId.Contains('|'))
                    {
                        componentId = pobjDtoEntity.v_ComponentId.Split('|');
                    }
                    else
                    {
                        componentId = new string[1];
                        componentId[0] = pobjDtoEntity.v_ComponentId;
                    }
                }

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where (a.v_ServiceId == pobjDtoEntity.v_ServiceId) &&
                                             (componentId.Contains(a.v_ComponentId))
                                       select a).ToList();

                foreach (var item in objEntitySource)
                {
                    // Crear la entidad con los datos actualizados
                    item.v_Comment = pobjDtoEntity.v_Comment;
                    item.i_ServiceComponentStatusId = pobjDtoEntity.i_ServiceComponentStatusId;
                    item.i_ExternalInternalId = pobjDtoEntity.i_ExternalInternalId;

                    // Logica para soportar al tecnologo y al especialista que aprueba el examen

                    int? isApproved = (from a in dbContext.component
                                       where (a.v_ComponentId == item.v_ComponentId) &&
                                           (a.i_IsDeleted == 0)
                                       select a.i_IsApprovedId).FirstOrDefault();

                    // El examen Necesita ser aprobado / Revisado y diagnosticado x especialista

                    if (isApproved == (int)SiNo.SI)
                    {
                        // Lo esta aprobando el especialista que tambien es un medico evaluador
                        if (enabledchkApproved.Value)
                        {
                            item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
                            item.d_ApprovedUpdateDate = DateTime.Now;
                            item.i_IsApprovedId = pobjDtoEntity.i_IsApprovedId;
                        }
                        else
                        {
                            // El tecnologo esta registrando los datos
                            item.i_UpdateUserTechnicalDataRegisterId = Int32.Parse(ClientSession[2]);
                            item.d_UpdateDateTechnicalDataRegister = DateTime.Now;
                        }
                    }
                    else
                    {
                        item.i_ApprovedUpdateUserId = Int32.Parse(ClientSession[2]);
                        item.d_ApprovedUpdateDate = DateTime.Now;
                    }

                    // Una sola vez se graba la fecha de creacion / grabacion del examen
                    if (item.d_ApprovedInsertDate == null)
                    {
                        item.d_ApprovedInsertDate = DateTime.Now;
                    }

                }

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "COMPONENTE SERVICIO", "v_ServiceComponentId=" + pobjDtoEntity.v_ServiceComponentId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public servicecomponentDto GetServiceComponent(ref OperationResult pobjOperationResult, string pstrServiceComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                servicecomponentDto objDtoEntity = null;

                var objEntity = (from a in dbContext.servicecomponent
                                 where a.v_ServiceComponentId == pstrServiceComponentId
                                 select a).FirstOrDefault();

                if (objEntity != null)
                    objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);

                pobjOperationResult.Success = 1;
                return objDtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<ServiceComponentList> GetServiceComponentByCategoryId(ref OperationResult pobjOperationResult, int pstrCategoryId, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                //servicecomponentDto objDtoEntity = null;

                var objEntity = (from a in dbContext.servicecomponent
                                 join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
                                 where b.i_CategoryId == pstrCategoryId && a.v_ServiceId == pstrServiceId && a.i_IsRequiredId == (int)SiNo.SI
                                 select new ServiceComponentList
                                 {
                                     v_ServiceComponentId = a.v_ServiceComponentId,
                                     v_ServiceId = a.v_ServiceId,
                                     v_ComponentId = a.v_ComponentId,
                                     v_ComponentName = b.v_Name
                                 }).ToList();

                //if (objEntity != null)
                //    objDtoEntity = servicecomponentAssembler.ToDTO(objEntity);
                List<ServiceComponentList> objDataList = objEntity.ToList();
                pobjOperationResult.Success = 1;
                return objDataList;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public void UpdateEstadoServiceComponent(ref OperationResult pobjOperationResult, string pstrServiceComponentId, int pintFlag)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.servicecomponent
                                       where a.v_ServiceComponentId == pstrServiceComponentId
                                       select a).FirstOrDefault();
                objEntitySource.i_ServiceComponentStatusId = pintFlag;

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                return;
            }
        }



        #region Anamnesis

        public void UpdateAnamnesis(ref OperationResult pobjOperationResult, serviceDto pobjDtoEntity, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pobjDtoEntity.v_ServiceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                objEntitySource.v_MainSymptom = pobjDtoEntity.v_MainSymptom;
                objEntitySource.i_TimeOfDisease = pobjDtoEntity.i_TimeOfDisease;
                objEntitySource.i_TimeOfDiseaseTypeId = pobjDtoEntity.i_TimeOfDiseaseTypeId;
                objEntitySource.v_Story = pobjDtoEntity.v_Story;
                objEntitySource.i_DreamId = pobjDtoEntity.i_DreamId;
                objEntitySource.i_UrineId = pobjDtoEntity.i_UrineId;
                objEntitySource.i_DepositionId = pobjDtoEntity.i_DepositionId;
                objEntitySource.i_AppetiteId = pobjDtoEntity.i_AppetiteId;
                objEntitySource.i_ThirstId = pobjDtoEntity.i_ThirstId;
                objEntitySource.d_Fur = pobjDtoEntity.d_Fur;
                objEntitySource.v_CatemenialRegime = pobjDtoEntity.v_CatemenialRegime;
                objEntitySource.i_MacId = pobjDtoEntity.i_MacId;
                objEntitySource.i_HasSymptomId = pobjDtoEntity.i_HasSymptomId;

                objEntitySource.d_PAP = pobjDtoEntity.d_PAP;
                objEntitySource.d_Mamografia = pobjDtoEntity.d_Mamografia;
                objEntitySource.v_Menarquia = pobjDtoEntity.v_Menarquia;
                objEntitySource.v_Gestapara = pobjDtoEntity.v_Gestapara;
                objEntitySource.v_CiruGine = pobjDtoEntity.v_CiruGine;
                objEntitySource.v_Findings = pobjDtoEntity.v_Findings;
                // datos de cabecera del Servicio
                objEntitySource.i_AptitudeStatusId = pobjDtoEntity.i_AptitudeStatusId;
                objEntitySource.i_IsNewControl = pobjDtoEntity.i_IsNewControl;
                objEntitySource.i_Evolucion = pobjDtoEntity.i_Evolucion;
                objEntitySource.i_CursoEnf = pobjDtoEntity.i_CursoEnf;
                objEntitySource.i_InicioEnf = pobjDtoEntity.i_InicioEnf;

                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ACTUALIZACION, "SERVICIO", "v_ServiceId=" + pobjDtoEntity.v_ServiceId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Diagnosticos del examen / componente

        public List<DiagnosticRepositoryList> GetDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos    

                                                        join eee in dbContext.cie10 on ddd.v_CIE10Id equals eee.v_CIE10Id  // Diagnosticos

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 166 } // TIPO  [Accidenete, Enfermedad]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                            equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join JJJ in dbContext.systemparameter on new { a = ccc.i_DiagnosticSourceId.Value, b = 167 } // ORIGEN OCU
                                                                                           equals new { a = JJJ.i_ParameterId, b = JJJ.i_GroupId } into J7_join
                                                        from JJJ in J7_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where ccc.v_ServiceId == pstrServiceId &&
                                                              ccc.i_IsDeleted == 0

                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                                            v_DiseasesName = ddd.v_Name,

                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value,

                                                            i_DiagnosticSourceId = ccc.i_DiagnosticSourceId,
                                                            v_DiagnosticSourceName = JJJ.v_Value1,
                                                            // Accidente laboral
                                                            i_ShapeAccidentId = ccc.i_ShapeAccidentId,
                                                            i_BodyPartId = ccc.i_BodyPartId,
                                                            i_ClassificationOfWorkAccidentId = ccc.i_ClassificationOfWorkAccidentId,
                                                            // Enfermedad laboral
                                                            i_RiskFactorId = ccc.i_RiskFactorId,
                                                            i_ClassificationOfWorkdiseaseId = ccc.i_ClassificationOfWorkdiseaseId,
                                                            v_Cie10 = eee.v_CIE10Id
                                                        }).ToList();


                var sql = (from a in query

                           select new DiagnosticRepositoryList
                           {
                               v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                               v_ServiceId = a.v_ServiceId,
                               v_ComponentId = a.v_ComponentId,
                               v_DiseasesId = a.v_DiseasesId,
                               i_AutoManualId = a.i_AutoManualId,
                               i_PreQualificationId = a.i_PreQualificationId,
                               i_FinalQualificationId = a.i_FinalQualificationId,
                               i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                               i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                               d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                               i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                               v_DiseasesName = a.v_DiseasesName,

                               v_FinalQualificationName = a.v_FinalQualificationName,
                               v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                               v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                               i_RecordStatus = (int)RecordStatus.Grabado,
                               i_RecordType = (int)RecordType.NoTemporal,

                               v_CreationUser =a.v_CreationUser,
                               v_UpdateUser = a.v_UpdateUser,
                               d_CreationDate = a.d_CreationDate,
                               d_UpdateDate = a.d_UpdateDate,
                               i_IsDeleted = a.i_IsDeleted,

                               i_DiagnosticSourceId = a.i_DiagnosticSourceId,
                               v_DiagnosticSourceName = a.v_DiagnosticSourceName,
                               // Accidente laboral
                               i_ShapeAccidentId =a.i_ShapeAccidentId,
                               i_BodyPartId = a.i_BodyPartId,
                               i_ClassificationOfWorkAccidentId = a.i_ClassificationOfWorkAccidentId,
                               // Enfermedad laboral
                               i_RiskFactorId = a.i_RiskFactorId,
                               i_ClassificationOfWorkdiseaseId = a.i_ClassificationOfWorkdiseaseId,
                               v_Cie10 = a.v_Cie10,
                               v_Dx_CIE10 = a.v_DiseasesName + "   (" + a.v_Cie10 + ")"
                                                

                           }).ToList();



                pobjOperationResult.Success = 1;
                return sql;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                string[] components = pstrComponentId.Split('|');

                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                             join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                  equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                             from iii in J6_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                 //bbb.i_ComponentTypeId == (int?)ComponentType.Examen &&
                                   (components.Contains(ccc.v_ComponentId)) &&
                                 //ccc.v_ComponentId == pstrComponentId &&
                                   (ccc.i_IsDeleted == 0)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_AutoManualName = eee.v_Value1,

                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_IsSentToAntecedentName = iii.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,

                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = J1.d_InsertDate,
                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value
                             }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                             v_ComponentFieldsId = a.v_ComponentFieldsId,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                foreach (DiagnosticRepositoryList dr in q)
                {
                    dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                    dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                }

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void AddDiagnosticRepository(ref OperationResult pobjOperationResult, List<DiagnosticRepositoryList> pobjDiagnosticRepository, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);
            string componentId = null;

            //try
            //{
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            if (pobjDiagnosticRepository != null)
            {
                foreach (var dr in pobjDiagnosticRepository)
                {

                    #region DiagnosticRepository -> ADD / UPDATE / DELETE

                    // ADD
                    if (dr.i_RecordType == (int)RecordType.Temporal && (dr.i_RecordStatus == (int)RecordStatus.Agregado || dr.i_RecordStatus == (int)RecordStatus.Modificado))
                    {
                        diagnosticrepository objEntity = new diagnosticrepository();

                        // En caso de haber mas de un ComponentID quiere decir que lo datos provienen de un examen agrupador con una categoria (LAB,PSICOLOGIA) 
                        // entonces cojo el ID del hijo mayor (osea el primer ID)[0]
                        // Buscar un palote
                        if (dr.v_ComponentId != null)
                        {
                            if (dr.v_ComponentId.Contains('|'))
                                componentId = (dr.v_ComponentId.Split('|'))[0];
                            else
                                componentId = dr.v_ComponentId;
                        }

                        objEntity.v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId;
                        objEntity.v_ServiceId = dr.v_ServiceId;
                        objEntity.v_ComponentId = componentId;
                        objEntity.v_DiseasesId = dr.v_DiseasesId;
                        // ID del Control que generó el DX automático [v_ComponentFieldsId]
                        objEntity.v_ComponentFieldId = dr.v_ComponentFieldsId;
                        objEntity.i_AutoManualId = dr.i_AutoManualId;
                        objEntity.i_PreQualificationId = dr.i_PreQualificationId;
                        // Total Diagnósticos
                        objEntity.i_FinalQualificationId = dr.i_FinalQualificationId;
                        objEntity.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
                        objEntity.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
                        objEntity.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Accidente laboral
                        objEntity.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
                        objEntity.i_ShapeAccidentId = dr.i_ShapeAccidentId;
                        objEntity.i_BodyPartId = dr.i_BodyPartId;
                        objEntity.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

                        // Enfermedad laboral
                        objEntity.i_RiskFactorId = dr.i_RiskFactorId;
                        objEntity.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 29), "DR");
                        objEntity.v_DiagnosticRepositoryId = NewId0;

                        dbContext.AddTodiagnosticrepository(objEntity);

                    }                                                // UPDATE
                    else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.Modificado)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.diagnosticrepository
                                               where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados   
                        objEntitySource.i_AutoManualId = dr.i_AutoManualId;
                        objEntitySource.i_PreQualificationId = dr.i_PreQualificationId;
                        objEntitySource.v_ComponentId = dr.v_ComponentId.Split('|')[0];
                        // ID del Control que generó el DX automático [v_ComponentFieldsId]
                        //objEntitySource.v_ComponentFieldsId = dr.v_ComponentFieldsId;
                        // Total Diagnósticos
                        if (objEntitySource.i_FinalQualificationId == null)
                            objEntitySource.i_FinalQualificationId = dr.i_FinalQualificationId;

                        objEntitySource.i_DiagnosticTypeId = dr.i_DiagnosticTypeId;
                        objEntitySource.i_IsSentToAntecedent = dr.i_IsSentToAntecedent;
                        objEntitySource.d_ExpirationDateDiagnostic = dr.d_ExpirationDateDiagnostic;

                        // Accidente laboral
                        objEntitySource.i_DiagnosticSourceId = dr.i_DiagnosticSourceId;
                        objEntitySource.i_ShapeAccidentId = dr.i_ShapeAccidentId;
                        objEntitySource.i_BodyPartId = dr.i_BodyPartId;
                        objEntitySource.i_ClassificationOfWorkAccidentId = dr.i_ClassificationOfWorkAccidentId;

                        // Enfermedad laboral
                        objEntitySource.i_RiskFactorId = dr.i_RiskFactorId;
                        objEntitySource.i_ClassificationOfWorkdiseaseId = dr.i_ClassificationOfWorkdiseaseId;

                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    }                                                // DELETE
                    else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.diagnosticrepository
                                               where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                    }

                    #endregion

                    #region Restricciones -> ADD / DELETE

                    if (dr.Restrictions != null)
                    {
                        // Operaciones básicas [Add,Update,Delete] restricciones 
                        foreach (var r in dr.Restrictions)
                        {
                            if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                            {
                                restriction objRestriction = new restriction();

                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                                objRestriction.v_ServiceId = r.v_ServiceId;
                                objRestriction.v_ComponentId = r.v_ComponentId.Split('|')[0];
                                //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                                objRestriction.v_RestrictionId = NewId1;
                                objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

                                objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId.Length > 16 ? null : r.v_MasterRestrictionId;
                                objRestriction.d_InsertDate = DateTime.Now;
                                objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objRestriction.i_IsDeleted = 0;

                                dbContext.AddTorestriction(objRestriction);

                            }
                            else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                            {
                                // Obtener la entidad fuente v_RestrictionByDiagnosticId
                                var objEntitySource = (from a in dbContext.restriction
                                                       where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                       select a).FirstOrDefault();

                                // Crear la entidad con los datos actualizados                                                           
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                                objEntitySource.i_IsDeleted = 1;

                            }
                        }
                    }

                    #endregion

                    #region Recomendaciones -> ADD / DELETE

                    if (dr.Recomendations != null)
                    {
                        // Grabar recomendaciones 
                        foreach (var r in dr.Recomendations)
                        {
                            if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                            {
                                recommendation objRecommendation = new recommendation();

                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                                objRecommendation.v_ServiceId = r.v_ServiceId;
                                objRecommendation.v_ComponentId = r.v_ComponentId.Split('|')[0];
                                objRecommendation.v_RecommendationId = NewId1;
                                objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? dr.v_DiagnosticRepositoryId : NewId0;

                                //objRecommendation.v_MasterRecommendationId = r.v_RecommendationId.Length > 16 ? null : r.v_MasterRecommendationId;
                                objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
                                objRecommendation.d_InsertDate = DateTime.Now;
                                objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objRecommendation.i_IsDeleted = 0;

                                dbContext.AddTorecommendation(objRecommendation);

                            }
                            else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                            {
                                // Obtener la entidad fuente
                                var objEntitySource = (from a in dbContext.recommendation
                                                       where a.v_RecommendationId == r.v_RecommendationId
                                                       select a).FirstOrDefault();

                                // Crear la entidad con los datos actualizados                                                           
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                                objEntitySource.i_IsDeleted = 1;

                            }
                        }
                    }

                    #endregion

                }

                // Guardar los cambios
                dbContext.SaveChanges();              

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
              
                //}
                //catch (Exception ex)
                //{
                //    pobjOperationResult.Success = 0;
                //    pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                //    // Llenar entidad Log
                //    LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR EXAMEN COMPONENTE", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                //    return;
                //}
            }

            if (pobjServiceComponent != null)
            {
                // Actualizar algunos valores de ServiceComponent
                OperationResult objOperationResult = new OperationResult();
                UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, enabledchkApproved);
            }

        }

        private string ConcatenateRestriction(string pstrDiagnosticRepositoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
                       join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                       a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
                       select new
                       {
                           v_RestrictionsName = eee.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
        }


        private string ConcatenateRestrictionByCategoria(int pintCategoryId, string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.restriction  // RESTRICCIONES POR Diagnosticos
                       join c in dbContext.component on a.v_ComponentId equals c.v_ComponentId
                       join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
                       where c.i_CategoryId == pintCategoryId  &&  eee.i_IsDeleted==0    && a.v_ServiceId == pstrServiceId &&
                       a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Restricciones
                       select new
                       {
                           v_RestrictionsName = eee.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_RestrictionsName));
        }


        private string ConcatenateRecommendation(string pstrDiagnosticRepositoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.recommendation  // RECOMENDACIONES
                       join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId
                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                       a.i_IsDeleted == 0 && eee.i_TypifyingId == (int)Typifying.Recomendaciones
                       select new
                       {
                           v_RecommendationName = eee.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_RecommendationName));
        }

        public bool AddServiceComponentValues(ref OperationResult pobjOperationResult, List<ServiceComponentFieldsList> pobjServicecomponentfields, List<string> ClientSession, string pstrPersonId, string pServiceComponentId)
        {
         
            bool result = false;

            string NewId = "(No generado)";
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                int intNodeId = int.Parse(ClientSession[0]);
                List<string> grupoFactorSanguineo = new List<string>();

                var serviceComponentfields = (from a in dbContext.servicecomponentfields
                                              where a.v_ServiceComponentId == pServiceComponentId
                                              select a).ToList();

                //var ENT = serviceComponentfields.SelectMany(P => P.servicecomponentfieldvalues.Where(p => p.v_ServiceComponentFieldsId == "N009-CF000517532")).ToList();

                serviceComponentfields.Sort((x, y) => x.v_ComponentFieldId.CompareTo(y.v_ComponentFieldId));

                foreach (var cf in pobjServicecomponentfields)
                {
                    var q = serviceComponentfields.Find(p => p.v_ComponentFieldId == cf.v_ComponentFieldsId);

                    if (q == null)   // ADD
                    {
                        #region GRABAR CAMPOS DE UN SERVICE COMPONENT

                        servicecomponentfields objEntity = new servicecomponentfields();

                        objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
                        objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla               
                        NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
                        objEntity.v_ServiceComponentFieldsId = NewId;

                        dbContext.AddToservicecomponentfields(objEntity);
                        //dbContext.SaveChanges();

                        #endregion

                        foreach (var fv in cf.ServiceComponentFieldValues)
                        {
                            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            #endregion

                            #region GRABAR VALORES DE UN SERVICE COMPONENT

                            servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

                            objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                            objEntity1.v_Value1 = fv.v_Value1;
                            objEntity1.d_InsertDate = DateTime.Now;
                            objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objEntity1.i_IsDeleted = 0;

                            // Autogeneramos el Pk de la tabla               
                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                            objEntity1.v_ServiceComponentFieldValuesId = NewId1;
                            objEntity1.v_ServiceComponentFieldsId = NewId;

                            dbContext.AddToservicecomponentfieldvalues(objEntity1);
                         

                            #endregion
                        }
                    }
                    else         // UPDATE
                    {
                        #region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

                        //q.v_ComponentFieldId = cf.v_ComponentFieldsId;
                        //q.v_ServiceComponentId = cf.v_ServiceComponentId;
                        q.d_UpdateDate = DateTime.Now;
                        q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                        // Guardar los cambios
                        //dbContext.SaveChanges();

                        #endregion

                        foreach (var fv in cf.ServiceComponentFieldValues)
                        {
                            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                            {
                                grupoFactorSanguineo.Add(fv.v_Value1);
                            }

                            #endregion

                            #region ACTUALIZAR VALORES DE UN SERVICE COMPONENT

                            var q1 = (from a in dbContext.servicecomponentfieldvalues
                                      where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
                                      select a).FirstOrDefault();

                            // problema k pasaba con examen fisico se grababa el campo pero no el valor si el valor no esta grabado
                            // se graba a la prepo
                            if (q1 == null)
                            {
                                servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

                                objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                                objEntity1.v_Value1 = fv.v_Value1;
                                objEntity1.d_InsertDate = DateTime.Now;
                                objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
                                objEntity1.i_IsDeleted = 0;

                                // Autogeneramos el Pk de la tabla               
                                var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                                objEntity1.v_ServiceComponentFieldValuesId = NewId1;
                                objEntity1.v_ServiceComponentFieldsId = q.v_ServiceComponentFieldsId;

                                dbContext.AddToservicecomponentfieldvalues(objEntity1);
                            }
                            else
                            {
                                //if (q.v_ServiceComponentFieldsId == "N009-CF000517532")
                                //{
                                //    var ff = cf.v_Value1;
                                //}

                                //q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                                q1.v_Value1 = fv.v_Value1;
                                q1.d_UpdateDate = DateTime.Now;
                                q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }

                            #endregion
                        }
                    }
                }

                if (grupoFactorSanguineo.Count != 0)
                {
                    #region GRABAR GRUPO y FACTOR SANGUINEO

                    var person = (from a in dbContext.person
                                  where a.v_PersonId == pstrPersonId
                                  select a).FirstOrDefault();

                    person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
                    person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
                    person.d_UpdateDate = DateTime.Now;
                    person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    //dbContext.SaveChanges();

                    #endregion
                }

                //var aaaa = pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues).ToList();
                //var search = aaaa.FindAll(p => p.v_Value1 != "1" && p.v_Value1 != "-1");

                //pobjServicecomponentfields.Select(p => p.ServiceComponentFieldValues).ToList() = null;
                //foreach (var item in pobjServicecomponentfields)
                //{
                //    item.ServiceComponentFieldValues = search;
                //}

                //pobjServicecomponentfields.SelectMany(p => p.ServiceComponentFieldValues);

                //foreach (var cf in pobjServicecomponentfields)
                //{
                //    var q = (from a in dbContext.servicecomponentfields
                //             where a.v_ComponentFieldId == cf.v_ComponentFieldsId &&
                //             a.v_ServiceComponentId == cf.v_ServiceComponentId
                //             select a).FirstOrDefault();

                //    if (q == null)   // ADD
                //    {
                //        #region GRABAR CAMPOS DE UN SERVICE COMPONENT

                //        servicecomponentfields objEntity = new servicecomponentfields();

                //        objEntity.v_ComponentFieldId = cf.v_ComponentFieldsId;
                //        objEntity.v_ServiceComponentId = cf.v_ServiceComponentId;
                //        objEntity.d_InsertDate = DateTime.Now;
                //        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                //        objEntity.i_IsDeleted = 0;

                //        // Autogeneramos el Pk de la tabla               
                //        NewId = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 35), "CF");
                //        objEntity.v_ServiceComponentFieldsId = NewId;

                //        dbContext.AddToservicecomponentfields(objEntity);
                //        //dbContext.SaveChanges();

                //        #endregion

                //        foreach (var fv in cf.ServiceComponentFieldValues)
                //        {
                //            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                //            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                //            {
                //                grupoFactorSanguineo.Add(fv.v_Value1);
                //            }

                //            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                //            {
                //                grupoFactorSanguineo.Add(fv.v_Value1);
                //            }

                //            #endregion

                //            #region GRABAR VALORES DE UN SERVICE COMPONENT

                //            servicecomponentfieldvalues objEntity1 = new servicecomponentfieldvalues();

                //            objEntity1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                //            objEntity1.v_Value1 = fv.v_Value1;
                //            objEntity1.d_InsertDate = DateTime.Now;
                //            objEntity1.i_InsertUserId = Int32.Parse(ClientSession[2]);
                //            objEntity1.i_IsDeleted = 0;

                //            // Autogeneramos el Pk de la tabla               
                //            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 36), "CV");
                //            objEntity1.v_ServiceComponentFieldValuesId = NewId1;
                //            objEntity1.v_ServiceComponentFieldsId = NewId;

                //            dbContext.AddToservicecomponentfieldvalues(objEntity1);
                //            //dbContext.SaveChanges();

                //            #endregion
                //        }
                //    }
                //    else         // UPDATE
                //    {
                //        #region ACTUALIZAR CAMPOS DE UN SERVICE COMPONENT

                //        //q.v_ComponentFieldId = cf.v_ComponentFieldsId;
                //        //q.v_ServiceComponentId = cf.v_ServiceComponentId;
                //        q.d_UpdateDate = DateTime.Now;
                //        q.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                //        // Guardar los cambios
                //        //dbContext.SaveChanges();

                //        #endregion

                //        foreach (var fv in cf.ServiceComponentFieldValues)
                //        {
                //            #region Buscar y almacenar GRUPO y FACTOR SANGUINEO en una lista temp

                //            if (cf.v_ComponentFieldsId == Constants.GRUPO_SANGUINEO_ID)
                //            {
                //                grupoFactorSanguineo.Add(fv.v_Value1);
                //            }

                //            if (cf.v_ComponentFieldsId == Constants.FACTOR_SANGUINEO_ID)
                //            {
                //                grupoFactorSanguineo.Add(fv.v_Value1);
                //            }

                //            #endregion

                //            #region ACTUALIZAR VALORES DE UN SERVICE COMPONENT FIELD VALUES

                //            var q1 = (from a in dbContext.servicecomponentfieldvalues
                //                      where a.v_ServiceComponentFieldsId == q.v_ServiceComponentFieldsId
                //                      select a).FirstOrDefault();

                //            //q1.v_ComponentFieldValuesId = fv.v_ComponentFieldValuesId;
                //            q1.v_Value1 = fv.v_Value1;
                //            q1.d_UpdateDate = DateTime.Now;
                //            q1.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                //            dbContext.SaveChanges();

                //            #endregion
                //        }
                //    }
                //}

                //if (grupoFactorSanguineo.Count != 0)
                //{
                //    #region GRABAR GRUPO y FACTOR SANGUINEO

                //    var person = (from a in dbContext.person
                //                  where a.v_PersonId == pstrPersonId
                //                  select a).FirstOrDefault();

                //    person.i_BloodGroupId = int.Parse(grupoFactorSanguineo[0]);
                //    person.i_BloodFactorId = int.Parse(grupoFactorSanguineo[1]);
                //    person.d_UpdateDate = DateTime.Now;
                //    person.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                //    //dbContext.SaveChanges();

                //    #endregion
                //}

                result  = (dbContext.SaveChanges() > 0);

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Ok, null);
             
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "CAMPOS DE UN COMPONENTE DE SERVICIO", "v_ServiceComponentId=" + NewId.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
              
            }

            return result;
        }

        public List<DiagnosticRepositoryList> GetDiagnosticoSugeridoSistema(ref OperationResult pobjOperationResult, string pstrComponentFieldsId, string pstrAnalyzingValue)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<DiagnosticRepositoryList> query = (from ccc in dbContext.componentfieldvalues
                                                        //join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId

                                                        join ddd in dbContext.diseases on ccc.v_Diseases equals ddd.v_DiseasesId into J6_join  // Diagnosticos
                                                        from ddd in J6_join.DefaultIfEmpty()

                                                        join eee in dbContext.systemparameter on new { a = (int)AutoManual.Automático, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                                        join fff in dbContext.systemparameter on new { a = (int)PreQualification.SinPreCalificar, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where ccc.v_ComponentFieldId == pstrComponentFieldsId &&
                                                              ccc.i_IsDeleted == 0
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            //v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            //v_ServiceId = ccc.v_ServiceId,
                                                            //v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_Diseases,
                                                            //i_AutoManualId = ccc.i_AutoManualId,
                                                            //i_PreQualificationId = ccc.i_PreQualificationId,
                                                            //i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            //i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            //i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            //d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            //i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                            v_ComponentFieldValuesId = ccc.v_ComponentFieldValuesId,
                                                            v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                                            v_LegalStandard = ccc.v_LegalStandard,
                                                            i_OperatorId = ccc.i_OperatorId,
                                                            i_IsAnormal = ccc.i_IsAnormal,
                                                            i_ValidationMonths = ccc.i_ValidationMonths,
                                                            v_AnalyzingValue1 = ccc.v_AnalyzingValue1,
                                                            v_AnalyzingValue2 = ccc.v_AnalyzingValue2,

                                                            v_DiseasesName = ddd.v_Name,
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_PreQualificationName = fff.v_Value1,

                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();

                float? f = float.Parse(pstrAnalyzingValue);

                var q = (from a in query
                         //where (a.i_OperatorId == (int)Operator2Values.X_esMenorque_A) && (a.r_AnalyzingValue1 < f) &&
                         //       (a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A) && (a.r_AnalyzingValue1 >= f)
                         //where a.v_ComponentFieldsId == "Just perfect"
                         select new DiagnosticRepositoryList
                         {
                             //v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             //v_ServiceId = a.v_ServiceId,
                             //v_ComponentId = a.v_ComponentId,
                             //v_DiseasesId = a.v_DiseasesId,
                             //i_AutoManualId = a.i_AutoManualId,
                             //i_PreQualificationId = a.i_PreQualificationId,
                             //i_FinalQualificationId = a.i_FinalQualificationId,
                             //i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             //i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             //d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             //i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             //v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_ComponentFieldValuesId = a.i_OperatorId == (int)Operator2Values.X_esIgualque_A ? "Toasted" :
                                                        a.i_OperatorId == (int)Operator2Values.X_noesIgualque_A ? "I like it" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMenorque_A ? "Just perfect" :  // X < 18.5 (bajo peso)
                                                        a.i_OperatorId == (int)Operator2Values.X_esMenorIgualque_A ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A ? "Gonna freeze my" :  // X >= 40.0
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorque_A_yMenorIgualque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorque_B ? "Gonna freeze my" :
                                                        a.i_OperatorId == (int)Operator2Values.X_esMayorIgualque_A_yMenorIgualque_B ? "Gonna freeze my" : "",

                             i_OperatorId = a.i_OperatorId,
                             i_IsAnormal = a.i_IsAnormal,
                             i_ValidationMonths = a.i_ValidationMonths,
                             v_AnalyzingValue1 = a.v_AnalyzingValue1,
                             v_AnalyzingValue2 = a.v_AnalyzingValue2,
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             //v_FinalQualificationName = a.v_FinalQualificationName,
                             //v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             //v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        #endregion

        #region Plan Trabajo

        #region Medicacion

        public List<MedicationList> GetServiceMedicationsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<MedicationList> query = (from ddd in dbContext.medication
                                              //join fff in dbContext.product on ddd.v_ProductId equals fff.v_ProductId
                                              join eee in dbContext.systemparameter on new { a = ddd.i_ViaId.Value, b = 142 } // VIAS [ORAL,INTRAMUSCULAR,ETC]
                                                                                      equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                              join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                              equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                              from J1 in J1_join.DefaultIfEmpty()

                                              join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                              equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                              from J2 in J2_join.DefaultIfEmpty()

                                              where ddd.v_ServiceId == pstrServiceId &&
                                                    ddd.i_IsDeleted == 0
                                              select new MedicationList
                                              {
                                                  v_MedicationId = ddd.v_MedicationId,
                                                  v_ProductId = ddd.v_ProductId,
                                                  v_ServiceId = ddd.v_ServiceId,
                                                  //v_ProductName = ddd.v_ProductName,
                                                  //v_PresentationName = ddd.v_PresentationName,
                                                  r_Quantity = ddd.r_Quantity,
                                                  v_Doses = ddd.v_Doses,
                                                  i_ViaId = ddd.i_ViaId,
                                                  v_ViaName = eee.v_Value1,
                                                  i_RecordStatus = (int)RecordStatus.Grabado,
                                                  i_RecordType = (int)RecordType.NoTemporal,
                                                  v_CreationUser = J1.v_UserName,
                                                  v_UpdateUser = J2.v_UserName,
                                                  d_CreationDate = J1.d_InsertDate,
                                                  d_UpdateDate = J2.d_UpdateDate,
                                                  i_IsDeleted = ddd.i_IsDeleted.Value
                                              }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Procedimientos

        public List<ProcedureByServiceList> GetServiceProceduresForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<ProcedureByServiceList> query = (from ddd in dbContext.procedurebyservice
                                                      join eee in dbContext.datahierarchy on new { a = ddd.i_ProcedureId.Value, b = 111 } // PROCEDIMIENTOS [INYECTABLES,LAVADO OCULAR,ETC]
                                                                                              equals new { a = eee.i_ItemId, b = eee.i_GroupId }

                                                      join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                      equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                      from J1 in J1_join.DefaultIfEmpty()

                                                      join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                      equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                      from J2 in J2_join.DefaultIfEmpty()

                                                      where ddd.v_ServiceId == pstrServiceId &&
                                                            ddd.i_IsDeleted == 0
                                                      select new ProcedureByServiceList
                                                      {
                                                          v_ProcedureByServiceId = ddd.v_ProcedureByServiceId,
                                                          v_ServiceId = ddd.v_ServiceId,
                                                          i_ProcedureId = ddd.i_ProcedureId,
                                                          v_ProcedureName = eee.v_Value1,
                                                          i_RecordStatus = (int)RecordStatus.Grabado,
                                                          i_RecordType = (int)RecordType.NoTemporal,
                                                          v_CreationUser = J1.v_UserName,
                                                          v_UpdateUser = J2.v_UserName,
                                                          d_CreationDate = J1.d_InsertDate,
                                                          d_UpdateDate = J2.d_UpdateDate,
                                                          i_IsDeleted = ddd.i_IsDeleted.Value
                                                      }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Restricciones

        public List<RestrictionList> GetServiceRestrictionsForGridView(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
                                               join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                                               from fff in J7_join.DefaultIfEmpty()

                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

                                               join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                               equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                               from J1 in J1_join.DefaultIfEmpty()

                                               join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                               equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                               from J2 in J2_join.DefaultIfEmpty()
                                               where (ddd.v_ServiceId == pstrServiceId) &&
                                               (ddd.i_IsDeleted == 0) &&
                                               (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                               fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                                               select new RestrictionList
                                               {
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   i_RecordStatus = (int)RecordStatus.Grabado,
                                                   i_RecordType = (int)RecordType.NoTemporal,
                                                   d_StartDateRestriction = ddd.d_StartDateRestriction,
                                                   d_EndDateRestriction = ddd.d_EndDateRestriction

                                               }).Concat(from r in dbContext.restriction
                                                         join eee in dbContext.masterrecommendationrestricction on r.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId
                                                         where (r.v_ServiceId == pstrServiceId) &&
                                                         (r.i_IsDeleted == 0) &&
                                                         (r.v_DiagnosticRepositoryId == null)
                                                         select new RestrictionList
                                                         {
                                                             v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
                                                             v_RestrictionByDiagnosticId = r.v_RestrictionId,
                                                             v_MasterRestrictionId = r.v_MasterRestrictionId,
                                                             v_RestrictionName = eee.v_Name,
                                                             v_ComponentId = r.v_ComponentId,
                                                             i_RecordStatus = (int)RecordStatus.Grabado,
                                                             i_RecordType = (int)RecordType.NoTemporal,
                                                             d_StartDateRestriction = r.d_StartDateRestriction,
                                                             d_EndDateRestriction = r.d_EndDateRestriction

                                                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RestrictionList> GetServiceRestrictionsByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction  // RESTRICCIONES 
                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId // RESTRICIONES

                                               join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                               equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                               from J1 in J1_join.DefaultIfEmpty()

                                               join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                               equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                               from J2 in J2_join.DefaultIfEmpty()

                                               where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                     ddd.i_IsDeleted == 0
                                               select new RestrictionList
                                               {
                                                   //v_RestrictionByDiagnosticId = ddd.v_RestrictionByDiagnosticId,
                                                   v_RestrictionByDiagnosticId = ddd.v_RestrictionId,
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_ServiceId = ddd.v_ServiceId,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,
                                                   i_RecordStatus = (int)RecordStatus.Grabado,
                                                   i_RecordType = (int)RecordType.NoTemporal,
                                                   v_CreationUser = J1.v_UserName,
                                                   v_UpdateUser = J2.v_UserName,
                                                   d_CreationDate = J1.d_InsertDate,
                                                   d_UpdateDate = J2.d_UpdateDate,
                                                   i_IsDeleted = ddd.i_IsDeleted.Value
                                               }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        #endregion

        #region Recomendaciones

        public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryId(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                  

                                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                 from J1 in J1_join.DefaultIfEmpty()

                                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                 from J2 in J2_join.DefaultIfEmpty()

                                                 where ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                       ddd.i_IsDeleted == 0
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,
                                                     i_RecordStatus = (int)RecordStatus.Grabado,
                                                     i_RecordType = (int)RecordType.NoTemporal,
                                                     v_CreationUser = J1.v_UserName,
                                                     v_UpdateUser = J2.v_UserName,
                                                     d_CreationDate = J1.d_InsertDate,
                                                     d_UpdateDate = J2.d_UpdateDate,
                                                     i_IsDeleted = ddd.i_IsDeleted.Value
                                                 }).ToList();



                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RecomendationList> GetServiceRecommendationByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                //List<RecomendationList> query = (from ddd in dbContext.recommendation
                //                                 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                //                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                //                                 from fff in J7_join.DefaultIfEmpty()

                //                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                //                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                //                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                //                                 from J1 in J1_join.DefaultIfEmpty()

                //                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                //                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                //                                 from J2 in J2_join.DefaultIfEmpty()
                //                                 where (ddd.v_ServiceId == pstrServiceId) &&
                //                                       (ddd.i_IsDeleted == 0) &&
                //                                       (fff.i_IsDeleted == 0) &&
                //                                       (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                //                                        fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                //                                 select new RecomendationList
                //                                 {
                //                                     v_RecommendationId = ddd.v_RecommendationId,
                //                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                //                                     v_ServiceId = ddd.v_ServiceId,
                //                                     v_ComponentId = ddd.v_ComponentId,
                //                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                //                                     v_RecommendationName = eee.v_Name,
                //                                     i_RecordStatus = (int)RecordStatus.Grabado,
                //                                     i_RecordType = (int)RecordType.NoTemporal
                //                                     //v_CreationUser = J1.v_UserName,
                //                                     //v_UpdateUser = J2.v_UserName,
                //                                     //d_CreationDate = J1.d_InsertDate,
                //                                     //d_UpdateDate = J2.d_UpdateDate,
                //                                     //i_IsDeleted = ddd.i_IsDeleted.Value
                //                                 }).Concat(from r in dbContext.recommendation
                //                                           join eee in dbContext.masterrecommendationrestricction on r.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         
                //                                           where (r.v_ServiceId == pstrServiceId) &&
                //                                           (r.i_IsDeleted == 0) &&
                //                                           (r.v_DiagnosticRepositoryId == null)
                //                                           select new RecomendationList
                //                                           {
                //                                               v_RecommendationId = r.v_RecommendationId,
                //                                               v_DiagnosticRepositoryId = r.v_DiagnosticRepositoryId,
                //                                               v_ServiceId = r.v_ServiceId,
                //                                               v_ComponentId = r.v_ComponentId,
                //                                               v_MasterRecommendationId = r.v_MasterRecommendationId,
                //                                               v_RecommendationName = eee.v_Name,
                //                                               i_RecordStatus = (int)RecordStatus.Grabado,
                //                                               i_RecordType = (int)RecordType.NoTemporal
                //                                               //v_CreationUser = J1.v_UserName,
                //                                               //v_UpdateUser = J2.v_UserName,
                //                                               //d_CreationDate = J1.d_InsertDate,
                //                                               //d_UpdateDate = J2.d_UpdateDate,
                //                                               //i_IsDeleted = ddd.i_IsDeleted.Value
                //                                           }).ToList();

                var query = (from ddd in dbContext.recommendation
                             join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                             equals fff.v_DiagnosticRepositoryId into J7_join
                             from fff in J7_join.DefaultIfEmpty()

                             join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where (ddd.v_ServiceId == pstrServiceId) &&
                                   (ddd.i_IsDeleted == 0) &&
                                   (fff.i_IsDeleted == 0) &&
                                   (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                    fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new RecomendationList
                             {
                                 v_RecommendationId = ddd.v_RecommendationId,
                                 v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                 v_ServiceId = ddd.v_ServiceId,
                                 v_ComponentId = ddd.v_ComponentId,
                                 v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                 v_RecommendationName = eee.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal

                             }).ToList();


                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<RecomendationList> GetServiceRecommendationByServiceId(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join fff in dbContext.diagnosticrepository on ddd.v_DiagnosticRepositoryId
                                                                                 equals fff.v_DiagnosticRepositoryId into J7_join
                                                 from fff in J7_join.DefaultIfEmpty()

                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId  // RECOMENDACIONES                                                                                                                                                                                                                                                         

                                                 join J1 in dbContext.systemuser on new { i_InsertUserId = ddd.i_InsertUserId.Value }
                                                                 equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                 from J1 in J1_join.DefaultIfEmpty()

                                                 join J2 in dbContext.systemuser on new { i_UpdateUserId = ddd.i_UpdateUserId.Value }
                                                                                 equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                 from J2 in J2_join.DefaultIfEmpty()
                                                 where (ddd.v_ServiceId == pstrServiceId) &&
                                                 (ddd.i_IsDeleted == 0) &&
                                                 (fff.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                                 fff.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,
                                                     i_RecordStatus = (int)RecordStatus.Grabado,
                                                     i_RecordType = (int)RecordType.NoTemporal
                                                 }).ToList();

                var query1 = new List<RecomendationList>();

                query1 = query.Select((x, index) => new RecomendationList
                {
                    i_Item = index + 1,
                    v_RecommendationId = x.v_RecommendationId,
                    v_DiagnosticRepositoryId = x.v_DiagnosticRepositoryId,
                    v_ServiceId = x.v_ServiceId,
                    v_ComponentId = x.v_ComponentId,
                    v_MasterRecommendationId = x.v_MasterRecommendationId,
                    v_RecommendationName = x.v_RecommendationName,
                    i_RecordStatus = x.i_RecordStatus,
                    i_RecordType = x.i_RecordType
                }).ToList();

                return query1;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        #endregion

        #region Examenes Auxiliares

        public List<AuxiliaryExamList> GetAuxiliaryExams(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ddd in dbContext.auxiliaryexam
                             join fff in dbContext.component on ddd.v_ComponentId equals fff.v_ComponentId
                             join eee in dbContext.systemparameter on new { a = fff.i_CategoryId.Value, b = 116 } // caetgoria Exam
                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             where (ddd.v_ServiceId == pstrServiceId) &&
                                   (ddd.i_IsDeleted == 0)
                             select new AuxiliaryExamList
                             {
                                 v_AuxiliaryExamId = ddd.v_AuxiliaryExamId,
                                 v_ComponentName = fff.v_Name,
                                 v_CategoryName = J1.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                                 i_IsDeleted = ddd.i_IsDeleted.Value,
                                 v_ComponentId = fff.v_ComponentId
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Interconsulta

        public List<DiagnosticRepositoryList> GetInterconsultations(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                                  
                             join fff in dbContext.component on ccc.v_InterconsultationDestinationId equals fff.v_ComponentId
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                     (ccc.i_IsDeleted == 0) &&
                                     (ccc.i_SendToInterconsultationId == (int)SiNo.SI)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_OfficeName = fff.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                             }).ToList();


                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #region Descanso Medico

        public List<DiagnosticRepositoryList> GetMedicalBreaks(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                                 
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == 0) &&
                                   (ccc.i_GenerateMedicalBreak == (int)SiNo.SI)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,
                             }).ToList();

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        #endregion

        #endregion

        #region Analisis de diagnostico -> Total de diagnosticos

        public List<DiagnosticRepositoryList> GetServiceComponentDisgnosticsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
         
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository

                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                             from bbb in J7_join.DefaultIfEmpty()

                             join sc in dbContext.servicecomponent on new { a = ccc.v_ComponentId, b = pstrServiceId } 
                                                                    equals new { a = sc.v_ComponentId, b = sc.v_ServiceId } into sc_join
                             from sc in sc_join.DefaultIfEmpty()

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                             join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                     equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                             from eee in J8_join.DefaultIfEmpty()

                             join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                 equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
                             from zzz in J9_join.DefaultIfEmpty()

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                 equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                             from iii in J6_join.DefaultIfEmpty()

                             //join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                             //                equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             //from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = sc.i_ApprovedUpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             where ccc.v_ServiceId == pstrServiceId &&
                                     ccc.i_IsDeleted == 0
                             orderby bbb.v_Name

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                 v_DiseasesName = ddd.v_Name,
                                 v_AutoManualName = eee.v_Value1,

                                 //v_ComponentName = bbb.v_Name,
                                 //v_ComponentName = (ccc.i_AutoManualId == (int)AutoManual.Manual && bbb.i_CategoryId != -1) ? zzz.v_Value1 : bbb.v_Name,
                                 v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_IsSentToAntecedentName = iii.v_Value1,
                                 i_RecordStatus = (int)RecordStatus.Grabado,
                                 i_RecordType = (int)RecordType.NoTemporal,

                                 v_UpdateUser = J2.v_UserName,

                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value

                             }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,
                             v_ComponentName = a.v_ComponentName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,
                      
                             v_UpdateUser = a.v_UpdateUser,
                           
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public DiagnosticRepositoryList GetServiceComponentTotalDiagnostics(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                DiagnosticRepositoryList query = (from ccc in dbContext.diagnosticrepository
                                                  join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                                  from bbb in J7_join.DefaultIfEmpty()

                                                  join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                  join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                          equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                                                  from eee in J8_join.DefaultIfEmpty()

                                                  join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                      equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                  from fff in J5_join.DefaultIfEmpty()

                                                  join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                      equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                  from ggg in J4_join.DefaultIfEmpty()

                                                  join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                          equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                  from hhh in J3_join.DefaultIfEmpty()

                                                  join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                       equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                  from iii in J6_join.DefaultIfEmpty()

                                                  join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                  from J1 in J1_join.DefaultIfEmpty()

                                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                  from J2 in J2_join.DefaultIfEmpty()

                                                  where ccc.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId &&
                                                        ccc.i_IsDeleted == 0
                                                  select new DiagnosticRepositoryList
                                                  {
                                                      v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                      v_ServiceId = ccc.v_ServiceId,
                                                      v_ComponentId = ccc.v_ComponentId,
                                                      v_DiseasesId = ccc.v_DiseasesId,
                                                      i_AutoManualId = ccc.i_AutoManualId,
                                                      i_PreQualificationId = ccc.i_PreQualificationId,
                                                      i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                      i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                      i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                      d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                      i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                      v_DiseasesName = ddd.v_Name,
                                                      v_AutoManualName = eee.v_Value1,

                                                      v_PreQualificationName = fff.v_Value1,
                                                      v_FinalQualificationName = ggg.v_Value1,
                                                      v_DiagnosticTypeName = hhh.v_Value1,
                                                      v_IsSentToAntecedentName = iii.v_Value1,
                                                      i_RecordStatus = (int)RecordStatus.Grabado,
                                                      i_RecordType = (int)RecordType.NoTemporal,

                                                      v_CreationUser = J1.v_UserName,
                                                      v_UpdateUser = J2.v_UserName,
                                                      d_CreationDate = J1.d_InsertDate,
                                                      d_UpdateDate = J2.d_UpdateDate,
                                                      i_IsDeleted = ccc.i_IsDeleted.Value
                                                  }).FirstOrDefault();



                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                query.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);
                query.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, query.v_DiagnosticRepositoryId);

                pobjOperationResult.Success = 1;
                return query;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void UpdateTotalDiagnostic(ref OperationResult pobjOperationResult, DiagnosticRepositoryList pobjDiagnosticRepository, string serviceId, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region DiagnosticRepository -> UPDATE

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.diagnosticrepository
                                       where a.v_DiagnosticRepositoryId == pobjDiagnosticRepository.v_DiagnosticRepositoryId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                // Total Diagnósticos
                objEntitySource.i_FinalQualificationId = pobjDiagnosticRepository.i_FinalQualificationId;
                objEntitySource.i_DiagnosticTypeId = pobjDiagnosticRepository.i_DiagnosticTypeId;
                objEntitySource.i_IsSentToAntecedent = pobjDiagnosticRepository.i_IsSentToAntecedent;
                objEntitySource.d_ExpirationDateDiagnostic = pobjDiagnosticRepository.d_ExpirationDateDiagnostic;

                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                #region Setear Fec Vcto Obs con la menor de las fechas solo (DX definitivos o Presuntivos)

                // Buscar la fecha de expiracion Dx minima 
                DateTime? fechaObsMin = (from a in dbContext.diagnosticrepository
                                         where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId &&
                                         a.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                         a.i_FinalQualificationId == (int)FinalQualification.Presuntivo
                                         select a.d_ExpirationDateDiagnostic).Min();

                // Obtener la entidad fuente
                var objService = (from a in dbContext.service
                                  where a.v_ServiceId == pobjDiagnosticRepository.v_ServiceId
                                  select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                objService.d_ObsExpirationDate = fechaObsMin;
                objService.d_UpdateDate = DateTime.Now;
                objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios

                dbContext.SaveChanges();

                #endregion

                #endregion

                #region Restricciones -> ADD / DELETE

                if (pobjDiagnosticRepository.Restrictions != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var r in pobjDiagnosticRepository.Restrictions)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            objRestriction.v_ServiceId = r.v_ServiceId;
                            objRestriction.v_ComponentId = r.v_ComponentId;
                            //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                            objRestriction.v_RestrictionId = NewId1;
                            objRestriction.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

                            objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;
                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                            dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objRestriction = (from a in dbContext.restriction
                                                  where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                  select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objRestriction.d_UpdateDate = DateTime.Now;
                            objRestriction.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Recomendaciones -> ADD / DELETE

                if (pobjDiagnosticRepository.Recomendations != null)
                {
                    // Grabar recomendaciones 
                    foreach (var r in pobjDiagnosticRepository.Recomendations)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            recommendation objRecommendation = new recommendation();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                            objRecommendation.v_ServiceId = r.v_ServiceId;
                            objRecommendation.v_ComponentId = r.v_ComponentId;
                            objRecommendation.v_RecommendationId = NewId1;
                            objRecommendation.v_DiagnosticRepositoryId = NewId0 == "(No generado)" ? pobjDiagnosticRepository.v_DiagnosticRepositoryId : NewId0;

                            objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;
                            objRecommendation.d_InsertDate = DateTime.Now;
                            objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 0;

                            dbContext.AddTorecommendation(objRecommendation);
                            dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objRecommendation = (from a in dbContext.recommendation
                                                     where a.v_RecommendationId == r.v_RecommendationId
                                                     select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objRecommendation.d_UpdateDate = DateTime.Now;
                            objRecommendation.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion


                #region Grabar usuario auditor

                // Grabar ID usuario auditor o cualquiera que grabe en esta zona [Control de calidad]
                // Obtener la entidad service               

                var service = (from a in dbContext.service
                               where a.v_ServiceId == serviceId
                               select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados
                service.d_UpdateDateMedicalAnalyst = DateTime.Now;
                service.i_UpdateUserMedicalAnalystId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void DeleteTotalDiagnostic(ref OperationResult pobjOperationResult, string pstrDiagnosticRepositoryId, List<string> ClientSession)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region DiagnosticRepository -> DELETE

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.diagnosticrepository
                                       where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados               
                objEntitySource.d_UpdateDate = DateTime.Now;
                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                objEntitySource.i_IsDeleted = 1;

                var recomendation = (from a in dbContext.recommendation
                                     where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                     select a).ToList();

                foreach (var rec in recomendation)
                {
                    // Crear la entidad con los datos actualizados               
                    rec.d_UpdateDate = DateTime.Now;
                    rec.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    rec.i_IsDeleted = 1;
                }

                var restriction = (from a in dbContext.restriction
                                   where a.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId
                                   select a).ToList();

                foreach (var res in restriction)
                {
                    // Crear la entidad con los datos actualizados               
                    res.d_UpdateDate = DateTime.Now;
                    res.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                    res.i_IsDeleted = 1;
                }

                // Guardar los cambios
                dbContext.SaveChanges();

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.ELIMINACION, "DIAGNOSTICOS", "v_DiagnosticRepositoryId=" + pstrDiagnosticRepositoryId, Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Conclusiones y Tratamiento

        public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
                                                        join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                                        from bbb in J7_join.DefaultIfEmpty()

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                        join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId } into J8_join
                                                        from eee in J8_join.DefaultIfEmpty()

                                                        join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                            equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        join zzz in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                               equals new { a = zzz.i_ParameterId, b = zzz.i_GroupId } into J9_join
                                                        from zzz in J9_join.DefaultIfEmpty()

                                                        where ccc.v_ServiceId == pstrServiceId &&
                                                        ccc.i_IsDeleted == 0 &&
                                                        (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                                        ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                                                        orderby bbb.v_Name
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId,
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,

                                                            v_DiseasesName = ddd.v_Name,
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_ComponentName = bbb.i_CategoryId == -1 ? bbb.v_Name : zzz.v_Value1,
                                                            v_PreQualificationName = fff.v_Value1,
                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();


                var q = (from a in query
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_AutoManualName = a.v_AutoManualName,
                             v_ComponentName = a.v_ComponentName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                //List<DiagnosticRepositoryList> objData = query.ToList();
                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public void AddConclusiones(ref OperationResult pobjOperationResult, List<RestrictionList> pobjRestriction, List<RecomendationList> pobjRecomendation, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region Restricciones -> ADD / DELETE

                if (pobjRestriction != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var r in pobjRestriction)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            //objRestriction.v_RestrictionByDiagnosticId = NewId1;
                            objRestriction.v_RestrictionId = NewId1;
                            objRestriction.v_ServiceId = r.v_ServiceId;
                            objRestriction.v_MasterRestrictionId = r.v_MasterRestrictionId;

                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                            //dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.restriction
                                                   where a.v_RestrictionId == r.v_RestrictionByDiagnosticId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Recomendaciones -> ADD / DELETE

                if (pobjRecomendation != null)
                {
                    // Grabar recomendaciones 
                    foreach (var r in pobjRecomendation)
                    {
                        if (r.i_RecordType == (int)RecordType.Temporal && r.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            recommendation objRecommendation = new recommendation();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 32), "RR");
                            objRecommendation.v_RecommendationId = NewId1;
                            objRecommendation.v_ServiceId = r.v_ServiceId;
                            objRecommendation.v_MasterRecommendationId = r.v_MasterRecommendationId;

                            objRecommendation.d_InsertDate = DateTime.Now;
                            objRecommendation.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRecommendation.i_IsDeleted = 0;

                            dbContext.AddTorecommendation(objRecommendation);
                            //dbContext.SaveChanges();
                        }
                        else if (r.i_RecordType == (int)RecordType.NoTemporal && r.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.recommendation
                                                   where a.v_RecommendationId == r.v_RecommendationId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Service

                if (pobjService != null)
                {
                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
                    objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
                    objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

                    // datos de cabecera del Servicio
                    objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
                    objService.v_ObsStatusService = pobjService.v_ObsStatusService;
                    objService.i_IsNewControl = pobjService.i_IsNewControl;

                    if (objService.i_AptitudeStatusId != (int)AptitudeStatus.SinAptitud)
                    {
                        // Cambiar el estado de la atención en función al estado de Aptitud
                        objService.i_ServiceStatusId = (int)ServiceStatus.Culminado;
                        objService.v_Motive = "Culminación Amutomática de la Atención por Aptitud definida.";
                    }
                    else
                    {
                        objService.i_ServiceStatusId = (int)ServiceStatus.EsperandoAptitud;
                    }

                    // ID usuario Médico ocupacional
                    objService.d_UpdateDateOccupationalMedical = DateTime.Now;
                    objService.i_UpdateUserOccupationalMedicaltId = Int32.Parse(ClientSession[2]);

                    // Guardar los cambios
                    //dbContext.SaveChanges();
                }

                #endregion

                #region ServiceComponent -> UPDATE

                if (pobjServiceComponent != null)
                {
                    // Actualizar algunos valores de ServiceComponent
                    OperationResult objOperationResult = new OperationResult();
                    UpdateServiceComponentFromEso(ref objOperationResult, pobjServiceComponent, ClientSession, null);
                }

                #endregion

                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Tratamiento

        public void AddTratamiento(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<DiagnosticRepositoryList> pobjDiagnosticRepository, serviceDto pobjService, servicecomponentDto pobjServiceComponent, List<string> ClientSession, bool? enabledchkApproved)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                OperationResult objOperationResult = new OperationResult();

                nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
                var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
                var _movementdetailListDto = new List<movementdetailDto>();

                #region Medication -> ADD / UPDATE / DELETE

                foreach (var m in pobjMedication)
                {
                    // ADD
                    if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
                    {
                        medication objEntity = new medication();

                        objEntity.v_ProductId = m.v_ProductId;
                        objEntity.v_ServiceId = m.v_ServiceId;
                        objEntity.r_Quantity = m.r_Quantity;
                        objEntity.v_Doses = m.v_Doses;
                        objEntity.i_ViaId = m.i_ViaId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
                        objEntity.v_MedicationId = NewId0;

                        dbContext.AddTomedication(objEntity);
                        dbContext.SaveChanges();

                        if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                        {
                            #region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

                            movementdetailDto mdDto = new movementdetailDto();
                            mdDto.v_ProductId = m.v_ProductId;
                            mdDto.r_Quantity = m.r_Quantity;
                            mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
                            _movementdetailListDto.Add(mdDto);

                            #endregion
                        }

                    }                                     // DELETE
                    else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.medication
                                               where a.v_MedicationId == m.v_MedicationId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                        // Guardar los cambios
                        dbContext.SaveChanges();
                    }
                }

                #region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

                if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                {
                    movementDto objmovementDto = new movementDto();

                    objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
                    objmovementDto.d_Date = DateTime.Now;
                    objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
                    objmovementDto.v_ReferenceDocument = string.Empty;
                    objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
                    objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
                    objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
                    objmovementDto.r_TotalQuantity = 0;

                    // Grabar movimiento
                    var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
                                                                    objmovementDto,
                                                                    _movementdetailListDto,
                                                                    ClientSession);
                }

                #endregion

                #endregion

                #region Procedimientos -> ADD / DELETE

                if (pobjProcedure != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var p in pobjProcedure)
                    {
                        if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            procedurebyservice objProcedure = new procedurebyservice();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
                            objProcedure.v_ProcedureByServiceId = NewId1;
                            objProcedure.v_ServiceId = p.v_ServiceId;
                            objProcedure.i_ProcedureId = p.i_ProcedureId;
                            //objProcedure.i_ProcedureTypeId = null;

                            objProcedure.d_InsertDate = DateTime.Now;
                            objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objProcedure.i_IsDeleted = 0;

                            dbContext.AddToprocedurebyservice(objProcedure);
                            dbContext.SaveChanges();
                        }
                        else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.procedurebyservice
                                                   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            dbContext.SaveChanges();
                        }
                    }
                }

                #endregion

                #region Diagnósticos seleccionados -> UPDATE

                foreach (var dr in pobjDiagnosticRepository)
                {
                    // Obtener la entidad fuente
                    var objEntitySource = (from a in dbContext.diagnosticrepository
                                           where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                           select a).FirstOrDefault();

                    if (objEntitySource != null)
                    {
                        objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                        // Guardar los cambios
                        dbContext.SaveChanges();
                    }

                }

                #endregion

                #region Service

                if (pobjService != null)
                {
                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;
                    // Falta el campo Tiene Restricciones -> Si / No
                    objService.d_StartDateRestriction = pobjService.d_StartDateRestriction;
                    objService.d_EndDateRestriction = pobjService.d_EndDateRestriction;
                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

                    // datos de cabecera del Servicio
                    objService.i_AptitudeStatusId = pobjService.i_AptitudeStatusId;
                    objService.i_IsNewControl = pobjService.i_IsNewControl;

                    objService.d_UpdateDate = DateTime.Now;
                    objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    // Guardar los cambios
                    dbContext.SaveChanges();
                }

                #endregion

                #region ServiceComponent -> UPDATE

                if (pobjServiceComponent != null)
                {
                    // Actualizar algunos valores de ServiceComponent
                    OperationResult objOperationResult1 = new OperationResult();
                    UpdateServiceComponentFromEso(ref objOperationResult1, pobjServiceComponent, ClientSession, enabledchkApproved);
                }

                #endregion

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        public void AddWorkPlan(ref OperationResult pobjOperationResult, List<MedicationList> pobjMedication, List<ProcedureByServiceList> pobjProcedure, List<AuxiliaryExamList> auxiliaryExams, List<DiagnosticRepositoryList> interconsultations, List<RestrictionList> restrictions, List<DiagnosticRepositoryList> medicalBreaks, serviceDto pobjService, List<string> ClientSession)
        {
            //mon.IsActive = true;
            string NewId0 = "(No generado)";
            int intNodeId = int.Parse(ClientSession[0]);

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                OperationResult objOperationResult = new OperationResult();

                nodeDto node = new NodeBL().GetNodeByNodeId(ref objOperationResult, int.Parse(ClientSession[0]));
                var _pharmacyWarehouseId = node.v_PharmacyWarehouseId;
                var _movementdetailListDto = new List<movementdetailDto>();

                foreach (var m in pobjMedication)
                {
                    #region Medication -> ADD / UPDATE / DELETE

                    // ADD
                    if (m.i_RecordType == (int)RecordType.Temporal && m.i_RecordStatus == (int)RecordStatus.Agregado)
                    {
                        medication objEntity = new medication();

                        objEntity.v_ProductId = m.v_ProductId;
                        objEntity.v_ServiceId = m.v_ServiceId;
                        //objEntity.v_ProductName = m.v_ProductName;
                        //objEntity.v_PresentationName = m.v_PresentationName;
                        objEntity.r_Quantity = m.r_Quantity;
                        objEntity.v_Doses = m.v_Doses;
                        objEntity.i_ViaId = m.i_ViaId;
                        objEntity.d_InsertDate = DateTime.Now;
                        objEntity.i_InsertUserId = Int32.Parse(ClientSession[2]);
                        objEntity.i_IsDeleted = 0;

                        // Autogeneramos el Pk de la tabla                      
                        NewId0 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 33), "MC");
                        objEntity.v_MedicationId = NewId0;

                        dbContext.AddTomedication(objEntity);
                        //dbContext.SaveChanges();

                        if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                        {
                            #region CARGAR PRODUCTOS A DESCONTAR DEL ALMACÉN

                            movementdetailDto mdDto = new movementdetailDto();
                            mdDto.v_ProductId = m.v_ProductId;
                            mdDto.r_Quantity = m.r_Quantity;
                            mdDto.i_MovementTypeId = (int?)Common.MotiveType.EgresoAtencion;
                            _movementdetailListDto.Add(mdDto);

                            #endregion
                        }

                    }                                     // DELETE
                    else if (m.i_RecordType == (int)RecordType.NoTemporal && m.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                    {
                        // Obtener la entidad fuente
                        var objEntitySource = (from a in dbContext.medication
                                               where a.v_MedicationId == m.v_MedicationId
                                               select a).FirstOrDefault();

                        // Crear la entidad con los datos actualizados                                                           
                        objEntitySource.d_UpdateDate = DateTime.Now;
                        objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                        objEntitySource.i_IsDeleted = 1;

                        // Guardar los cambios
                        //dbContext.SaveChanges();
                    }

                    #endregion
                }

                #region GRABAR MOVIMIENTOS [CABECERA Y DETALLE]

                if (pobjService.i_MasterServiceId != (int)MasterService.Eso)
                {
                    movementDto objmovementDto = new movementDto();

                    objmovementDto.i_MotiveTypeId = (int?)Common.MotiveType.EgresoAtencion;
                    objmovementDto.d_Date = DateTime.Now;
                    objmovementDto.v_WarehouseId = _pharmacyWarehouseId;
                    objmovementDto.v_ReferenceDocument = string.Empty;
                    objmovementDto.i_IsLocallyProcessed = (int)Common.SiNo.NO; // El movimiento no está procesado aún
                    objmovementDto.i_ProcessTypeId = (int)Common.ProcessType.LOCAL; // Procesado Localmente
                    objmovementDto.i_MovementTypeId = (int)Common.MovementType.EGRESO; // EGRESO DE ALMACÉN
                    objmovementDto.r_TotalQuantity = 0;

                    // Grabar movimiento
                    var _MovementId = new MovementBL().AddMovement(ref objOperationResult,
                                                                    objmovementDto,
                                                                    _movementdetailListDto,
                                                                    ClientSession);
                }

                #endregion

                if (pobjProcedure != null)
                {
                    // Operaciones básicas [Add,Update,Delete] restricciones 
                    foreach (var p in pobjProcedure)
                    {
                        #region Procedimientos -> ADD / DELETE

                        if (p.i_RecordType == (int)RecordType.Temporal && p.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            procedurebyservice objProcedure = new procedurebyservice();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 34), "PS");
                            objProcedure.v_ProcedureByServiceId = NewId1;
                            objProcedure.v_ServiceId = p.v_ServiceId;
                            objProcedure.i_ProcedureId = p.i_ProcedureId;
                            //objProcedure.i_ProcedureTypeId = null;

                            objProcedure.d_InsertDate = DateTime.Now;
                            objProcedure.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objProcedure.i_IsDeleted = 0;

                            dbContext.AddToprocedurebyservice(objProcedure);
                            //dbContext.SaveChanges();
                        }
                        else if (p.i_RecordType == (int)RecordType.NoTemporal && p.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.procedurebyservice
                                                   where a.v_ProcedureByServiceId == p.v_ProcedureByServiceId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;

                            // Guardar los cambios
                            //dbContext.SaveChanges();
                        }

                        #endregion
                    }
                }

                if (auxiliaryExams != null)
                {
                    foreach (var auxiliaryExam in auxiliaryExams)
                    {
                        #region auxiliaryexam -> ADD / DELETE

                        // ADD
                        if (auxiliaryExam.i_RecordType == (int)RecordType.Temporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            auxiliaryexam objAuxiliaryExam = new auxiliaryexam();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 48), "AX");
                            objAuxiliaryExam.v_AuxiliaryExamId = NewId1;
                            objAuxiliaryExam.v_ServiceId = auxiliaryExam.v_ServiceId;
                            objAuxiliaryExam.v_ComponentId = auxiliaryExam.v_ComponentId;

                            objAuxiliaryExam.d_InsertDate = DateTime.Now;
                            objAuxiliaryExam.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objAuxiliaryExam.i_IsDeleted = 0;

                            dbContext.AddToauxiliaryexam(objAuxiliaryExam);

                        }
                        // DELETE
                        else if (auxiliaryExam.i_RecordType == (int)RecordType.NoTemporal && auxiliaryExam.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.auxiliaryexam
                                                   where a.v_AuxiliaryExamId == auxiliaryExam.v_AuxiliaryExamId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;


                        }

                        #endregion
                    }
                }

                if (interconsultations != null)
                {
                    foreach (var intercon in interconsultations)
                    {
                        #region diagnosticrepository -> ADD / DELETE

                        // ADD
                        if (intercon.i_RecordType == (int)RecordType.Temporal && intercon.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            if (objEntitySource != null)
                            {
                                objEntitySource.i_SendToInterconsultationId = intercon.i_SendToInterconsultationId;
                                objEntitySource.v_InterconsultationDestinationId = intercon.v_OfficeId;
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }
                        }
                        // DELETE
                        else if (intercon.i_RecordType == (int)RecordType.NoTemporal && intercon.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == intercon.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_SendToInterconsultationId = (int)SiNo.NO;
                            objEntitySource.v_InterconsultationDestinationId = null;
                        }

                        #endregion
                    }
                }

                if (restrictions != null)
                {
                    foreach (var restriction in restrictions)
                    {
                        #region restriction -> ADD / DELETE

                        // ADD
                        if (restriction.i_RecordType == (int)RecordType.Temporal && restriction.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            restriction objRestriction = new restriction();

                            var NewId1 = Common.Utils.GetNewId(intNodeId, Utils.GetNextSecuentialId(intNodeId, 30), "RD");
                            objRestriction.v_ServiceId = restriction.v_ServiceId;
                            objRestriction.v_RestrictionId = NewId1;

                            objRestriction.v_MasterRestrictionId = restriction.v_MasterRestrictionId;
                            objRestriction.d_StartDateRestriction = restriction.d_StartDateRestriction;
                            objRestriction.d_EndDateRestriction = restriction.d_EndDateRestriction;
                            objRestriction.d_InsertDate = DateTime.Now;
                            objRestriction.i_InsertUserId = Int32.Parse(ClientSession[2]);
                            objRestriction.i_IsDeleted = 0;

                            dbContext.AddTorestriction(objRestriction);
                        }
                        // DELETE
                        else if (restriction.i_RecordType == (int)RecordType.NoTemporal && restriction.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.restriction
                                                   where a.v_RestrictionId == restriction.v_RestrictionByDiagnosticId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_IsDeleted = 1;
                        }

                        #endregion
                    }

                }

                if (medicalBreaks != null)
                {
                    foreach (var dr in medicalBreaks)
                    {
                        #region Descanso Médico -> ADD / DELETE

                        // ADD
                        if (dr.i_RecordType == (int)RecordType.Temporal && dr.i_RecordStatus == (int)RecordStatus.Agregado)
                        {
                            // Obtener la entidad fuente
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            if (objEntitySource != null)
                            {
                                objEntitySource.i_GenerateMedicalBreak = dr.i_GenerateMedicalBreak;
                                objEntitySource.d_UpdateDate = DateTime.Now;
                                objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            }

                        }
                        // DELETE
                        else if (dr.i_RecordType == (int)RecordType.NoTemporal && dr.i_RecordStatus == (int)RecordStatus.EliminadoLogico)
                        {
                            // Obtener la entidad fuente v_RestrictionByDiagnosticId
                            var objEntitySource = (from a in dbContext.diagnosticrepository
                                                   where a.v_DiagnosticRepositoryId == dr.v_DiagnosticRepositoryId
                                                   select a).FirstOrDefault();

                            // Crear la entidad con los datos actualizados                                                           
                            objEntitySource.d_UpdateDate = DateTime.Now;
                            objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);
                            objEntitySource.i_GenerateMedicalBreak = 0;
                        }


                        #endregion
                    }
                }

                if (pobjService != null)
                {
                    #region Service -> UPDATE

                    // Obtener la entidad fuente
                    var objService = (from a in dbContext.service
                                      where a.v_ServiceId == pobjService.v_ServiceId
                                      select a).FirstOrDefault();

                    // Crear la entidad con los datos actualizados
                    objService.i_DestinationMedicationId = pobjService.i_DestinationMedicationId;
                    objService.i_TransportMedicationId = pobjService.i_TransportMedicationId;
                    objService.i_HasMedicalBreakId = pobjService.i_HasMedicalBreakId;
                    objService.d_MedicalBreakStartDate = pobjService.d_MedicalBreakStartDate;
                    objService.d_MedicalBreakEndDate = pobjService.d_MedicalBreakEndDate;

                    objService.v_GeneralRecomendations = pobjService.v_GeneralRecomendations;

                    objService.d_NextAppointment = pobjService.d_NextAppointment;
                    objService.i_SendToTracking = pobjService.i_SendToTracking;

                    // datos de cabecera del Servicio

                    objService.i_IsNewControl = pobjService.i_IsNewControl;
                    objService.i_HasRestrictionId = pobjService.i_HasRestrictionId;
                    objService.i_HazInterconsultationId = pobjService.i_HazInterconsultationId;
                    objService.v_ExaAuxResult = pobjService.v_ExaAuxResult;

                    objService.d_UpdateDate = DateTime.Now;
                    objService.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                    #endregion

                }

                // Guardar los cambios
                dbContext.SaveChanges();

                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "DIAGNOSTICOS / RESTRICCIONES / RECOMENDACIONES POR SERVICIO", "v_DiagnosticRepositoryId=" + NewId0.ToString(), Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }


        #endregion

        #region Antecedentes

        public List<PersonMedicalHistoryList> GetAntecedentConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<PersonMedicalHistoryList> lis = new List<PersonMedicalHistoryList>();

                int isDeleted = (int)SiNo.NO;

                #region querys individuales

                // Obtener todos loa antecedentes de una persona (una o varias empresas)
                var historyId = (from a in dbContext.history
                                 where a.v_PersonId == pstrPersonId && a.i_IsDeleted == isDeleted
                                 select new PersonMedicalHistoryList
                                 {
                                     v_AntecedentTypeName = "Ocupacionales",
                                     v_DiseasesName = null,
                                     v_HistoryId = a.v_HistoryId,
                                     d_StartDate = a.d_StartDate,
                                     d_EndDate = a.d_EndDate,
                                     v_Occupation = a.v_workstation,
                                     v_GroupName = null
                                 }).ToList();

                // personmedicalhistory
                var q1tmp = (from A in dbContext.personmedicalhistory
                             ////join F in dbContext.history on A.v_PersonId equals F.v_PersonId
                             //join B in dbContext.systemparameter on new { a = A.v_DiseasesId, b = 147 }      // MINI CIE10
                             //                                  equals new { a = B.v_Value1, b = B.i_GroupId } into B_join
                             //from B in B_join.DefaultIfEmpty()
                             //join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 147 }
                             //                                  equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             //from C in C_join.DefaultIfEmpty()
                             join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                             //join E in dbContext.systemparameter on new { a = A.i_TypeDiagnosticId.Value, b = 139 }
                             //                                   equals new { a = E.i_ParameterId, b = E.i_GroupId }

                             where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPersonId

                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Medicos-Personales",
                                 //v_PersonMedicalHistoryId = A.v_PersonMedicalHistoryId,
                                 //v_PersonId = A.v_PersonId,
                                 //v_DiseasesId = A.v_DiseasesId,
                                 v_DiseasesName = D.v_Name,
                                 //i_TypeDiagnosticId = A.i_TypeDiagnosticId,
                                 d_StartDate = A.d_StartDate,
                                 v_GroupName = null

                             }).ToList();

                var q1 = (from A in q1tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Medicos-Personales",
                              v_DiseasesName = A.v_DiseasesName,
                              v_DateOrGroup = A.d_StartDate.Value.ToShortDateString(),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // typeofeep
                var q2 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateTypeOfeep(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // workstationdangers
                var q3 = (from A in historyId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Ocupacionales, " + A.v_Occupation,
                              v_DiseasesName = ConcatenateWorkStationDangers(A.v_HistoryId),
                              v_DateOrGroup = A.d_StartDate.Value.ToString("MM/yyyy") + " - " + A.d_EndDate.Value.ToString("MM/yyyy"),
                              d_StartDate = A.d_StartDate,
                          }).ToList();

                // noxioushabits
                var q4 = (from A in dbContext.noxioushabits
                          join B in dbContext.systemparameter on new { a = A.i_TypeHabitsId.Value, b = 148 }  // HÁBITOS NOCIVOS
                                                         equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                          from B in B_join.DefaultIfEmpty()
                          where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = "Hábitos Nocivos",
                              v_DiseasesName = B.v_Value1 + ", " + A.v_Frequency,
                          }).ToList();

                // familymedicalantecedents

                var q5tmp = (from A in dbContext.familymedicalantecedents
                             join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
                                                            equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                             from B in B_join.DefaultIfEmpty()
                             join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }
                                                          equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                             from C in C_join.DefaultIfEmpty()
                             where A.i_IsDeleted == 0 && A.v_PersonId == pstrPersonId
                             group C by new { C.i_ParameterId, C.v_Value1 } into g
                             select new PersonMedicalHistoryList
                             {
                                 v_AntecedentTypeName = "Familiares",
                                 i_TypeFamilyId = g.Key.i_ParameterId,
                                 v_TypeFamilyName = g.Key.v_Value1
                             }).ToList();

                var q5 = (from A in q5tmp
                          select new PersonMedicalHistoryList
                          {
                              v_AntecedentTypeName = A.v_AntecedentTypeName,
                              v_DiseasesName = ConcatenateFamilyMedicalAntecedents(pstrPersonId, A.i_TypeFamilyId),
                              v_DateOrGroup = A.v_TypeFamilyName
                          }).ToList();

                #endregion

                #region Fusion

                if (q1.Count > 0)
                    lis.AddRange(q1);
                if (q2.Count > 0)
                    lis.AddRange(q2);
                if (q3.Count > 0)
                    lis.AddRange(q3);
                if (q4.Count > 0)
                    lis.AddRange(q4);
                if (q5.Count > 0)
                    lis.AddRange(q5);

                #endregion

                //var ss = lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();

                pobjOperationResult.Success = 1;
                //return lis.OrderByDescending(x => x.v_AntecedentTypeName).ThenByDescending(x => x.d_StartDate).ToList();
                return lis.OrderBy(x => x.v_AntecedentTypeName).ToList();


            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceList> GetServicesConsolidateForService(ref OperationResult pobjOperationResult, string pstrPersonId, string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var service = (from A in dbContext.service
                               join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 }  // TIPO SERVICIO
                                                          equals new { a = C.i_ParameterId, b = C.i_GroupId }
                               where A.v_PersonId == pstrPersonId &&
                               A.v_ServiceId != pstrServiceId &&
                               A.i_ServiceStatusId != (int)ServiceStatus.PorIniciar &&
                               A.i_IsDeleted == 0
                               select new ServiceList
                               {
                                   v_ServiceId = A.v_ServiceId,
                                   v_MasterServiceName = C.v_Value1,
                                   d_ServiceDate = A.d_ServiceDate
                               });

                var q = (from A in service.ToList()
                         select new ServiceList
                         {
                             v_ServiceId = A.v_ServiceId,
                             v_MasterServiceName = A.v_MasterServiceName,
                             d_ServiceDate = A.d_ServiceDate,
                             v_DiseaseName = ConcatenateDxForServiceAntecedent(A.v_ServiceId),
                         }).OrderByDescending(p => p.d_ServiceDate).ToList();


                pobjOperationResult.Success = 1;
                return q;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        private string ConcatenateDxForServiceAntecedent(string pstrserviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.diagnosticrepository
                       join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
                       where A.v_ServiceId == pstrserviceId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateTypeOfeep(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.typeofeep
                       join B in dbContext.systemparameter on new { a = A.i_TypeofEEPId.Value, b = 146 }  // TIPO DE EPP USADO
                                                            equals new { a = B.i_ParameterId, b = B.i_GroupId }
                       where A.v_HistoryId == pstrHistoryId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Value1
                       }).ToList();

            return qry.Count == 0 ? "No usa EPP" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateWorkStationDangers(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.workstationdangers
                       join B in dbContext.systemparameter on new { a = A.i_DangerId.Value, b = 145 } // PELIGROS EN EL PUESTO
                                                              equals new { a = B.i_ParameterId, b = B.i_GroupId }
                       where A.v_HistoryId == pstrHistoryId &&
                       A.i_IsDeleted == 0
                       select new
                       {
                           v_DiseasesName = B.v_Value1
                       }).ToList();

            return qry.Count == 0 ? "No refiere peligros en el puesto" : string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        private string ConcatenateFamilyMedicalAntecedents(string pstrPersonId, int pintTypeFamilyId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from A in dbContext.familymedicalantecedents
                       join B in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }  // ANTECEDENTES FAMILIARES MÉDICOS
                                                    equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                       from B in B_join.DefaultIfEmpty()
                       join C in dbContext.systemparameter on new { a = B.i_ParentParameterId.Value, b = 149 }  // [PADRE,MADRE,HERMANOS]
                                                      equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                       from C in C_join.DefaultIfEmpty()
                       join D in dbContext.diseases on new { a = A.v_DiseasesId }
                                                               equals new { a = D.v_DiseasesId } into D_join
                       from D in D_join.DefaultIfEmpty()
                       where A.v_PersonId == pstrPersonId &&
                       A.i_IsDeleted == 0 && C.i_ParameterId == pintTypeFamilyId
                       select new
                       {
                           v_DiseasesName = D.v_Name
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_DiseasesName));
        }

        #endregion

        #region Permisos x examenes componentes

        //public List<RoleNodeComponentProfileList> GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
        //{
        //    mon.IsActive = true;

        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //        var query = (from a in dbContext.rolenodecomponentprofile
        //                     join b in dbContext.component on a.v_ComponentId equals b.v_ComponentId
        //                     where a.i_NodeId == pintNodeId &&
        //                     a.i_RoleId == pintRoleId && a.v_ComponentId == pstrComponentId &&
        //                     a.i_IsDeleted == 0
        //                     select new RoleNodeComponentProfileList
        //                     {
        //                         v_RoleNodeComponentId = a.v_RoleNodeComponentId,
        //                         i_NodeId = a.i_NodeId,
        //                         i_RoleId = a.i_RoleId,
        //                         v_ComponentName = b.v_Name,
        //                         v_Read = a.i_Read == 1 ? "Si" : "No",
        //                         v_Write = a.i_Write == 1 ? "Si" : "No",
        //                         v_Dx = a.i_Dx == 1 ? "Si" : "No",
        //                         v_Approved = a.i_Approved == 1 ? "Si" : "No"
        //                     });


        //        List<RoleNodeComponentProfileList> objData = query.ToList();

        //        pobjOperationResult.Success = 1;
        //        return objData;
        //    }
        //    catch (Exception ex)
        //    {
        //        pobjOperationResult.Success = 0;
        //        pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
        //        return null;
        //    }
        //}

        public rolenodecomponentprofileDto GetRoleNodeComponentProfile(ref OperationResult pobjOperationResult, int pintNodeId, int pintRoleId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                rolenodecomponentprofileDto dtoEntity = null;

                string[] componentId = null;

                if (pstrComponentId != null)
                {
                    if (pstrComponentId.Contains('|'))
                    {
                        componentId = pstrComponentId.Split('|');
                    }
                    else
                    {
                        componentId = new string[1];
                        componentId[0] = pstrComponentId;
                    }
                }

                var query = (from a in dbContext.rolenodecomponentprofile
                             where (a.i_NodeId == pintNodeId) &&
                             (a.i_RoleId == pintRoleId) &&
                             (componentId.Contains(a.v_ComponentId)) &&
                             (a.i_IsDeleted == (int)SiNo.NO)
                             select a).FirstOrDefault();

                if (query != null)
                    dtoEntity = rolenodecomponentprofileAssembler.ToDTO(query);

                pobjOperationResult.Success = 1;
                return dtoEntity;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<rolenodecomponentprofileDto> GetRoleNodeComponentProfileByRoleNodeId(int pintNodeId, int pintRoleId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
               
                var query = (from a in dbContext.rolenodecomponentprofile
                             where (a.i_NodeId == pintNodeId) &&
                                   (a.i_RoleId == pintRoleId) &&
                                   (a.i_IsDeleted == (int)SiNo.NO)
                             select new rolenodecomponentprofileDto 
                             { 
                                v_ComponentId = a.v_ComponentId,
                                v_RoleNodeComponentId = a.v_RoleNodeComponentId,
                             }).ToList();

                return query;
            }
            catch (Exception)
            {
                throw;
             
            }

        }


        #endregion

        #endregion

        #region RoleNodeComponentProfile



        #endregion

        #region Reports

        // Alejandro
        private string ConcatenateEppsAndPercentage(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int[] tipoEPPRuido = { (int)TipoEPP.Orejeras, 
                                   (int)TipoEPP.TaponesAuditivosEspuma,
                                   (int)TipoEPP.TaponesAuditivosSilicona 
                                 };
           
            var qry = (from a in dbContext.typeofeep
                       join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 } 
                                                                equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                             a.i_IsDeleted == 0 &&
                             tipoEPPRuido.Contains(a.i_TypeofEEPId.Value)
                       select new
                       {
                           v_Epps = C1.v_Value1,
                           r_Percentage = a.r_Percentage
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Epps + " " + p.r_Percentage + " % "));

            //return string.Join(", ", qry.Select(p => 
            //    new { v_Epps = p.v_Epps, 
            //          r_Percentage = p.r_Percentage 

            //        }));

        }

        // Alejandro
        public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacionalAudiometria(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            
                var isDeleted = 0;

                var ruido = (int)PeligrosEnElPuesto.Ruido;

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join wd in dbContext.workstationdangers on D.v_HistoryId equals wd.v_HistoryId

                                 //*****
                                 join ter in dbContext.systemparameter on new { a = wd.i_NoiseSource.Value, b = (int)SystemParameterGroups.TiempoExpsosicionRuido } // Tiempo exp. al ruido
                                               equals new { a = ter.i_ParameterId, b = ter.i_GroupId } into ter_join
                                 from ter in ter_join.DefaultIfEmpty()

                                 join nr in dbContext.systemparameter on new { a = wd.i_NoiseLevel.Value, b = (int)SystemParameterGroups.NivelRuido } // Nivel de ruido
                                              equals new { a = nr.i_ParameterId, b = nr.i_GroupId } into nr_join
                                 from nr in nr_join.DefaultIfEmpty()
                                 //************

                                 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId

                                 // Empresa / Sede Trabajo  ********************************************************
                                 join ow in dbContext.organization on new { a = pro.v_WorkingOrganizationId }
                                         equals new { a = ow.v_OrganizationId } into ow_join
                                 from ow in ow_join.DefaultIfEmpty()

                                 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
                                      equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                                 from lw in lw_join.DefaultIfEmpty()

                                 //************************************************************************************

                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (D.i_IsDeleted == isDeleted) &&
                                       (wd.i_DangerId == ruido)

                                 select new ReportHistoriaOcupacionalList
                                 {
                                     IdHistory = D.v_HistoryId,
                                     //Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     IdServicio = A.v_ServiceId,
                                     FNacimiento = B.d_Birthdate,
                                     Genero = B.i_SexTypeId.Value,
                                     LugarNacimiento = B.v_BirthPlace,

                                     Puesto = B.v_CurrentOccupation,
                                     FechaInicio = D.d_StartDate,
                                     FechaFin = D.d_EndDate,
                                     Empresa = D.v_Organization,
                                     Altitud = D.i_GeografixcaHeight.Value,
                                     AreaTrabajo = D.v_TypeActivity,
                                     PuestoTrabajo = D.v_workstation,

                                     FuenteRuidoName = wd.v_TimeOfExposureToNoise,
                                     NivelRuidoName = nr.v_Value1,
                                     TiempoExpoRuidoName = ter.v_Value1,
                                     v_PersonId = B.v_PersonId,
                                     //
                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     v_WorkingOrganizationName = ow.v_Name,
                                     v_FullWorkingOrganizationName = ow.v_Name + " / " + lw.v_Name,
                                     NroDocumento = B.v_DocNumber,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
                           let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")

                           select new ReportHistoriaOcupacionalList
                           {
                               IdHistory = a.IdHistory,
                               //Trabajador = a.Trabajador,
                               IdServicio = a.IdServicio,
                               FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
                               Genero = a.Genero,
                               LugarNacimiento = a.LugarNacimiento,

                               Puesto = a.Puesto,
                               FechaInicio = a.FechaInicio,
                               FechaFin = a.FechaFin,
                               Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
                               Empresa = a.Empresa,

                               AreaTrabajo = a.AreaTrabajo,
                               PuestoTrabajo = a.PuestoTrabajo,

                               //Peligros = ConcatenateExposiciones(a.IdHistory),
                               Epp = ConcatenateEppsAndPercentage(a.IdHistory),

                               FuenteRuidoName = a.FuenteRuidoName,
                               NivelRuidoName = a.NivelRuidoName,
                               TiempoExpoRuidoName = a.TiempoExpoRuidoName,
                               v_PersonId = a.v_PersonId,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               //
                               v_FullPersonName = a.v_FullPersonName,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_FullWorkingOrganizationName = a.v_FullWorkingOrganizationName,
                               NroDocumento = a.NroDocumento,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alejandro
        public List<DiagnosticRepositoryList> GetDiagnosticRepositoryByComponent(string pstrServiceId, string componentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var isDeleted = 0;
                var recomId = (int)Typifying.Recomendaciones;

                var qryRecom = (from dr in dbContext.diagnosticrepository
                                join a in dbContext.recommendation on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
                                join eee in dbContext.masterrecommendationrestricction on a.v_MasterRecommendationId equals eee.v_MasterRecommendationRestricctionId

                                where dr.v_ServiceId == pstrServiceId &&
                                      dr.v_ComponentId == componentId &&
                                      a.i_IsDeleted == isDeleted &&
                                      eee.i_TypifyingId == recomId
                                select new RecomendationList
                                {
                                    v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
                                    v_RecommendationName = eee.v_Name,
                                    v_ServiceId = dr.v_ServiceId
                                }).ToList();

                var restricId = (int)Typifying.Restricciones;

                var qryRestric = (from dr in dbContext.diagnosticrepository
                                  join a in dbContext.restriction on dr.v_DiagnosticRepositoryId equals a.v_DiagnosticRepositoryId  // RECOMENDACIONES
                                  join eee in dbContext.masterrecommendationrestricction on a.v_MasterRestrictionId equals eee.v_MasterRecommendationRestricctionId

                                  where dr.v_ServiceId == pstrServiceId &&
                                        dr.v_ComponentId == componentId &&
                                        a.i_IsDeleted == isDeleted &&
                                        eee.i_TypifyingId == restricId
                                  select new RestrictionList
                                  {
                                      v_DiagnosticRepositoryId = dr.v_DiagnosticRepositoryId,
                                      v_RestrictionName = eee.v_Name,
                                      v_ServiceId = dr.v_ServiceId
                                  }).ToList();


                var query = (from ccc in dbContext.diagnosticrepository

                             //join sss in dbContext.service on ccc.v_ServiceId equals sss.v_ServiceId  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()
                             // Diagnosticos

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.v_ComponentId == componentId) &&
                                   (ccc.i_IsDeleted == 0) 
                                   //&&(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,

                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,

                                 v_DiseasesName = ddd.v_Name,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId

                             }).ToList();

                query.ForEach(a =>
                {
                    a.Recomendations = qryRecom.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
                    a.Restrictions = qryRestric.FindAll(p => p.v_DiagnosticRepositoryId == a.v_DiagnosticRepositoryId);
                });


                //var q = (from a in query
                //         select new DiagnosticRepositoryList
                //         {
                //             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                //             v_ServiceId = a.v_ServiceId,
                //             v_DiseasesId = a.v_DiseasesId,
                //             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                //             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,



                //             v_DiseasesName = a.v_DiseasesName,
                //             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                //             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                //             v_AptitudeStatusName = a.v_AptitudeStatusName,
                //             v_OccupationName = a.v_OccupationName  // por ahora se muestra el GESO
                //         }).ToList();


                return query;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Alejandro
        public List<AudiometriaUserControlList> ReportAudiometriaUserControl(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var audiometriaList = new List<AudiometriaUserControlList>();

                var __sql = ValoresComponentesUserControl(pstrserviceId, pstrComponentId);

                if (__sql.Count == 0)
                    return audiometriaList;

                var multimediaFileId_OD = string.Empty;
                var multimediaFileId_OI = string.Empty;

                var xMultimediaFileId_OD = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OD);
                if (xMultimediaFileId_OD != null)
                    multimediaFileId_OD = xMultimediaFileId_OD.v_Value1;

                var xMultimediaFileId_OI = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_MULTIMEDIA_FILE_OI);
                if (xMultimediaFileId_OI != null)
                    multimediaFileId_OI = xMultimediaFileId_OI.v_Value1;

                var img_OD = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OD select mf.b_File).SingleOrDefault();
                var img_OI = (from mf in dbContext.multimediafile where mf.v_MultimediaFileId == multimediaFileId_OI select mf.b_File).SingleOrDefault();

                var ent = new AudiometriaUserControlList();
                // OD
                var xVA_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_125);
                if (xVA_OD_125 != null)
                    ent.VA_OD_125= xVA_OD_125.v_Value1;

                var xVA_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_250);
                if (xVA_OD_250 != null)
                    ent.VA_OD_250 = xVA_OD_250.v_Value1;

                var xVA_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_500);
                if (xVA_OD_500 != null)
                    ent.VA_OD_500 = xVA_OD_500.v_Value1;

                var xVA_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_1000);
                if (xVA_OD_1000 != null)
                    ent.VA_OD_1000 = xVA_OD_1000.v_Value1;

                var xVA_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_2000);
                if (xVA_OD_2000 != null)
                    ent.VA_OD_2000 = xVA_OD_2000.v_Value1;

                var xVA_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_3000);
                if (xVA_OD_3000 != null)
                    ent.VA_OD_3000 = xVA_OD_3000.v_Value1;

                var xVA_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_4000);
                if (xVA_OD_4000 != null)
                    ent.VA_OD_4000 = xVA_OD_4000.v_Value1;

                var xVA_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_6000);
                if (xVA_OD_6000 != null)
                    ent.VA_OD_6000 = xVA_OD_6000.v_Value1;

                var xVA_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OD_8000);
                if (xVA_OD_8000 != null)
                    ent.VA_OD_8000 = xVA_OD_8000.v_Value1;





                var xVO_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_125);
                if (xVO_OD_125 != null)
                    ent.VO_OD_125 = xVO_OD_125.v_Value1;

                var xVO_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_250);
                if (xVO_OD_250 != null)
                    ent.VO_OD_250 = xVO_OD_250.v_Value1;

                var xVO_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_500);
                if (xVO_OD_500 != null)
                    ent.VO_OD_500 = xVO_OD_500.v_Value1;

                var xVO_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_1000);
                if (xVO_OD_1000 != null)
                    ent.VO_OD_1000 = xVO_OD_1000.v_Value1;

                var xVO_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_2000);
                if (xVO_OD_2000 != null)
                    ent.VO_OD_2000 = xVO_OD_2000.v_Value1;

                var xVO_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_3000);
                if (xVO_OD_3000 != null)
                    ent.VO_OD_3000 = xVO_OD_3000.v_Value1;

                var xVO_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_4000);
                if (xVO_OD_4000 != null)
                    ent.VO_OD_4000 = xVO_OD_4000.v_Value1;

                var xVO_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_6000);
                if (xVO_OD_6000 != null)
                    ent.VO_OD_6000 = xVO_OD_6000.v_Value1;

                var xVO_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OD_8000);
                if (xVO_OD_8000 != null)
                    ent.VO_OD_8000 = xVO_OD_8000.v_Value1;



                var xEM_OD_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_125);
                if (xEM_OD_125 != null)
                    ent.EM_OD_125 = xEM_OD_125.v_Value1;

                var xEM_OD_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_250);
                if (xEM_OD_250 != null)
                    ent.EM_OD_250 = xEM_OD_250.v_Value1;

                var xEM_OD_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_500);
                if (xEM_OD_500 != null)
                    ent.EM_OD_500 = xEM_OD_500.v_Value1;

                var xEM_OD_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_1000);
                if (xEM_OD_1000 != null)
                    ent.EM_OD_1000 = xEM_OD_1000.v_Value1;

                var xEM_OD_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_2000);
                if (xEM_OD_2000 != null)
                    ent.EM_OD_2000 = xEM_OD_2000.v_Value1;

                var xEM_OD_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_3000);
                if (xEM_OD_3000 != null)
                    ent.EM_OD_3000 = xEM_OD_3000.v_Value1;

                var xEM_OD_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_4000);
                if (xEM_OD_4000 != null)
                    ent.EM_OD_4000 = xEM_OD_4000.v_Value1;

                var xEM_OD_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_6000);
                if (xEM_OD_6000 != null)
                    ent.EM_OD_6000 = xEM_OD_6000.v_Value1;

                var xEM_OD_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OD_8000);
                if (xEM_OD_8000 != null)
                    ent.EM_OD_8000 = xEM_OD_8000.v_Value1;







                // OI
                var xVA_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_125);
                if (xVA_OI_125 != null)
                    ent.VA_OI_125 = xVA_OI_125.v_Value1;

                var xVA_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_250);
                if (xVA_OI_250 != null)
                    ent.VA_OI_250 = xVA_OI_250.v_Value1;


                var xVA_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_500);
                if (xVA_OI_500 != null)
                    ent.VA_OI_500 = xVA_OI_500.v_Value1;

                var xVA_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_1000);
                if (xVA_OI_1000 != null)
                    ent.VA_OI_1000 = xVA_OI_1000.v_Value1;

                var xVA_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_2000);
                if (xVA_OI_2000 != null)
                    ent.VA_OI_2000 = xVA_OI_2000.v_Value1;

                var xVA_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_3000);
                if (xVA_OI_3000 != null)
                    ent.VA_OI_3000 = xVA_OI_3000.v_Value1;

                var xVA_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_4000);
                if (xVA_OI_4000 != null)
                    ent.VA_OI_4000 = xVA_OI_4000.v_Value1;

                var xVA_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_6000);
                if (xVA_OI_6000 != null)
                    ent.VA_OI_6000 = xVA_OI_6000.v_Value1;

                var xVA_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VA_OI_8000);
                if (xVA_OI_8000 != null)
                    ent.VA_OI_8000 = xVA_OI_8000.v_Value1;









                var xVO_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_125);
                if (xVO_OI_125 != null)
                    ent.VO_OI_125 = xVO_OI_125.v_Value1;

                var xVO_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_250);
                if (xVO_OI_250 != null)
                    ent.VO_OI_250 = xVO_OI_250.v_Value1;

                var xVO_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_500);
                if (xVO_OI_500 != null)
                    ent.VO_OI_500 = xVO_OI_500.v_Value1;

                var xVO_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_1000);
                if (xVO_OI_1000 != null)
                    ent.VO_OI_1000 = xVO_OI_1000.v_Value1;

                var xVO_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_2000);
                if (xVO_OI_2000 != null)
                    ent.VO_OI_2000 = xVO_OI_2000.v_Value1;

                var xVO_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_3000);
                if (xVO_OI_3000 != null)
                    ent.VO_OI_3000 = xVO_OI_3000.v_Value1;

                var xVO_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_4000);
                if (xVO_OI_4000 != null)
                    ent.VO_OI_4000 = xVO_OI_4000.v_Value1;

                var xVO_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_6000);
                if (xVO_OI_6000 != null)
                    ent.VO_OI_6000 = xVO_OI_6000.v_Value1;

                var xVO_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_VO_OI_8000);
                if (xVO_OI_8000 != null)
                    ent.VO_OI_8000 = xVO_OI_8000.v_Value1;



                var xEM_OI_125 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_125);
                if (xEM_OI_125 != null)
                    ent.EM_OI_125 = xEM_OI_125.v_Value1;

                var xEM_OI_250 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_250);
                if (xEM_OI_250 != null)
                    ent.EM_OI_250 = xEM_OI_250.v_Value1;

                var xEM_OI_500 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_500);
                if (xEM_OI_500 != null)
                    ent.EM_OI_500 = xEM_OI_500.v_Value1;

                var xEM_OI_1000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_1000);
                if (xEM_OI_1000 != null)
                    ent.EM_OI_1000 = xEM_OI_1000.v_Value1;

                var xEM_OI_2000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_2000);
                if (xEM_OI_2000 != null)
                    ent.EM_OI_2000 = xEM_OI_2000.v_Value1;

                var xEM_OI_3000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_3000);
                if (xEM_OI_3000 != null)
                    ent.EM_OI_3000 = xEM_OI_3000.v_Value1;

                var xEM_OI_4000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_4000);
                if (xEM_OI_4000 != null)
                    ent.EM_OI_4000 = xEM_OI_4000.v_Value1;

                var xEM_OI_6000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_6000);
                if (xEM_OI_6000 != null)
                    ent.EM_OI_6000 = xEM_OI_6000.v_Value1;

                var xEM_OI_8000 = __sql.Find(p => p.v_ComponentFieldId == Constants.txt_EM_OI_8000);
                if (xEM_OI_8000 != null)
                    ent.EM_OI_8000 = xEM_OI_8000.v_Value1;


                ent.b_AudiogramaOD = img_OD;
                ent.b_AudiogramaOI = img_OI;           

                audiometriaList.Add(ent);

                return audiometriaList;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public List<AudiometriaList> ReportAudiometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************  

                                 join pro in dbContext.protocol on A.v_ProtocolId equals pro.v_ProtocolId

                                 join H in dbContext.systemparameter on new { a = pro.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                                 // Empresa / Sede Trabajo  ********************************************************
                                 join ow in dbContext.organization on new { a = pro.v_WorkingOrganizationId }
                                         equals new { a = ow.v_OrganizationId } into ow_join
                                 from ow in ow_join.DefaultIfEmpty()

                                 join lw in dbContext.location on new { a = pro.v_WorkingOrganizationId, b = pro.v_WorkingLocationId }
                                      equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                                 from lw in lw_join.DefaultIfEmpty()

                                 //************************************************************************************


                                 where A.v_ServiceId == pstrserviceId

                                 select new AudiometriaList
                                 {
                                     v_PersonId = A.v_PersonId,

                                     v_FullPersonName = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,

                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,

                                     v_DocNumber = B.v_DocNumber,
                                     i_SexTypeId = B.i_SexTypeId.Value,

                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedico = pme.b_SignatureImage,

                                     Puesto = B.v_CurrentOccupation,
                                     v_SexType = B.i_SexTypeId == (int)Gender.MASCULINO ? "M" : "F",
                                     //
                                     v_EsoTypeName = H.v_Value1,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     v_WorkingOrganizationName = ow.v_Name,
                                     v_FullWorkingOrganizationName = ow.v_Name + " / " + lw.v_Name,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                  

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var __sql = ValoresComponente(pstrserviceId, pstrComponentId);

                    //// Requisitos para la Audiometria                         
                    //          var CambiosAltitud = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CAMBIOS_ALTITUD).v_Value1;
                    //           var ExpuestoRuido = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_EXPUESTO_RUIDO).v_Value1;
                    //           var ProcesoInfeccioso = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_PROCESO_INFECCIOSO).v_Value1;
                    //           var DurmioNochePrevia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_DURMIO_NOCHE_PREVIA).v_Value1;
                    //           var ConsumioAlcoholDiaPrevio = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CONSUMIO_ALCOHOL_DIA_PREVIO).v_Value1;

                    //           //// Antecedentes Medicos de importancia

                    //           var RinitisSinusitis = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_RINITIS_SINUSITIS).v_Value1;
                    //           var UsoMedicamentos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_USO_MEDICAMENTOS).v_Value1;
                    //           var Sarampion = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SARAMPION).v_Value1;
                    //           var Tec = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TEC).v_Value1;
                    //           var OtitisMediaCronica = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA).v_Value1;
                    //          var  DiabetesMellitus = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS).v_Value1;
                    //           var SorderaAntecedente = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA).v_Value1;
                    //           var SorderaFamiliar = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR).v_Value1;
                    //          var  Meningitis = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_MENINGITIS).v_Value1;
                    //           var Dislipidemia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA).v_Value1;
                    //           var EnfTiroidea = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA).v_Value1;
                    //           var SustQuimicas = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SUST_QUIMICAS).v_Value1;

                    //           //// Hobbies

                    //           var UsoMP3 = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_USO_MP3).v_Value1;
                    //           var PracticaTiro = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_PRACTICA_TIRO).v_Value1;
                    //           var Otros = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_OTROS).v_Value1;

                    //           //// Sintomas actuales

                    //           var Sordera = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA).v_Value1;
                    //           var Otalgia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA).v_Value1;
                    //           var Acufenos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS).v_Value1;
                    //           var SecrecionOtica = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA).v_Value1;
                    //           var Vertigos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS).v_Value1;

                    //           //// Otoscopia

                    //           var OidoIzquierdo = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_IZQUIERDO).v_Value1;
                    //           var OidoDerecho = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_DERECHO).v_Value1;


                var sql = (from a in objEntity.ToList()

                           select new AudiometriaList
                           {

                               v_PersonId = a.v_PersonId,
                               v_FullPersonName = a.v_FullPersonName,

                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),
                               d_ServiceDate = a.d_ServiceDate,
                               v_DocNumber = a.v_DocNumber,
                               i_SexTypeId = a.i_SexTypeId,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnologo = a.FirmaTecnologo,
                               Puesto = a.Puesto,
                               v_SexType = a.v_SexType,

                               // Requisitos para la Audiometria                         
                               CambiosAltitud = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CAMBIOS_ALTITUD).v_Value1,
                               ExpuestoRuido = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_EXPUESTO_RUIDO).v_Value1,
                               ProcesoInfeccioso = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_PROCESO_INFECCIOSO).v_Value1,
                               DurmioNochePrevia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_DURMIO_NOCHE_PREVIA).v_Value1,
                               ConsumioAlcoholDiaPrevio = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_CONSUMIO_ALCOHOL_DIA_PREVIO).v_Value1,

                               //// Antecedentes Medicos de importancia

                               RinitisSinusitis = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_RINITIS_SINUSITIS).v_Value1,
                               UsoMedicamentos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_USO_MEDICAMENTOS).v_Value1,
                               Sarampion = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SARAMPION).v_Value1,
                               Tec = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_TEC).v_Value1,
                               OtitisMediaCronica = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_OTITIS_MEDIA_CRONICA).v_Value1,
                               DiabetesMellitus = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DIABETES_MELLITUS).v_Value1,
                               SorderaAntecedente = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA).v_Value1,
                               SorderaFamiliar = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SORDERA_FAMILIAR).v_Value1,
                               Meningitis = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_MENINGITIS).v_Value1,
                               Dislipidemia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_DISLIPIDEMIA).v_Value1,
                               EnfTiroidea = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_ENF_TIROIDEA).v_Value1,
                               SustQuimicas = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_ANTECEDENTES_SUST_QUIMICAS).v_Value1,

                               //// Hobbies

                               UsoMP3 = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_USO_MP3).v_Value1,
                               PracticaTiro = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_PRACTICA_TIRO).v_Value1,
                               Otros = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_HOBBIES_OTROS).v_Value1,

                               //// Sintomas actuales

                               Sordera = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SORDERA).v_Value1,
                               Otalgia = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_OTALGIA).v_Value1,
                               Acufenos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_ACUFENOS).v_Value1,
                               SecrecionOtica = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_SECRECION_OTICA).v_Value1,
                               Vertigos = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_SINTOMAS_ACTUALES_VERTIGOS).v_Value1,

                               //// Otoscopia

                               OidoIzquierdo = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_IZQUIERDO).v_Value1,
                               OidoDerecho = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_OTOSCOPIA_OIDO_DERECHO).v_Value1,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               //
                               v_EsoTypeName = a.v_EsoTypeName,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_WorkingOrganizationName = a.v_WorkingOrganizationName,
                               v_FullWorkingOrganizationName = a.v_FullWorkingOrganizationName,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               MarcaAudiometria = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MARCA).v_Value1,
                               ModeloAudiometria = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_MODELO).v_Value1,
                               CalibracionAudiometria = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_DATOS_DEL_AUDIOMETRO_CALIBRACION).v_Value1,
                               TiempoTrabajo = __sql.Count == 0 ? string.Empty : __sql.Find(p => p.v_ComponentFieldId == Constants.AUDIOMETRIA_REQUISITOS_TIEMPO_DE_TRABAJO).v_Value1,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public List<ServiceComponentFieldValuesList> ValoresComponentesUserControl(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                
                                                   where A.v_ServiceId == pstrServiceId
                                                           && B.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
                                                           && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = C.v_ComponentFieldId,
                                                       //v_ComponentFielName = G.v_TextLabel,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1,
                                                       //i_GroupId = G.i_GroupId.Value
                                                   });

             
                return serviceComponentFieldValues.ToList();
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<DiagnosticRepositoryList> GetAptitudeCertificate(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                             join ooo in dbContext.organization on E.v_EmployerOrganizationId equals ooo.v_OrganizationId

                             join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
                                      equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

                             join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                        equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
                             from J3 in J3_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == isDeleted) &&
                                   //(ddd.v_DiseasesId != "N009-DD000000029") &&
                                   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo) 
                                   //&& (ccc.v_DiseasesId != Constants.NORMOACUSIA || ccc.v_DiseasesId != Constants.NORMOACUSIA_OIDO_DERECHO || ccc.v_DiseasesId != Constants.NORMOACUSIA_OIDO_IZQUIERDO || ccc.v_DiseasesId != Constants.NORMOPESO || ccc.v_DiseasesId != Constants.DISEASES_RECOMENDACIONES)


                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 i_AutoManualId = ccc.i_AutoManualId,
                                 i_PreQualificationId = ccc.i_PreQualificationId,
                                 i_FinalQualificationId = ccc.i_FinalQualificationId,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,
                                 d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                 v_DiseasesName = ddd.v_Name,
                                 v_CreationUser = J1.v_UserName,
                                 v_UpdateUser = J2.v_UserName,
                                 d_CreationDate = J1.d_InsertDate,
                                 d_UpdateDate = J2.d_UpdateDate,
                                 i_IsDeleted = ccc.i_IsDeleted.Value,
                                 v_ProtocolId = E.v_ProtocolId,
                                 v_ProtocolName = E.v_Name,
                                 v_PersonId = D.v_PersonId,
                                 d_BirthDate = D.d_Birthdate,
                                 v_EsoTypeName = H.v_Value1,
                                 v_OrganizationPartialName = ooo.v_Name,
                                 v_LocationName = lll.v_Name,
                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 v_DocNumber = D.v_DocNumber,
                                 v_GenderName = J.v_Value1,
                                 v_AptitudeStatusName = G.v_Value1,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 g_Image = pr.b_SignatureImage,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 v_ObsStatusService = sss.v_ObsStatusService
                                
                             });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var q = (from a in query.ToList()
                         select new DiagnosticRepositoryList
                         {
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_DiseasesId = a.v_DiseasesId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_EsoTypeName = a.v_EsoTypeName,
                             v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_LocationName),
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             v_DocNumber = a.v_DocNumber,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_DiseasesName = a.v_DiseasesName == "RECOMENDACIONES" ? null : a.v_DiseasesName,
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_AptitudeStatusName = a.v_AptitudeStatusName,
                             v_OccupationName = a.v_OccupationName,  // por ahora se muestra el GESO
                             g_Image = a.g_Image,
                             b_Logo = MedicalCenter.b_Image,
                             EmpresaPropietaria = MedicalCenter.v_Name,
                             EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                             EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                             EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             i_AptitudeStatusId = a.i_AptitudeStatusId,
                             v_ObsStatusService = a.v_ObsStatusService
                         }).ToList();                              

                pobjOperationResult.Success = 1;

              
                return q.OrderByDescending( p => p.v_DiseasesName).ToList();
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<CertificadoAptitudConclusiones> GetAptitudeCertificateConclusiones(ref OperationResult pobjOperationResult, string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == isDeleted) &&
                                   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                           
                             select new CertificadoAptitudConclusiones
                             {
                                
                                 v_DiseasesNameGrilla = ddd.v_Name,
                                
                             }).ToList();

                pobjOperationResult.Success = 1;

                var Resultado = query.FindAll(p => p.v_DiseasesNameGrilla != "RECOMENDACIONES");
                return Resultado;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ServiceList> GetServicesPagedAndFilteredReport(ref OperationResult pobjOperationResult, int? pintPageIndex, int? pintResultsPerPage, string pstrSortExpression, string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service
                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId }
                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId }
                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId
                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId
                            join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId
                            join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId
                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId }
                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId
                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId }
                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId }
                            //join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId

                            // Empresa / Sede Cliente ******************************************************
                            join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                                    equals new { a = oc.v_OrganizationId } into oc_join
                            from oc in oc_join.DefaultIfEmpty()

                            join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                                  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            from lc in lc_join.DefaultIfEmpty()

                            // Empresa / Sede Empleadora *******************************************
                            join oe in dbContext.organization on new { a = E.v_EmployerOrganizationId }
                                  equals new { a = oe.v_OrganizationId } into oe_join
                            from oe in oe_join.DefaultIfEmpty()

                            join le in dbContext.location on new { a = E.v_EmployerOrganizationId, b = E.v_EmployerLocationId }
                                   equals new { a = le.v_OrganizationId, b = le.v_LocationId } into le_join
                            from le in le_join.DefaultIfEmpty()

                            // Empresa / Sede Trabajo *******************************************
                            join ow in dbContext.organization on new { a = E.v_WorkingOrganizationId }
                                  equals new { a = ow.v_OrganizationId } into ow_join
                            from ow in ow_join.DefaultIfEmpty()

                            join lw in dbContext.location on new { a = E.v_WorkingOrganizationId, b = E.v_WorkingLocationId }
                                   equals new { a = lw.v_OrganizationId, b = lw.v_LocationId } into lw_join
                            from lw in lw_join.DefaultIfEmpty()
                            // *****************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0
                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,
                                v_OrganizationName = oc.v_Name + " / " + lc.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = L.v_Value1 + " / " + I.v_DocNumber,
                                FechaNacimiento = I.d_Birthdate.Value,
                                Year = ((DateTime)A.d_ServiceDate).Year,

                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EmployerOrganizationId = E.v_EmployerOrganizationId,
                                v_EmployerLocationId = E.v_EmployerLocationId,
                                v_WorkingOrganizationId = E.v_WorkingOrganizationId,
                                v_WorkingLocationId = E.v_WorkingLocationId
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }
                if (!string.IsNullOrEmpty(pstrSortExpression))
                {
                    query = query.OrderBy(pstrSortExpression);
                }
                if (pintPageIndex.HasValue && pintResultsPerPage.HasValue)
                {
                    int intStartRowIndex = pintPageIndex.Value * pintResultsPerPage.Value;
                    query = query.Skip(intStartRowIndex);
                }
                if (pintResultsPerPage.HasValue)
                {
                    query = query.Take(pintResultsPerPage.Value);
                }

                var q = (from a in query.ToList()
                         select new ServiceList
                         {
                             v_ServiceId = a.v_ServiceId,
                             v_CalendarId = a.v_CalendarId,
                             v_ProtocolId = a.v_ProtocolId,
                             //v_PersonId = a.v_PersonId,
                             //i_MasterServiceId = a.i_MasterServiceId,
                             //v_MasterServiceName = a.v_MasterServiceName,
                             //i_ServiceStatusId = a.i_ServiceStatusId,
                             v_ServiceStatusName = a.v_ServiceStatusName,
                             //i_AptitudeStatusId = a.i_AptitudeStatusId.Value,
                             d_ServiceDate = (DateTime)a.d_ServiceDate,
                             //d_GlobalExpirationDate = (DateTime)a.d_GlobalExpirationDate,
                             //d_ObsExpirationDate = (DateTime)a.d_ObsExpirationDate,
                             //i_FlagAgentId = a.i_FlagAgentId,
                             //d_DateTimeCalendar = (DateTime)a.d_DateTimeCalendar,
                             v_OrganizationName = a.v_OrganizationName,
                             //v_GenderName = a.v_GenderName,
                             //v_ServiceTypeName = a.v_ServiceTypeName,
                             //i_ServiceTypeId = a.i_ServiceTypeId,
                             //i_EsoTypeId = a.i_EsoTypeId,
                             //v_LocationId = a.v_LocationId,
                             v_LocationName = a.v_LocationName,
                             v_Pacient = a.v_Pacient,
                             //v_PacientDocument = a.v_PacientDocument,
                             v_ProtocolName = a.v_ProtocolName,
                             //v_CreationUser = a.v_CreationUser,
                             //v_UpdateUser = a.v_UpdateUser,
                             //d_CreationDate = a.d_CreationDate,
                             //d_UpdateDate = a.d_UpdateDate,
                             v_AptitudeStatusName = a.v_AptitudeStatusName,
                             //v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber = a.v_DocNumber,
                             Year = a.Year,
                             FechaNacimiento = a.FechaNacimiento,
                             i_Age = (GetAge(a.FechaNacimiento)).ToString(),
                             //CostoProtocolo = GetServicesPagedAndFilteredReport(a.v_ProtocolId),

                             CostoProtocolo = GetServiceCost(a.v_ServiceId),

                             v_CustomerOrganizationId = a.v_CustomerOrganizationId,
                             v_CustomerLocationId = a.v_CustomerLocationId,
                             v_EmployerOrganizationId = a.v_EmployerOrganizationId,
                             v_EmployerLocationId = a.v_EmployerLocationId

                         }).ToList();

                List<ServiceList> objData = q.ToList();
                pobjOperationResult.Success = 1;
                return objData;

            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public int GetAge(DateTime FechaNacimiento)
        {
            return int.Parse((DateTime.Today.AddTicks(-FechaNacimiento.Ticks).Year - 1).ToString());

        }

        public float GetServicesPagedAndFilteredReport(string ProtocoloId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from A in dbContext.protocol
                         join M in dbContext.protocolcomponent on A.v_ProtocolId equals M.v_ProtocolId
                         where (A.i_IsDeleted == 0) && (A.v_ProtocolId == ProtocoloId)
                         select new
                         {
                             v_ProtocolId = A.v_ProtocolId,
                             CostoProtocolo = M.r_Price.Value
                         });

            //List<ServiceList> objAutorizationList = query.AsEnumerable()                                                                     
            //                                                           .GroupBy(x => x.v_ProtocolId)
            //                                                           .Select(group => group.First())
            //                                                           .ToList();


            return query.Sum(o => o.CostoProtocolo);

        }

        public string GetServiceCost(string serviceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from sc in dbContext.servicecomponent
                         join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                         where (sc.i_IsDeleted == 0) &&
                               (sc.v_ServiceId == serviceId) &&
                               (sc.i_IsRequiredId == (int?)SiNo.SI) &&
                               (sc.i_ServiceComponentStatusId != (int)ServiceComponentStatus.NoRealizado) &&
                               (c.i_ComponentTypeId == (int)ComponentType.Examen)
                         select new
                         {
                             v_ServiceId = sc.v_ServiceId,
                             CostoProtocolo = sc.r_Price.Value
                         });

            return string.Format("{0:0,0.00}", query.Sum(o => o.CostoProtocolo));

        }

        // Alejandro
        public ServiceList GetAnamnesisReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            var isDeleted = 0;

            try
            {

                var FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrServiceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID);

                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.service

                            join K in dbContext.systemparameter on new { a = 135, b = A.i_HasSymptomId.Value }
                                                    equals new { a = K.i_GroupId, b = K.i_ParameterId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.systemparameter on new { a = 135, b = A.i_UrineId.Value }
                                                    equals new { a = L.i_GroupId, b = L.i_ParameterId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join M in dbContext.systemparameter on new { a = 135, b = A.i_DepositionId.Value }
                                                  equals new { a = M.i_GroupId, b = M.i_ParameterId } into M_join
                            from M in M_join.DefaultIfEmpty()

                            join N in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
                                        equals new { a = N.i_GroupId, b = N.i_ParameterId } into N_join
                            from N in N_join.DefaultIfEmpty()

                            join O in dbContext.systemparameter on new { a = 134, b = A.i_MacId.Value }
                                  equals new { a = O.i_GroupId, b = O.i_ParameterId } into O_join
                            from O in O_join.DefaultIfEmpty()

                            join P in dbContext.systemparameter on new { a = 135, b = A.i_AppetiteId.Value }
                                      equals new { a = P.i_GroupId, b = P.i_ParameterId } into P_join
                            from P in P_join.DefaultIfEmpty()

                            join su in dbContext.systemuser on A.i_UpdateUserMedicalAnalystId.Value equals su.i_SystemUserId into su_join
                            from su in su_join.DefaultIfEmpty()

                            join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                            from pr in pr_join.DefaultIfEmpty()

                            where A.v_ServiceId == pstrServiceId && A.i_IsDeleted == isDeleted

                            select new ServiceList
                            {
                                v_ServiceId = A.v_ServiceId,
                                i_HasSymptomId = A.i_HasSymptomId,
                                v_MainSymptom = A.v_MainSymptom,
                                i_TimeOfDisease = A.i_TimeOfDisease,
                                i_TimeOfDiseaseTypeId = A.i_TimeOfDiseaseTypeId,
                                v_Story = A.v_Story,
                                v_PersonId = pr.v_PersonId,

                                i_DreamId = A.i_DreamId,
                                v_Dream = K.v_Value1,
                                i_UrineId = A.i_UrineId,
                                v_Urine = L.v_Value1,
                                i_DepositionId = A.i_DepositionId,
                                v_Deposition = M.v_Value1,
                                i_AppetiteId = A.i_AppetiteId,
                                v_Appetite = N.v_Value1,
                                i_ThirstId = A.i_ThirstId,
                                v_Thirst = P.v_Value1,
                                d_Fur = A.d_Fur.Value,
                                v_CatemenialRegime = A.v_CatemenialRegime,
                                i_MacId = A.i_MacId,
                                v_Mac = O.v_Value1,

                                // Antecedentes ginecologicos
                                d_PAP = A.d_PAP.Value,
                                d_Mamografia = A.d_Mamografia.Value,
                                v_CiruGine = A.v_CiruGine,
                                v_Gestapara = A.v_Gestapara,
                                v_Menarquia = A.v_Menarquia,
                                v_Findings = A.v_Findings,

                                // firma y sello del medico que analisa y califica los diagnosticos
                                FirmaDoctor = pr.b_SignatureImage,
                                FirmaMedicoMedicina = FirmaMedicoMedicina
                                 //FirmaMedicoMedicina = null
                            };

                ServiceList objData = query.FirstOrDefault();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }      

        public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            int rpta = 0;

            try
            {
                var serviceComponentFieldValues = (from A in dbContext.service
                                                   join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                   join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                   join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                   join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                   join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                   join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                   join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                                 
                                                   where A.v_ServiceId == pstrServiceId
                                                           && H.v_ComponentId == pstrComponentId
                                                           && B.i_IsDeleted == 0
                                                           && C.i_IsDeleted == 0

                                                   select new ServiceComponentFieldValuesList
                                                   {
                                                       v_ComponentFieldId = G.v_ComponentFieldId,
                                                       v_ComponentFielName = G.v_TextLabel,
                                                       v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                       v_Value1 = D.v_Value1,
                                                       i_GroupId = G.i_GroupId.Value
                                                   });

                var finalQuery = (from a in serviceComponentFieldValues.ToList()

                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ServiceComponentFieldValuesList
                                  {
                                      v_ComponentFieldId = a.v_ComponentFieldId,
                                      v_ComponentFielName = a.v_ComponentFielName,
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1
                                  }).ToList();


                return finalQuery;
            }
            catch (Exception)
            {

                throw;
            }

        }

         // Alejandro
        public string GetValueComponent(string pstrServiceId, string pstrComponentId, string componentFieldId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {
                var value = (from A in dbContext.service
                             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                             join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                             join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                             join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                             join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                             join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                             join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                             where A.v_ServiceId == pstrServiceId
                                     && H.v_ComponentId == pstrComponentId
                                     && B.i_IsDeleted == isDeleted
                                     && C.i_IsDeleted == isDeleted
                                     && G.v_ComponentFieldId == componentFieldId

                             select D.v_Value1).SingleOrDefault<string>();

                return value;
            }
            catch (Exception)
            {

                throw;
            }

        }

        // Alejandro
        public bool ExistComponentInService(string pstrServiceId, string pstrComponentId)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var exist = dbContext.servicecomponent.Any(p => p.v_ServiceId == pstrServiceId && p.v_ComponentId == pstrComponentId && p.i_IsDeleted == isDeleted);
                    return exist;
                }
            }
            catch (Exception)
            {

                throw;
            }

        }


        //public List<ServiceComponentFieldValuesList> ValoresComponente(string pstrServiceId, string pstrComponentId)
        //{

        //    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //    List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
        //                                                                         join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
        //                                                                         join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
        //                                                                         join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
        //                                                                         where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0 
        //                                                                         && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

        //                                                                         select new ServiceComponentFieldValuesList
        //                                                                         {
        //                                                                             v_ComponentFieldId = B.v_ComponentFieldId,
        //                                                                             v_ComponentFielName = D.v_TextLabel,
        //                                                                             //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
        //                                                                             //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
        //                                                                             v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
        //                                                                             v_Value1 = C.v_Value1
        //                                                                             //v_Value2 = A.v_Value2,
        //                                                                             //i_Index = A.i_Index,
        //                                                                             //i_Value1 = A.i_Value1
        //                                                                         }).ToList();


        //    return serviceComponentFieldValues;
        //}

        public List<ServiceComponentFieldValuesList> ValoresComponente1(string pstrServiceId, string pstrComponentId)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.servicecomponent
                                                                                 join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                                                                 join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                                                                 join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                                                                 where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId && A.component.i_IsDeleted == 0
                                                                                 && B.i_IsDeleted == 0 && C.i_IsDeleted == 0

                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = B.v_ComponentFieldId,
                                                                                     v_ComponentFielName = D.v_TextLabel,
                                                                                     //v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                                                                                     //v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                                                                                     v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = C.v_Value1
                                                                                     //v_Value2 = A.v_Value2,
                                                                                     //i_Index = A.i_Index,
                                                                                     //i_Value1 = A.i_Value1
                                                                                 }).ToList();


            return serviceComponentFieldValues;
        }

        public List<ServiceComponentFieldValuesList> ValoresExamenComponete(string pstrServiceId, string pstrComponentId, int pintParameter)
        {

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var systemParameters = (from a in dbContext.systemparameter
                                    where a.i_GroupId == pintParameter
                                    select a);


            List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                 join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                 join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                 join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                                                                 join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                                                                                 join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                                                                 join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                                                                 join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                                                                 where A.v_ServiceId == pstrServiceId
                                                                                         && H.v_ComponentId == pstrComponentId
                                                                                         && B.i_IsDeleted == 0
                                                                                         && C.i_IsDeleted == 0

                                                                                 select new ServiceComponentFieldValuesList
                                                                                 {
                                                                                     v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                     v_ComponentFielName = G.v_TextLabel,
                                                                                     v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                     v_Value1 = D.v_Value1

                                                                                 }).ToList();


            var sql = (from A in serviceComponentFieldValues
                       join F in systemParameters on A.v_Value1 equals F.i_ParameterId.ToString() into F_join
                       from F in F_join.DefaultIfEmpty()
                       select new ServiceComponentFieldValuesList
                       {
                           v_ComponentFieldId = A.v_ComponentFieldId,
                           v_ComponentFielName = A.v_ComponentFielName,
                           v_ServiceComponentFieldValuesId = A.v_ServiceComponentFieldValuesId,
                           v_ComponentFieldValuesId = A.v_ComponentFieldValuesId,
                           v_ServiceComponentFieldsId = A.v_ServiceComponentFieldsId,
                           v_Value1 = A.v_Value1,
                           v_Value2 = A.v_Value2,
                           i_Index = A.i_Index,
                           i_Value1 = A.i_Value1,
                           v_Value1Name = F == null ? "" : F.v_Value1
                       }).ToList();

            return sql;
        }

        public ServiceComponentList ComponenteExamenFisico(string pstrServiceId, string pstrComponentId)
        {

            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = from A in dbContext.servicecomponent
                            where A.v_ServiceId == pstrServiceId && A.v_ComponentId == pstrComponentId
                            select new ServiceComponentList
                            {
                                v_Comment = A.v_Comment
                            };

                ServiceComponentList objData = query.FirstOrDefault();
                return objData;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Beto
        public List<DiagnosticRepositoryList> GetServiceDisgnosticsReports(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository
                                                        //join bbb in dbContext.servicecomponent on ccc.v_ServiceId equals bbb.v_ServiceId

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos

                                                        join eee in dbContext.systemparameter on new { a = ccc.i_AutoManualId.Value, b = 136 } // Auto / Manual
                                                                                                equals new { a = eee.i_ParameterId, b = eee.i_GroupId }

                                                        join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                                            equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                                        from fff in J5_join.DefaultIfEmpty()

                                                        join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                                            equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                                                        from ggg in J4_join.DefaultIfEmpty()

                                                        join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                                                equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                                                        from hhh in J3_join.DefaultIfEmpty()

                                                        join iii in dbContext.systemparameter on new { a = ccc.i_IsSentToAntecedent.Value, b = 111 } // RESPUESTA SI/NO
                                                                                             equals new { a = iii.i_ParameterId, b = iii.i_GroupId } into J6_join
                                                        from iii in J6_join.DefaultIfEmpty()

                                                        join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                                                        equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                                        from J1 in J1_join.DefaultIfEmpty()

                                                        join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                                                        equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                                        from J2 in J2_join.DefaultIfEmpty()

                                                        where (ccc.v_ServiceId == pstrServiceId) &&
                                                              (ccc.i_IsDeleted == isDeleted)
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            //v_ComponentName = bbb.v_Name,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId, //sirve
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,//sirve
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                                            v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                                            v_DiseasesName = ddd.v_Name,
                                                            v_Cie10 = ddd.v_CIE10Id,
                                                            
                                                            v_AutoManualName = eee.v_Value1,

                                                            v_PreQualificationName = fff.v_Value1,
                                                            v_FinalQualificationName = ggg.v_Value1,
                                                            v_DiagnosticTypeName = hhh.v_Value1,
                                                            v_IsSentToAntecedentName = iii.v_Value1,
                                                            i_RecordStatus = (int)RecordStatus.Grabado,
                                                            i_RecordType = (int)RecordType.NoTemporal,

                                                            v_CreationUser = J1.v_UserName,
                                                            v_UpdateUser = J2.v_UserName,
                                                            d_CreationDate = J1.d_InsertDate,
                                                            d_UpdateDate = J2.d_UpdateDate,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();


                var q = new List<DiagnosticRepositoryList>();
                q = query.Select((a, index) => new DiagnosticRepositoryList
                         {
                             i_Item = index +1,
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_ServiceId = a.v_ServiceId,
                             v_ComponentId = a.v_ComponentId,
                             v_ComponentName = a.v_ComponentName,
                             v_DiseasesId = a.v_DiseasesId,
                             i_AutoManualId = a.i_AutoManualId,
                             i_PreQualificationId = a.i_PreQualificationId,
                             i_FinalQualificationId = a.i_FinalQualificationId,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                             d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                             i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                             v_ComponentFieldsId = a.v_ComponentFieldsId,

                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_DiseasesName = a.v_DiseasesName,
                             v_Cie10 = a.v_Cie10,
                             v_AutoManualName = a.v_AutoManualName,

                             v_PreQualificationName = a.v_PreQualificationName,
                             v_FinalQualificationName = a.v_FinalQualificationName,
                             v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                             v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                             i_RecordStatus = a.i_RecordStatus,
                             i_RecordType = a.i_RecordType,

                             v_CreationUser = a.v_CreationUser,
                             v_UpdateUser = a.v_UpdateUser,
                             d_CreationDate = a.d_CreationDate,
                             d_UpdateDate = a.d_UpdateDate,
                             i_IsDeleted = a.i_IsDeleted

                         }).ToList();

                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                foreach (DiagnosticRepositoryList dr in q)
                {
                    dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                    dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                }

                return q;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<DiagnosticRepositoryList> GetServiceDisgnosticsHistoriaClinica(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                List<DiagnosticRepositoryList> query = (from ccc in dbContext.diagnosticrepository

                                                        join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                                                        from ddd in ddd_join.DefaultIfEmpty()                      

                                                        where (ccc.v_ServiceId == pstrServiceId) &&
                                                              (ccc.i_IsDeleted == isDeleted)
                                                        select new DiagnosticRepositoryList
                                                        {
                                                            v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                                            v_ServiceId = ccc.v_ServiceId,
                                                            v_ComponentId = ccc.v_ComponentId,
                                                            v_DiseasesId = ccc.v_DiseasesId,
                                                            i_AutoManualId = ccc.i_AutoManualId,
                                                            i_PreQualificationId = ccc.i_PreQualificationId,
                                                            i_FinalQualificationId = ccc.i_FinalQualificationId, //sirve
                                                            i_DiagnosticTypeId = ccc.i_DiagnosticTypeId,//sirve
                                                            i_IsSentToAntecedent = ccc.i_IsSentToAntecedent,
                                                            d_ExpirationDateDiagnostic = ccc.d_ExpirationDateDiagnostic,
                                                            i_GenerateMedicalBreak = ccc.i_GenerateMedicalBreak,
                                                            v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                                            v_DiseasesName = ddd.v_Name,
                                                            v_Cie10 = ddd.v_CIE10Id,
                                                            i_IsDeleted = ccc.i_IsDeleted.Value
                                                        }).ToList();


                var q = new List<DiagnosticRepositoryList>();
                q = query.Select((a, index) => new DiagnosticRepositoryList
                {
                    i_Item = index + 1,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_ComponentName = a.v_ComponentName,
                    v_DiseasesId = a.v_DiseasesId,
                    i_AutoManualId = a.i_AutoManualId,
                    i_PreQualificationId = a.i_PreQualificationId,
                    i_FinalQualificationId = a.i_FinalQualificationId,
                    i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                    i_IsSentToAntecedent = a.i_IsSentToAntecedent,
                    d_ExpirationDateDiagnostic = a.d_ExpirationDateDiagnostic,
                    i_GenerateMedicalBreak = a.i_GenerateMedicalBreak,
                    v_ComponentFieldsId = a.v_ComponentFieldsId,

                    v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                    v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                    v_DiseasesName = a.v_DiseasesName,
                    v_Cie10 = a.v_Cie10,
                    v_AutoManualName = a.v_AutoManualName,

                    v_PreQualificationName = a.v_PreQualificationName,
                    v_FinalQualificationName = a.v_FinalQualificationName,
                    v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                    v_IsSentToAntecedentName = a.v_IsSentToAntecedentName,
                    i_RecordStatus = a.i_RecordStatus,
                    i_RecordType = a.i_RecordType,

                    v_CreationUser = a.v_CreationUser,
                    v_UpdateUser = a.v_UpdateUser,
                    d_CreationDate = a.d_CreationDate,
                    d_UpdateDate = a.d_UpdateDate,
                    i_IsDeleted = a.i_IsDeleted

                }).ToList();

                // Agregamos Restricciones / Recomendaciones
                OperationResult objOperationResult = new OperationResult();

                foreach (DiagnosticRepositoryList dr in q)
                {
                    dr.Restrictions = GetServiceRestrictionsByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                    dr.Recomendations = GetServiceRecommendationByDiagnosticRepositoryId(ref objOperationResult, dr.v_DiagnosticRepositoryId);
                }

                return q;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Alejandro
        public List<ServiceComponentFieldsList> GetServiceComponentFieldsAndValuesReport(string pstrServiceId, string pstrComponentId)
        {
       

            int isDeleted = 0;
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var serviceComponentFields = (from A in dbContext.servicecomponent
                                          join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                          join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                          join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
                                          join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                          join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

                                          join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
                                                             equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                          from dh in dh_join.DefaultIfEmpty()

                                          where (A.v_ServiceId == pstrServiceId) &&
                                                (cm.v_ComponentId == pstrComponentId) &&
                                                (A.i_IsDeleted == isDeleted) &&
                                                (B.i_IsDeleted == isDeleted) &&
                                                (C.i_IsDeleted == isDeleted)

                                          select new ServiceComponentFieldsList
                                          {
                                              v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                              v_ComponentFieldsId = B.v_ComponentFieldId,
                                              v_ComponentFielName = D.v_TextLabel,
                                              v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
                                              i_GroupId = D.i_GroupId.Value,
                                              v_MeasurementUnitName = dh.v_Value1
                                          }).ToList();

            int rpta = 0;

            var finalQuery = (from a in serviceComponentFields
                              let value1 = int.TryParse(a.v_Value1, out rpta)
                              join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                              equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                              from sp in sp_join.DefaultIfEmpty()

                              select new ServiceComponentFieldsList
                              {
                                  v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                  v_ComponentFieldsId = a.v_ComponentFieldsId,
                                  v_ComponentFielName = a.v_ComponentFielName,
                                  i_GroupId = a.i_GroupId,
                                  v_Value1 = a.v_Value1,
                                  v_Value1Name = sp == null ? "" : sp.v_Value1,
                                  v_MeasurementUnitName = a.v_MeasurementUnitName,
                                  v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, pstrComponentId)
                              }).ToList();

            return finalQuery;
        }
    
        // Alejandro
        //public List<ServiceComponentList> GetServiceComponentsReport(string pstrServiceId)
        //{
        //    //mon.IsActive = true;        

        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
        //        var components = (from aaa in dbContext.servicecomponent
        //                          join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
        //                          join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
        //                                          equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
        //                          from J1 in J1_join.DefaultIfEmpty()

        //                          join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
        //                                                          equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
        //                          from J2 in J2_join.DefaultIfEmpty()

        //                          join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
        //                                                                       equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
        //                          from fff in J5_join.DefaultIfEmpty()

        //                          // Usuario Medico Evaluador / Medico Aprobador ****************************
        //                          join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
        //                          from me in me_join.DefaultIfEmpty()

        //                          join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
        //                          from pme in pme_join.DefaultIfEmpty()

        //                          //*********************************************************************

        //                          where (aaa.v_ServiceId == pstrServiceId) &&
        //                                (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
        //                                (aaa.i_IsDeleted == 0) &&
        //                                (aaa.i_IsRequiredId == (int?)SiNo.SI)
        //                          orderby bbb.i_CategoryId, bbb.v_Name

        //                          select new
        //                          {
        //                              v_ComponentId = bbb.v_ComponentId,
        //                              v_ComponentName = bbb.v_Name,
        //                              v_ServiceComponentId = aaa.v_ServiceComponentId,
        //                              v_CreationUser = J1.v_UserName,
        //                              v_UpdateUser = J2.v_UserName,
        //                              d_CreationDate = aaa.d_InsertDate,
        //                              d_UpdateDate = aaa.d_UpdateDate,
        //                              i_IsDeleted = aaa.i_IsDeleted.Value,
        //                              i_CategoryId = bbb.i_CategoryId.Value,
        //                              v_CategoryName = fff.v_Value1,
        //                              DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
        //                                                      where (dr.v_ServiceId == pstrServiceId) &&
        //                                                            (dr.v_ComponentId == aaa.v_ComponentId)
        //                                                      select new DiagnosticRepositoryList
        //                                                      {
        //                                                          v_DiseasesId = dr.diseases.v_DiseasesId,
        //                                                          v_DiseasesName = dr.diseases.v_Name
        //                                                      }),
        //                              FirmaMedico = pme.b_SignatureImage
        //                          }).AsEnumerable().Select(p => new ServiceComponentList
        //                          {
        //                              v_ComponentId = p.v_ComponentId,
        //                              v_ComponentName = p.v_ComponentName,
        //                              v_ServiceComponentId = p.v_ServiceComponentId,
        //                              v_CreationUser = p.v_CreationUser,
        //                              v_UpdateUser = p.v_UpdateUser,
        //                              d_CreationDate = p.d_CreationDate,
        //                              d_UpdateDate = p.d_UpdateDate,
        //                              i_IsDeleted = p.i_IsDeleted,
        //                              i_CategoryId = p.i_CategoryId,
        //                              v_CategoryName = p.v_CategoryName,
        //                              DiagnosticRepository = p.DiagnosticRepository.ToList(),
        //                              FirmaMedico = p.FirmaMedico
        //                          }).ToList();

        //        foreach (var comp in components)
        //        {
        //            comp.ServiceComponentFields = GetServiceComponentFieldsAndValuesReport(pstrServiceId, comp.v_ComponentId);
        //        }

        //        return components;
        //    }
        //    catch (Exception)
        //    {
        //        throw;
        //    }
        //}

        // Alejandro
        public List<ServiceComponentList> GetServiceComponentsReport(string pstrServiceId)
        {
            //mon.IsActive = true;        
            int isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region serviceComponentFields

                var serviceComponentFields = (from A in dbContext.servicecomponent
                                              join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                              join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                              join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
                                              join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                              join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

                                              join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
                                                                 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                              from dh in dh_join.DefaultIfEmpty()

                                              where (A.v_ServiceId == pstrServiceId) &&
                                                  //(cm.v_ComponentId == pstrComponentId) &&
                                                    (A.i_IsDeleted == isDeleted) &&
                                                    (B.i_IsDeleted == isDeleted) &&
                                                    (C.i_IsDeleted == isDeleted)

                                              select new ServiceComponentFieldsList
                                              {
                                                  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                                  v_ComponentFieldsId = B.v_ComponentFieldId,
                                                  v_ComponentFielName = D.v_TextLabel,
                                                  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
                                                  i_GroupId = D.i_GroupId.Value,
                                                  v_MeasurementUnitName = dh.v_Value1,
                                                  v_ComponentId = cm.v_ComponentId,
                                                  v_ServiceComponentId = A.v_ServiceComponentId
                                              }).ToList();

                int rpta = 0;

                var _finalQuery = (from a in serviceComponentFields
                                  let value1 = int.TryParse(a.v_Value1, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ServiceComponentFieldsList
                                  {
                                      v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                      v_ComponentFieldsId = a.v_ComponentFieldsId,
                                      v_ComponentFielName = a.v_ComponentFielName,
                                      i_GroupId = a.i_GroupId,
                                      v_Value1 = a.v_Value1,
                                      v_Value1Name = sp == null ? "" : sp.v_Value1,
                                      v_MeasurementUnitName = a.v_MeasurementUnitName,
                                      v_ComponentId = a.v_ComponentId,
                                      v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, a.v_ComponentId),
                                      v_ServiceComponentId = a.v_ServiceComponentId
                                  }).ToList();


                #endregion

                var components = (from aaa in dbContext.servicecomponent
                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                  from fff in J5_join.DefaultIfEmpty()

                                  // Usuario Medico Evaluador / Medico Aprobador ****************************
                                  join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()

                                  join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                  from pme in pme_join.DefaultIfEmpty()

                                  //*********************************************************************

                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                        (aaa.i_IsDeleted == 0) &&
                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)

                                  //orderby bbb.i_CategoryId, bbb.v_Name

                                  select new
                                  {
                                      v_ComponentId = bbb.v_ComponentId,
                                      v_ComponentName = bbb.v_Name,
                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                      v_CreationUser = J1.v_UserName,
                                      v_UpdateUser = J2.v_UserName,
                                      d_CreationDate = aaa.d_InsertDate,
                                      d_UpdateDate = aaa.d_UpdateDate,
                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                      i_CategoryId = bbb.i_CategoryId.Value,
                                      v_CategoryName = fff.v_Value1,
                                      DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
                                                              where (dr.v_ServiceId == pstrServiceId) &&
                                                                    (dr.v_ComponentId == aaa.v_ComponentId && dr.i_IsDeleted==0) 
                                                              select new DiagnosticRepositoryList
                                                              {
                                                                  v_DiseasesId = dr.diseases.v_DiseasesId,
                                                                  v_DiseasesName = dr.diseases.v_Name
                                                              }),
                                      FirmaMedico = pme.b_SignatureImage
                                  }).AsEnumerable().Select(p => new ServiceComponentList
                                  {
                                      v_ComponentId = p.v_ComponentId,
                                      v_ComponentName = p.v_ComponentName,
                                      v_ServiceComponentId = p.v_ServiceComponentId,
                                      v_CreationUser = p.v_CreationUser,
                                      v_UpdateUser = p.v_UpdateUser,
                                      d_CreationDate = p.d_CreationDate,
                                      d_UpdateDate = p.d_UpdateDate,
                                      i_IsDeleted = p.i_IsDeleted,
                                      i_CategoryId = p.i_CategoryId,
                                      v_CategoryName = p.v_CategoryName,
                                      DiagnosticRepository = p.DiagnosticRepository.ToList(),
                                      FirmaMedico = p.FirmaMedico
                                  }).ToList();

                //var ff = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GLUCOSA_ID);
                //var ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);
                //var _ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.COLESTEROL_ID);

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.ServiceComponentFields = _finalQuery.FindAll(p => p.v_ComponentId == a.v_ComponentId));

                return components;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<ServiceComponentList> GetServiceComponentsReport_(string pstrServiceId)
        {
            //mon.IsActive = true;        
            int isDeleted = 0;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                #region serviceComponentFields

                var serviceComponentFields = (from A in dbContext.servicecomponent
                                              join B in dbContext.servicecomponentfields on A.v_ServiceComponentId equals B.v_ServiceComponentId
                                              join C in dbContext.servicecomponentfieldvalues on B.v_ServiceComponentFieldsId equals C.v_ServiceComponentFieldsId
                                              join cfs in dbContext.componentfields on B.v_ComponentFieldId equals cfs.v_ComponentFieldId
                                              join D in dbContext.componentfield on B.v_ComponentFieldId equals D.v_ComponentFieldId
                                              join cm in dbContext.component on cfs.v_ComponentId equals cm.v_ComponentId

                                              join dh in dbContext.datahierarchy on new { a = 105, b = D.i_MeasurementUnitId.Value }
                                                                 equals new { a = dh.i_GroupId, b = dh.i_ItemId } into dh_join
                                              from dh in dh_join.DefaultIfEmpty()

                                              where (A.v_ServiceId == pstrServiceId) &&
                                                  //(cm.v_ComponentId == pstrComponentId) &&
                                                    (A.i_IsDeleted == isDeleted) &&
                                                    (B.i_IsDeleted == isDeleted) &&
                                                    (C.i_IsDeleted == isDeleted)

                                              select new ServiceComponentFieldsList
                                              {
                                                  v_ServiceComponentFieldsId = B.v_ServiceComponentFieldsId,
                                                  v_ComponentFieldsId = B.v_ComponentFieldId,
                                                  v_ComponentFielName = D.v_TextLabel,
                                                  v_Value1 = C.v_Value1 == "" ? null : C.v_Value1,
                                                  i_GroupId = D.i_GroupId.Value,
                                                  v_MeasurementUnitName = dh.v_Value1,
                                                  v_ComponentId = cm.v_ComponentId,
                                                  v_ServiceComponentId = A.v_ServiceComponentId
                                              }).ToList();

                int rpta = 0;

                var _finalQuery = (from a in serviceComponentFields
                                   let value1 = int.TryParse(a.v_Value1, out rpta)
                                   join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                   equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                   from sp in sp_join.DefaultIfEmpty()

                                   select new ServiceComponentFieldsList
                                   {
                                       v_ServiceComponentFieldsId = a.v_ServiceComponentFieldsId,
                                       v_ComponentFieldsId = a.v_ComponentFieldsId,
                                       v_ComponentFielName = a.v_ComponentFielName,
                                       i_GroupId = a.i_GroupId,
                                       v_Value1 = a.v_Value1,
                                       v_Value1Name = sp == null ? "" : sp.v_Value1,
                                       v_MeasurementUnitName = a.v_MeasurementUnitName,
                                       v_ComponentId = a.v_ComponentId,
                                       v_ConclusionAndDiagnostic = a.v_Value1 + " / " + GetServiceComponentDiagnosticsReport(pstrServiceId, a.v_ComponentId),
                                       v_ServiceComponentId = a.v_ServiceComponentId
                                   }).ToList();


                #endregion

                var components = (from aaa in dbContext.servicecomponent
                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId
                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                  from fff in J5_join.DefaultIfEmpty()

                                  // Usuario Medico Evaluador / Medico Aprobador ****************************
                                  join me in dbContext.systemuser on aaa.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()

                                  join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                  from pme in pme_join.DefaultIfEmpty()

                                  //*********************************************************************

                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                        (aaa.i_IsDeleted == 0) &&
                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)

                                  //orderby bbb.i_CategoryId, bbb.v_Name

                                  select new
                                  {
                                      v_ComponentId = bbb.v_ComponentId,
                                      v_ComponentName = bbb.v_Name,
                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                      v_CreationUser = J1.v_UserName,
                                      v_UpdateUser = J2.v_UserName,
                                      d_CreationDate = aaa.d_InsertDate,
                                      d_UpdateDate = aaa.d_UpdateDate,
                                      i_IsDeleted = aaa.i_IsDeleted.Value,
                                      i_CategoryId = bbb.i_CategoryId.Value,
                                      v_CategoryName = fff.v_Value1,
                                      DiagnosticRepository = (from dr in aaa.service.diagnosticrepository
                                                              where (dr.v_ServiceId == pstrServiceId) &&
                                                                    (dr.v_ComponentId == aaa.v_ComponentId) &&
                                                                    (dr.i_FinalQualificationId == (int)FinalQualification.Presuntivo || dr.i_FinalQualificationId == (int)FinalQualification.Definitivo)&&
                                                                    (dr.i_IsDeleted==0)
                                                                   

                                                              select new DiagnosticRepositoryList
                                                              {
                                                                  v_DiseasesId = dr.diseases.v_DiseasesId,
                                                                  v_DiseasesName = dr.diseases.v_Name
                                                              }),
                                      FirmaMedico = pme.b_SignatureImage
                                  }).AsEnumerable().Select(p => new ServiceComponentList
                                  {
                                      v_ComponentId = p.v_ComponentId,
                                      v_ComponentName = p.v_ComponentName,
                                      v_ServiceComponentId = p.v_ServiceComponentId,
                                      v_CreationUser = p.v_CreationUser,
                                      v_UpdateUser = p.v_UpdateUser,
                                      d_CreationDate = p.d_CreationDate,
                                      d_UpdateDate = p.d_UpdateDate,
                                      i_IsDeleted = p.i_IsDeleted,
                                      i_CategoryId = p.i_CategoryId,
                                      v_CategoryName = p.v_CategoryName,
                                      DiagnosticRepository = p.DiagnosticRepository.ToList(),
                                      FirmaMedico = p.FirmaMedico
                                  }).ToList();

                //var ff = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GLUCOSA_ID);
                //var ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID);
                //var _ff_ = _finalQuery.FindAll(p => p.v_ComponentId == Constants.COLESTEROL_ID);

                components.Sort((x, y) => x.v_ComponentId.CompareTo(y.v_ComponentId));
                components.ForEach(a => a.ServiceComponentFields = _finalQuery.FindAll(p => p.v_ComponentId == a.v_ComponentId));

                return components;
            }
            catch (Exception)
            {
                throw;
            }
        }

        // Alejandro
        public List<ServiceComponentList> GetServiceComponentsForManagementReport(string pstrServiceId)
        {
            //mon.IsActive = true;        
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var components = (from aaa in dbContext.servicecomponent
                                  join bbb in dbContext.component on aaa.v_ComponentId equals bbb.v_ComponentId                                  
                                  join J1 in dbContext.systemuser on new { i_InsertUserId = aaa.i_InsertUserId.Value }
                                                  equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                                  from J1 in J1_join.DefaultIfEmpty()

                                  join J2 in dbContext.systemuser on new { i_UpdateUserId = aaa.i_UpdateUserId.Value }
                                                                  equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                                  from J2 in J2_join.DefaultIfEmpty()

                                  join fff in dbContext.systemparameter on new { a = bbb.i_CategoryId.Value, b = 116 } // CATEGORIA DEL EXAMEN
                                                                               equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                                  from fff in J5_join.DefaultIfEmpty()

                                  where (aaa.v_ServiceId == pstrServiceId) &&
                                        (bbb.i_ComponentTypeId == (int?)ComponentType.Examen) &&
                                        (aaa.i_IsDeleted == isDeleted) &&
                                        (aaa.i_IsRequiredId == (int?)SiNo.SI)
                                  orderby bbb.i_CategoryId, bbb.v_Name

                                  select new ServiceComponentList
                                  {
                                      v_ComponentId = bbb.v_ComponentId,
                                      v_ComponentName = bbb.v_Name,
                                      v_ServiceComponentId = aaa.v_ServiceComponentId,
                                      i_CategoryId = bbb.i_CategoryId.Value,
                                      v_CategoryName = fff.v_Value1

                                  }).ToList();

                return components;
            }
            catch (Exception)
            {
                throw;
            }
        }


        public List<ServiceComponentList> GetServiceComponentsForManagementReportAtxMedica(string pstrServiceId)
        {
            //mon.IsActive = true;        
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var components = (from ccc in dbContext.auxiliaryexam
                                
                                  join ddd in dbContext.component on ccc.v_ComponentId equals ddd.v_ComponentId

                                  where (ccc.v_ServiceId == pstrServiceId) &&
                                        (ccc.i_IsDeleted == isDeleted) 
                                     
                                  orderby ddd.i_CategoryId, ddd.v_Name

                                  select new ServiceComponentList
                                  {
                                      v_ComponentId = ccc.v_ComponentId,
                                      v_ComponentName = ddd.v_Name
                                  
                                  }).ToList();

                return components;
            }
            catch (Exception)
            {
                throw;
            }
        }

        // Alejandro
        public string GetServiceComponentDiagnosticsReport(string pstrServiceId, string pstrComponentId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId
                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.v_ComponentId == pstrComponentId) &&
                                   (ccc.i_IsDeleted == 0)
                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,

                             }).ToList();

                var concat = string.Join(", ", query.Select(p => p.v_DiseasesName));

                return concat;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        // Alejandro
        public List<RecomendationList> GetServiceRecommendationByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RecomendationList> query = (from ddd in dbContext.recommendation
                                                 join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRecommendationId
                                                                         equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
                                                 where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
                                                       (ddd.i_IsDeleted == 0)
                                                 select new RecomendationList
                                                 {
                                                     v_RecommendationId = ddd.v_RecommendationId,
                                                     v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                     v_ServiceId = ddd.v_ServiceId,
                                                     v_ComponentId = ddd.v_ComponentId,
                                                     v_MasterRecommendationId = ddd.v_MasterRecommendationId,
                                                     v_RecommendationName = eee.v_Name,

                                                 }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new RecomendationList
                {
                    i_Item = index + 1,
                    v_RecommendationId = a.v_RecommendationId,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_MasterRecommendationId = a.v_MasterRecommendationId,
                    v_RecommendationName = a.v_RecommendationName,
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Beto
        public List<RestrictionList> GetServiceRestrictionByDiagnosticRepositoryIdReport(string pstrDiagnosticRepositoryId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                List<RestrictionList> query = (from ddd in dbContext.restriction
                                               join eee in dbContext.masterrecommendationrestricction on ddd.v_MasterRestrictionId
                                                                       equals eee.v_MasterRecommendationRestricctionId //                                                                                                                                                                              
                                               where (ddd.v_DiagnosticRepositoryId == pstrDiagnosticRepositoryId) &&
                                                     (ddd.i_IsDeleted == 0)
                                               select new RestrictionList
                                               {
                                                   v_RestrictionId = ddd.v_RestrictionId,
                                                   v_DiagnosticRepositoryId = ddd.v_DiagnosticRepositoryId,
                                                   v_ServiceId = ddd.v_ServiceId,
                                                   v_ComponentId = ddd.v_ComponentId,
                                                   v_MasterRestrictionId = ddd.v_MasterRestrictionId,
                                                   v_RestrictionName = eee.v_Name,

                                               }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new RestrictionList
                {
                    i_Item = index + 1,
                    v_RestrictionId = a.v_RestrictionId,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_MasterRestrictionId = a.v_MasterRestrictionId,
                    v_RestrictionName = a.v_RestrictionName,
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        // Alejandro 
        public List<DiagnosticRepositoryList> GetServiceComponentConclusionesDxServiceIdReport(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = (from ccc in dbContext.diagnosticrepository
                             join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                             from bbb in J7_join.DefaultIfEmpty()

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       

                             join fff in dbContext.systemparameter on new { a = ccc.i_PreQualificationId.Value, b = 137 } // PRE-CALIFICACION
                                                                 equals new { a = fff.i_ParameterId, b = fff.i_GroupId } into J5_join
                             from fff in J5_join.DefaultIfEmpty()

                             join ggg in dbContext.systemparameter on new { a = ccc.i_FinalQualificationId.Value, b = 138 } //CALIFICACION FINAL
                                                                 equals new { a = ggg.i_ParameterId, b = ggg.i_GroupId } into J4_join
                             from ggg in J4_join.DefaultIfEmpty()

                             join hhh in dbContext.systemparameter on new { a = ccc.i_DiagnosticTypeId.Value, b = 139 } // TIPO DE DX [Enfermedad comun, etc]
                                                                     equals new { a = hhh.i_ParameterId, b = hhh.i_GroupId } into J3_join
                             from hhh in J3_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                             (ccc.i_IsDeleted == 0) &&
                             (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                             ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)
                             orderby bbb.v_Name

                             select new DiagnosticRepositoryList
                             {
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 v_ServiceId = ccc.v_ServiceId,
                                 v_ComponentId = ccc.v_ComponentId,
                                 v_DiseasesId = ccc.v_DiseasesId,
                                 v_DiseasesName = ddd.v_Name,
                                 v_ComponentName = bbb.v_Name,
                                 v_PreQualificationName = fff.v_Value1,
                                 v_FinalQualificationName = ggg.v_Value1,
                                 v_DiagnosticTypeName = hhh.v_Value1,
                                 v_ComponentFieldsId = ccc.v_ComponentFieldId,
                                 v_Dx_CIE10 = ddd.v_CIE10Id,
                                 i_DiagnosticTypeId = ccc.i_DiagnosticTypeId
                             }).ToList();

                // add the sequence number on the fly
                var finalQuery = query.Select((a, index) => new DiagnosticRepositoryList
                {
                    i_Item = index + 1,
                    v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                    v_ServiceId = a.v_ServiceId,
                    v_ComponentId = a.v_ComponentId,
                    v_DiseasesId = a.v_DiseasesId,
                    v_DiseasesName = a.v_DiseasesName,
                    v_ComponentName = a.v_ComponentName,
                    v_DiagnosticTypeName = a.v_DiagnosticTypeName,
                    Recomendations = GetServiceRecommendationByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
                    Restrictions = GetServiceRestrictionByDiagnosticRepositoryIdReport(a.v_DiagnosticRepositoryId),
                    v_ComponentFieldsId = a.v_ComponentFieldsId,
                    v_Dx_CIE10 = a.v_Dx_CIE10,
                    i_DiagnosticTypeId = a.i_DiagnosticTypeId
                }).ToList();

                return finalQuery;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //AMC
        public List<DiagnosticRepositoryList> GetDxByServiceId(string pstrServiceId)
        {
            //mon.IsActive = true;

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var query = (from ccc in dbContext.diagnosticrepository
                                 join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                 from bbb in J7_join.DefaultIfEmpty()
                                 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos                       
                                 where (ccc.v_ServiceId == pstrServiceId) &&
                                     (ccc.i_IsDeleted == isDeleted) &&
                                     (ccc.i_FinalQualificationId == definitivo ||
                                     ccc.i_FinalQualificationId == presuntivo)
                                 //orderby bbb.v_Name

                                 select new DiagnosticRepositoryList
                                 {
                                     v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                     v_ServiceId = ccc.v_ServiceId,
                                     v_ComponentId = ccc.v_ComponentId,
                                     v_DiseasesId = ccc.v_DiseasesId,
                                     v_DiseasesName = ddd.v_Name,
                                     v_ComponentName = bbb.v_Name
                                 }).ToList();

                    return query;
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }



        // Alejandro
        public bool IsPsicoExamIntoServiceComponent(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = "N002-ME000000033" }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }
                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (E.i_IsRequiredId == (int)SiNo.SI)

                                 select new ServiceList
                                 {
                                     v_ServiceComponentId = E.v_ServiceComponentId
                                 }).FirstOrDefault();

                if (objEntity != null)
                {
                    return true;
                }
            }
            catch (Exception)
            {

                throw;
            }

            return false;

        }



        //AMC

        public List<ServiceList> ReportAscensoGrandesAlturas(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber,
                                     i_SexTypeId = B.i_SexTypeId.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                     ApellidosDoctor = H.v_FirstLastName + " " + H.v_SecondLastName,
                                     NombreDoctor = H.v_FirstName,
                                     CMP = pme.v_ProfessionalCode,
                                     DireccionDoctor = H.v_AdressLocation,
                                     EmpresaEmpleadora = J.v_Name,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     v_ServiceComponentId = E.v_ServiceComponentId
                                 });           

                var MedicalCenter = GetInfoMedicalCenter(); 

                var funcionesVitales = ReportFuncionesVitales(pstrserviceId, Constants.FUNCIONES_VITALES_ID);
                var antropometria = ReportAntropometria(pstrserviceId, Constants.ANTROPOMETRIA_ID);

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {
                               v_ServiceId = a.v_ServiceId,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               v_PersonId = a.v_PersonId,
                               v_NamePacient = a.v_NamePacient,
                               DireccionPaciente = a.DireccionPaciente,
                               v_Surnames = a.v_Surnames,
                               d_BirthDate = a.d_BirthDate,
                               i_AgePacient = GetAge(a.d_BirthDate.Value),
                               d_ServiceDate = a.d_ServiceDate,
                               v_DocNumber = a.v_DocNumber,
                               i_SexTypeId = a.i_SexTypeId,
                               FirmaMedico = a.FirmaMedico,
                               Anemia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_ANEMIA_ID, "NOCOMBO", 0, "SI"),
                               Cirugia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_CIRUGIA_MAYOR_CRECIENTE_ID, "NOCOMBO", 0, "SI"),
                               Desordenes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DESORDENES_COAGULACION_ID, "NOCOMBO", 0, "SI"),
                               Diabetes = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_DIABETES_MELLITUS_ID, "NOCOMBO", 0, "SI"),
                               Hipertension = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_HIPERTENSION_ARTERIAL_ID, "NOCOMBO", 0, "SI"),
                               Embarazo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_EMBARAZO_ID, "NOCOMBO", 0, "SI"),
                               ProbNeurologicos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_NEUROLOGICOS_ID, "NOCOMBO", 0, "SI"),
                               Infecciones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_INFECCIONES_RECIENTES_ID, "NOCOMBO", 0, "SI"),
                               Obesidad = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OBESIDAD_MORBIDA_ID, "NOCOMBO", 0, "SI"),
                               ProCardiacos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_CARDIACOS_ID, "NOCOMBO", 0, "SI"),
                               ProRespiratorios = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_RESPIRATORIOS_ID, "NOCOMBO", 0, "SI"),
                               ProOftalmologico = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_OFTALMOLOGICOS_ID, "NOCOMBO", 0, "SI"),
                               ProDigestivo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_PROBLEMAS_DIGESTIVOS_ID, "NOCOMBO", 0, "SI"),
                               Apnea = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APNEA_SUEÑO_ID, "NOCOMBO", 0, "SI"),
                               Otra = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_OTRA_CONDICON_ID, "NOCOMBO", 0, "SI"),
                               Alergia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ALERGIAS_ID, "NOCOMBO", 0, "SI"),
                               MedicacionActual = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_USO_MEDICACION_ACTUAL_ID, "NOCOMBO", 0, "SI"),
                               AptoAscenderAlturas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_APTO_ASCENDER_GRANDES_ALTURAS_ID, "SICOMBO", 163, "NO"),
                               ActividadRealizar = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ASCENSO_GRANDES_ALTURAS_ACTIVIDAD_REALIZAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               ApellidosDoctor = a.ApellidosDoctor,
                               NombreDoctor = a.NombreDoctor,
                               CMP = a.CMP,
                               DireccionDoctor = a.DireccionDoctor,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               Descripcion = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ALTURA_7D_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                             
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ServiceList> ReportFuncionesVitales(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

                                 //join G in dbContext.professional on new { a = F.v_PersonId }
                                 //                                     equals new { a = G.v_PersonId } into G_join
                                 //from G in G_join.DefaultIfEmpty()

                                 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

                                 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber


                                 });

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {

                               FC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID, "NOCOMBO", 0, "SI"),
                               PA = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAS_ID, "NOCOMBO", 0, "SI"),
                               FR = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID, "NOCOMBO", 0, "SI"),
                               //IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_im_ID, "NOCOMBO", 0, "SI"),
                               Sat = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_SAT_O2_ID, "NOCOMBO", 0, "SI"),
                               PAD = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.FUNCIONES_VITALES_PAD_ID, "NOCOMBO", 0, "SI")

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ServiceList> ReportAntropometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId

                                 //join G in dbContext.professional on new { a = F.v_PersonId }
                                 //                                     equals new { a = G.v_PersonId } into G_join
                                 //from G in G_join.DefaultIfEmpty()

                                 //join H in dbContext.person on F.v_PersonId equals H.v_PersonId

                                 //join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 //join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


                                 where A.v_ServiceId == pstrserviceId
                                 select new ServiceList
                                 {
                                     v_PersonId = A.v_PersonId,
                                     v_NamePacient = B.v_FirstName,
                                     v_Surnames = B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DireccionPaciente = B.v_AdressLocation,
                                     d_BirthDate = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     v_DocNumber = B.v_DocNumber


                                 }).ToList();

                var sql = (from a in objEntity.ToList()
                           select new ServiceList
                           {
                               IMC = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_IMC_ID, "NOCOMBO", 0, "SI"),
                               Peso = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_PESO_ID, "NOCOMBO", 0, "SI"),
                               talla = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.ANTROPOMETRIA_TALLA_ID, "NOCOMBO", 0, "SI"),
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string GetServiceComponentFielValue(string pstrServiceId, string pstrComponentId, string pstrFieldId, string Type, int pintParameter, string pstrConX)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                string xx = "";
                if (Type == "NOCOMBO")
                {
                    oServiceComponentFieldValuesList = oServiceBL.ValoresComponente(pstrServiceId, pstrComponentId);
                    xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                }
                else
                {
                    oServiceComponentFieldValuesList = oServiceBL.ValoresExamenComponete(pstrServiceId, pstrComponentId, pintParameter);
                    if (pstrConX == "SI")
                    {
                        xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                    }
                    else
                    {
                        xx = oServiceComponentFieldValuesList.Count() == 0 ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1Name;
                    }

                }

                return xx;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public class Data
        {
            public string _Key { get; set; }
            public string StringData { get; set; }
        }

        public List<ServiceComponentFieldValuesList> GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrpath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();


                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
                //var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                #region Comentado

                oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);

                List<Data> x = new List<Data>();
                Data y = new Data();

                x.Add(new Data() { _Key = "", StringData = "" });
                x.Add(new Data() { _Key = Constants.D11_1, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_2, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_3, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_4, StringData = "11" });
                x.Add(new Data() { _Key = Constants.D11_5, StringData = "11" });

                x.Add(new Data() { _Key = Constants.D12_1, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_2, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_3, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_4, StringData = "12" });
                x.Add(new Data() { _Key = Constants.D12_5, StringData = "12" });

                x.Add(new Data() { _Key = Constants.D13_1, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_2, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_3, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_4, StringData = "13" });
                x.Add(new Data() { _Key = Constants.D13_5, StringData = "13" });

                x.Add(new Data() { _Key = Constants.D14_1, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_2, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_3, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_4, StringData = "14" });
                x.Add(new Data() { _Key = Constants.D14_5, StringData = "14" });

                x.Add(new Data() { _Key = Constants.D15_1, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_2, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_3, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_4, StringData = "15" });
                x.Add(new Data() { _Key = Constants.D15_5, StringData = "15" });

                x.Add(new Data() { _Key = Constants.D16_1, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_2, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_3, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_4, StringData = "16" });
                x.Add(new Data() { _Key = Constants.D16_5, StringData = "16" });

                x.Add(new Data() { _Key = Constants.D17_1, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_2, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_3, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_4, StringData = "17" });
                x.Add(new Data() { _Key = Constants.D17_5, StringData = "17" });

                x.Add(new Data() { _Key = Constants.D18_1, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_2, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_3, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_4, StringData = "18" });
                x.Add(new Data() { _Key = Constants.D18_5, StringData = "18" });

                //--------------
                x.Add(new Data() { _Key = Constants.D21_1, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_2, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_3, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_4, StringData = "21" });
                x.Add(new Data() { _Key = Constants.D21_5, StringData = "21" });

                x.Add(new Data() { _Key = Constants.D22_1, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_2, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_3, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_4, StringData = "22" });
                x.Add(new Data() { _Key = Constants.D22_5, StringData = "22" });

                x.Add(new Data() { _Key = Constants.D23_1, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_2, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_3, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_4, StringData = "23" });
                x.Add(new Data() { _Key = Constants.D23_5, StringData = "23" });

                x.Add(new Data() { _Key = Constants.D24_1, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_2, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_3, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_4, StringData = "24" });
                x.Add(new Data() { _Key = Constants.D24_5, StringData = "24" });

                x.Add(new Data() { _Key = Constants.D25_1, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_2, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_3, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_4, StringData = "25" });
                x.Add(new Data() { _Key = Constants.D25_5, StringData = "25" });

                x.Add(new Data() { _Key = Constants.D26_1, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_2, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_3, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_4, StringData = "26" });
                x.Add(new Data() { _Key = Constants.D26_5, StringData = "26" });

                x.Add(new Data() { _Key = Constants.D27_1, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_2, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_3, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_4, StringData = "27" });
                x.Add(new Data() { _Key = Constants.D27_5, StringData = "27" });

                x.Add(new Data() { _Key = Constants.D28_1, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_2, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_3, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_4, StringData = "28" });
                x.Add(new Data() { _Key = Constants.D28_5, StringData = "28" });
                //------------------------
                x.Add(new Data() { _Key = Constants.D31_1, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_2, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_3, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_4, StringData = "31" });
                x.Add(new Data() { _Key = Constants.D31_5, StringData = "31" });

                x.Add(new Data() { _Key = Constants.D32_1, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_2, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_3, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_4, StringData = "32" });
                x.Add(new Data() { _Key = Constants.D32_5, StringData = "32" });

                x.Add(new Data() { _Key = Constants.D33_1, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_2, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_3, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_4, StringData = "33" });
                x.Add(new Data() { _Key = Constants.D33_5, StringData = "33" });

                x.Add(new Data() { _Key = Constants.D34_1, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_2, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_3, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_4, StringData = "34" });
                x.Add(new Data() { _Key = Constants.D34_5, StringData = "34" });

                x.Add(new Data() { _Key = Constants.D35_1, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_2, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_3, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_4, StringData = "35" });
                x.Add(new Data() { _Key = Constants.D35_5, StringData = "35" });

                x.Add(new Data() { _Key = Constants.D36_1, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_2, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_3, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_4, StringData = "36" });
                x.Add(new Data() { _Key = Constants.D36_5, StringData = "36" });

                x.Add(new Data() { _Key = Constants.D37_1, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_2, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_3, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_4, StringData = "37" });
                x.Add(new Data() { _Key = Constants.D37_5, StringData = "37" });

                x.Add(new Data() { _Key = Constants.D38_1, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_2, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_3, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_4, StringData = "38" });
                x.Add(new Data() { _Key = Constants.D38_5, StringData = "38" });
                //---------------------
                x.Add(new Data() { _Key = Constants.D41_1, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_2, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_3, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_4, StringData = "41" });
                x.Add(new Data() { _Key = Constants.D41_5, StringData = "41" });

                x.Add(new Data() { _Key = Constants.D42_1, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_2, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_3, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_4, StringData = "42" });
                x.Add(new Data() { _Key = Constants.D42_5, StringData = "42" });

                x.Add(new Data() { _Key = Constants.D43_1, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_2, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_3, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_4, StringData = "43" });
                x.Add(new Data() { _Key = Constants.D43_5, StringData = "43" });

                x.Add(new Data() { _Key = Constants.D44_1, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_2, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_3, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_4, StringData = "44" });
                x.Add(new Data() { _Key = Constants.D44_5, StringData = "44" });

                x.Add(new Data() { _Key = Constants.D45_1, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_2, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_3, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_4, StringData = "45" });
                x.Add(new Data() { _Key = Constants.D45_5, StringData = "45" });

                x.Add(new Data() { _Key = Constants.D46_1, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_2, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_3, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_4, StringData = "46" });
                x.Add(new Data() { _Key = Constants.D46_5, StringData = "46" });

                x.Add(new Data() { _Key = Constants.D47_1, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_2, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_3, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_4, StringData = "47" });
                x.Add(new Data() { _Key = Constants.D47_5, StringData = "47" });

                x.Add(new Data() { _Key = Constants.D48_1, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_2, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_3, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_4, StringData = "48" });
                x.Add(new Data() { _Key = Constants.D48_5, StringData = "48" });

                var rangodientes = x.ToList();
                foreach (var item in oServiceComponentFieldValuesList1)
                {

                    var NroDiente = rangodientes.Find(p => p._Key == item.v_ComponentFieldId) == null ? "" : rangodientes.Find(p => p._Key == item.v_ComponentFieldId).StringData;//.f x[item.v_ComponentFieldId];
                    var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == item.v_ComponentFieldId)).v_Value1;
                    #region SWITCH
                    switch (NroDiente)
                    {
                        case "18":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(18);
                            }
                            break;
                        case "17":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(17);
                            }
                            break;
                        case "16":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(16);
                            }
                            break;
                        case "15":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(15);
                            }
                            break;
                        case "14":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(14);
                            }
                            break;
                        case "13":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(13);
                            }
                            break;
                        case "12":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(12);
                            }
                            break;
                        case "11":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(11);
                            }
                            break;

                        //--------------------------------------

                        case "21":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(21);
                            }
                            break;
                        case "22":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(22);
                            }
                            break;
                        case "23":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(23);
                            }
                            break;
                        case "24":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(24);
                            }
                            break;
                        case "25":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(25);
                            }
                            break;
                        case "26":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(26);
                            }
                            break;
                        case "27":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(27);
                            }
                            break;
                        case "28":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(28);
                            }
                            break;

                        //------------------------------

                        case "31":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(31);
                            }
                            break;
                        case "32":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(32);
                            }
                            break;
                        case "33":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(33);
                            }
                            break;
                        case "34":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(34);
                            }
                            break;
                        case "35":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(35);
                            }
                            break;
                        case "36":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(36);
                            }
                            break;
                        case "37":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(37);
                            }
                            break;
                        case "38":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(38);
                            }
                            break;

                        //------------------------------

                        case "41":
                            if (valorDiente == "3")
                            {
                                //ContadorD18 = 1;
                                ListaDiente.Add(41);
                            }
                            break;
                        case "42":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(42);
                            }
                            break;
                        case "43":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(43);
                            }
                            break;
                        case "44":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(44);
                            }
                            break;
                        case "45":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(45);
                            }
                            break;
                        case "46":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(46);
                            }
                            break;
                        case "47":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(47);
                            }
                            break;
                        case "48":
                            if (valorDiente == "3")
                            {
                                ListaDiente.Add(48);
                            }
                            break;
                        default:
                            break;
                    }
                    #endregion

                }
                #endregion



                return oServiceComponentFieldValuesList;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
                //var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return oServiceComponentFieldValuesList;

            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ValorComponenteList> GetListValueComponent(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {

                var PreQuery = (from A in dbContext.service
                                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                where A.v_ServiceId == pstrServiceId
                                        && B.i_IsDeleted == isDeleted
                                        && C.i_IsDeleted == isDeleted
                                select new ValorComponenteList
                                {
                                    ServicioId = A.v_ServiceId,
                                    Valor = D.v_Value1,
                                    NombreComponente = H.v_Name,
                                    IdComponente = C.v_ComponentId,
                                    NombreCampo = G.v_TextLabel,
                                    IdCampo = C.v_ComponentFieldId
                                }

                           ).ToList();

                //var value = (from A in dbContext.service
                //             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                //             join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                //             join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                //             join E in dbContext.component on B.v_ComponentId equals E.v_ComponentId
                //             join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                //             join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                //             join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                //             where A.v_ServiceId == pstrServiceId
                //                     && H.v_ComponentId == pstrComponentId
                //                     && B.i_IsDeleted == isDeleted
                //                     && C.i_IsDeleted == isDeleted
                //             select D.v_Value1).SingleOrDefault<string>();

                return PreQuery;
            }
            catch (Exception)
            {

                throw;
            }

        }


        public List<ReportOdontograma> ReportOdontograma(string pstrserviceId, string pstrComponentId, string Path)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**************************************************************************************

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportOdontograma
                                 {
                                     IdServicio = A.v_ServiceId,
                                     Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Fecha = A.d_ServiceDate.Value,
                                     Puesto = B.v_CurrentOccupation,
                                     Ficha = E.v_ServiceComponentId,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = J.v_Name

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var ValorDiente = GetValueOdontograma(pstrserviceId, pstrComponentId, Path).ToList();
                var ValorDienteAusente = GetValueOdontogramaAusente(pstrserviceId, pstrComponentId, Path);
                var ValorCampos = GetListValueComponent(pstrserviceId, pstrComponentId);

                var sql = (from a in objEntity.ToList()
                           select new ReportOdontograma
                           {
                               IdServicio = a.IdServicio,
                               Trabajador = a.Trabajador,
                               Fecha = a.Fecha,
                               Puesto = a.Puesto,
                               Ficha = a.Ficha,
                               FirmaMedico = a.FirmaMedico,
                               Empresa = a.Empresa,
                               Tabaco = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TABACO_ID).Valor,
                               Diabetes = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_DIABETES_ID).Valor,
                               Tbc = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_TBC_ID).Valor,
                               Ets = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_ETS_ID).Valor,
                               Hematopatias = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_HEMATOPATIAS_ID).Valor,
                               Obesidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_OBESIDAD_ID).Valor,
                               Periodontitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_PERIODONTITIS_ID).Valor,
                               Movilidad = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_MOVILIDAD_ID).Valor,
                               Recesion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_RECESION_ID).Valor,
                               Exudacion = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_EXUDACION_ID).Valor,
                               Gingivitis = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_GINGIVITIS_ID).Valor,
                               BolsaPeriodontales = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_BOLSA_PERIODONTALES_ID).Valor,
                               Diagnosticos = ValorCampos.Count() == 0 || ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null ? string.Empty : ValorCampos.Find(p => p.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,

                               PiezasCaries = GetCantidadCaries(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_CARIES_ID),
                               PiezasAusentes = GetCantidadAusentes(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PIEZAS_AUSENTES_ID),

                               ////PiezasCuracion = GetCantidad(a.IdServicio, pstrComponentId),
                               //Corona = GetCantidad(a.IdServicio, pstrComponentId)[0].ToString(),
                               //Exodoncia = GetCantidad(a.IdServicio, pstrComponentId)[1].ToString(),
                               //Implante = GetCantidad(a.IdServicio, pstrComponentId)[2].ToString(),
                               //Ppr = GetCantidad(a.IdServicio, pstrComponentId)[3].ToString(),
                               //ProtesisTotal = GetCantidad(a.IdServicio, pstrComponentId)[4].ToString(),

                               PlacaBacteriana = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_PLACA_BACTERIANA_ID),
                               RemanentesReticulares = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_REMANENTES_RETICULARES_ID),
                               OtrosExamen = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_OTROS_EXAMEN_ID),
                               Aptitud = GetValueOdontograma1(a.IdServicio, pstrComponentId, Constants.ODONTOGRAMA_APTITUD_ID),


                               Diente181 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_1).v_Value1,
                               Diente182 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_2).v_Value1,
                               Diente183 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_3).v_Value1,
                               Diente184 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_4).v_Value1,
                               Diente185 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D18_5).v_Value1,
                               Diente186 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D18_6).v_Value1,

                               Diente171 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_1).v_Value1,
                               Diente172 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_2).v_Value1,
                               Diente173 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_3).v_Value1,
                               Diente174 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_4).v_Value1,
                               Diente175 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D17_5).v_Value1,
                               Diente176 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D17_6).v_Value1,


                               Diente161 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_1).v_Value1,
                               Diente162 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_2).v_Value1,
                               Diente163 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_3).v_Value1,
                               Diente164 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_4).v_Value1,
                               Diente165 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D16_5).v_Value1,
                               Diente166 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D16_6).v_Value1,


                               Diente151 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_1).v_Value1,
                               Diente152 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_2).v_Value1,
                               Diente153 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_3).v_Value1,
                               Diente154 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_4).v_Value1,
                               Diente155 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D15_5).v_Value1,
                               Diente156 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D15_6).v_Value1,


                               Diente141 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_1).v_Value1,
                               Diente142 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_2).v_Value1,
                               Diente143 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_3).v_Value1,
                               Diente144 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_4).v_Value1,
                               Diente145 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D14_5).v_Value1,
                               Diente146 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D14_6).v_Value1,


                               Diente131 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_1).v_Value1,
                               Diente132 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_2).v_Value1,
                               Diente133 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_3).v_Value1,
                               Diente134 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_4).v_Value1,
                               Diente135 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D13_5).v_Value1,
                               Diente136 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D13_6).v_Value1,


                               Diente121 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_1).v_Value1,
                               Diente122 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_2).v_Value1,
                               Diente123 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_3).v_Value1,
                               Diente124 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_4).v_Value1,
                               Diente125 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D12_5).v_Value1,
                               Diente126 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D12_6).v_Value1,


                               Diente111 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_1).v_Value1,
                               Diente112 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_2).v_Value1,
                               Diente113 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_3).v_Value1,
                               Diente114 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_4).v_Value1,
                               Diente115 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D11_5).v_Value1,
                               Diente116 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D11_6).v_Value1,


                               //-------------------------------------------------------------------------------

                               Diente211 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_1).v_Value1,
                               Diente212 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_2).v_Value1,
                               Diente213 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_3).v_Value1,
                               Diente214 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_4).v_Value1,
                               Diente215 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D21_5).v_Value1,
                               Diente216 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D21_6).v_Value1,


                               Diente221 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_1).v_Value1,
                               Diente222 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_2).v_Value1,
                               Diente223 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_3).v_Value1,
                               Diente224 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_4).v_Value1,
                               Diente225 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D22_5).v_Value1,
                               Diente226 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D22_6).v_Value1,


                               Diente231 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_1).v_Value1,
                               Diente232 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_2).v_Value1,
                               Diente233 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_3).v_Value1,
                               Diente234 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_4).v_Value1,
                               Diente235 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D23_5).v_Value1,
                               Diente236 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D23_6).v_Value1,


                               Diente241 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_1).v_Value1,
                               Diente242 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_2).v_Value1,
                               Diente243 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_3).v_Value1,
                               Diente244 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_4).v_Value1,
                               Diente245 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D24_5).v_Value1,
                               Diente246 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D24_6).v_Value1,


                               Diente251 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_1).v_Value1,
                               Diente252 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_2).v_Value1,
                               Diente253 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_3).v_Value1,
                               Diente254 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_4).v_Value1,
                               Diente255 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D25_5).v_Value1,
                               Diente256 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D25_6).v_Value1,


                               Diente261 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_1).v_Value1,
                               Diente262 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_2).v_Value1,
                               Diente263 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_3).v_Value1,
                               Diente264 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_4).v_Value1,
                               Diente265 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D26_5).v_Value1,
                               Diente266 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D26_6).v_Value1,


                               Diente271 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_1).v_Value1,
                               Diente272 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_2).v_Value1,
                               Diente273 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_3).v_Value1,
                               Diente274 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_4).v_Value1,
                               Diente275 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D27_5).v_Value1,
                               Diente276 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D27_6).v_Value1,


                               Diente281 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_1).v_Value1,
                               Diente282 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_2).v_Value1,
                               Diente283 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_3).v_Value1,
                               Diente284 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_4).v_Value1,
                               Diente285 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D28_5).v_Value1,
                               Diente286 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D28_6).v_Value1,


                               //-------------------------------------------------------------------------------

                               Diente311 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_1).v_Value1,
                               Diente312 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_2).v_Value1,
                               Diente313 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_3).v_Value1,
                               Diente314 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_4).v_Value1,
                               Diente315 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D31_5).v_Value1,
                               Diente316 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D31_6).v_Value1,


                               Diente321 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_1).v_Value1,
                               Diente322 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_2).v_Value1,
                               Diente323 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_3).v_Value1,
                               Diente324 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_4).v_Value1,
                               Diente325 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D32_5).v_Value1,
                               Diente326 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D32_6).v_Value1,


                               Diente331 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_1).v_Value1,
                               Diente332 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_2).v_Value1,
                               Diente333 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_3).v_Value1,
                               Diente334 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_4).v_Value1,
                               Diente335 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D33_5).v_Value1,
                               Diente336 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D33_6).v_Value1,


                               Diente341 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_1).v_Value1,
                               Diente342 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_2).v_Value1,
                               Diente343 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_3).v_Value1,
                               Diente344 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_4).v_Value1,
                               Diente345 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D34_5).v_Value1,
                               Diente346 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D34_6).v_Value1,


                               Diente351 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_1).v_Value1,
                               Diente352 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_2).v_Value1,
                               Diente353 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_3).v_Value1,
                               Diente354 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_4).v_Value1,
                               Diente355 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D35_5).v_Value1,
                               Diente356 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D35_6).v_Value1,


                               Diente361 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_1).v_Value1,
                               Diente362 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_2).v_Value1,
                               Diente363 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_3).v_Value1,
                               Diente364 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_4).v_Value1,
                               Diente365 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D36_5).v_Value1,
                               Diente366 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D36_6).v_Value1,


                               Diente371 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_1).v_Value1,
                               Diente372 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_2).v_Value1,
                               Diente373 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_3).v_Value1,
                               Diente374 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_4).v_Value1,
                               Diente375 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D37_5).v_Value1,
                               Diente376 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D37_6).v_Value1,


                               Diente381 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_1).v_Value1,
                               Diente382 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_2).v_Value1,
                               Diente383 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_3).v_Value1,
                               Diente384 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_4).v_Value1,
                               Diente385 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D38_5).v_Value1,
                               Diente386 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D38_6).v_Value1,

                               //-------------------------------------------------------------------------------

                               Diente411 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_1).v_Value1,
                               Diente412 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_2).v_Value1,
                               Diente413 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_3).v_Value1,
                               Diente414 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_4).v_Value1,
                               Diente415 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D41_5).v_Value1,
                               Diente416 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D41_6).v_Value1,


                               Diente421 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_1).v_Value1,
                               Diente422 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_2).v_Value1,
                               Diente423 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_3).v_Value1,
                               Diente424 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_4).v_Value1,
                               Diente425 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D42_5).v_Value1,
                               Diente426 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D42_6).v_Value1,


                               Diente431 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_1).v_Value1,
                               Diente432 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_2).v_Value1,
                               Diente433 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_3).v_Value1,
                               Diente434 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_4).v_Value1,
                               Diente435 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D43_5).v_Value1,
                               Diente436 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D43_6).v_Value1,


                               Diente441 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_1).v_Value1,
                               Diente442 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_2).v_Value1,
                               Diente443 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_3).v_Value1,
                               Diente444 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_4).v_Value1,
                               Diente445 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D44_5).v_Value1,
                               Diente446 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D44_6).v_Value1,


                               Diente451 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_1).v_Value1,
                               Diente452 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_2).v_Value1,
                               Diente453 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_3).v_Value1,
                               Diente454 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_4).v_Value1,
                               Diente455 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D45_5).v_Value1,
                               Diente456 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D45_6).v_Value1,

                               Diente461 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_1).v_Value1,
                               Diente462 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_2).v_Value1,
                               Diente463 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_3).v_Value1,
                               Diente464 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_4).v_Value1,
                               Diente465 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D46_5).v_Value1,
                               Diente466 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D46_6).v_Value1,


                               Diente471 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_1).v_Value1,
                               Diente472 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_2).v_Value1,
                               Diente473 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_3).v_Value1,
                               Diente474 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_4).v_Value1,
                               Diente475 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D47_5).v_Value1,
                               Diente476 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D47_6).v_Value1,


                               Diente481 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_1).v_Value1,
                               Diente482 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_2).v_Value1,
                               Diente483 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_3).v_Value1,
                               Diente484 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_4).v_Value1,
                               Diente485 = ValorDiente.Count() == 0 || ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5) == null ? string.Empty : ValorDiente.Find(p => p.v_ComponentFieldId == Constants.D48_5).v_Value1,
                               Diente486 = ValorDienteAusente.Count() == 0 || ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6) == null ? string.Empty : ValorDienteAusente.Find(p => p.v_ComponentFieldId == Constants.D48_6).v_Value1,


                               PiezasCuracion = NroDientesCurados(ListaDiente),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private int NroDientesCurados(List<int> ListaD)
        {

            var x = ListaD.Distinct();

            return x.Count();
        }

        public string GetValueOdontograma(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrpath, string NroDiente)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList1 = new List<ServiceComponentFieldValuesList>();
                oServiceComponentFieldValuesList1 = ValoresComponenteOdontogramaValue1(pstrServiceId, pstrComponentId);
                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma(pstrServiceId, pstrComponentId, pstrpath);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;
                var valorDiente = oServiceComponentFieldValuesList1.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList1.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;


                switch (NroDiente)
                {
                    case "18":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(18);
                        }
                        break;
                    case "17":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(17);
                        }
                        break;
                    case "16":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(16);
                        }
                        break;
                    case "15":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(15);
                        }
                        break;
                    case "14":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(14);
                        }
                        break;
                    case "13":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(13);
                        }
                        break;
                    case "12":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(12);
                        }
                        break;
                    case "11":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(11);
                        }
                        break;

                    //--------------------------------------

                    case "21":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(21);
                        }
                        break;
                    case "22":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(22);
                        }
                        break;
                    case "23":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(23);
                        }
                        break;
                    case "24":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(24);
                        }
                        break;
                    case "25":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(25);
                        }
                        break;
                    case "26":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(26);
                        }
                        break;
                    case "27":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(27);
                        }
                        break;
                    case "28":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(28);
                        }
                        break;

                    //------------------------------

                    case "31":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(31);
                        }
                        break;
                    case "32":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(32);
                        }
                        break;
                    case "33":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(33);
                        }
                        break;
                    case "34":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(34);
                        }
                        break;
                    case "35":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(35);
                        }
                        break;
                    case "36":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(36);
                        }
                        break;
                    case "37":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(37);
                        }
                        break;
                    case "38":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(38);
                        }
                        break;

                    //------------------------------

                    case "41":
                        if (valorDiente == "3")
                        {
                            //ContadorD18 = 1;
                            ListaDiente.Add(41);
                        }
                        break;
                    case "42":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(42);
                        }
                        break;
                    case "43":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(43);
                        }
                        break;
                    case "44":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(44);
                        }
                        break;
                    case "45":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(45);
                        }
                        break;
                    case "46":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(46);
                        }
                        break;
                    case "47":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(47);
                        }
                        break;
                    case "48":
                        if (valorDiente == "3")
                        {
                            ListaDiente.Add(48);
                        }
                        break;
                    default:
                        break;
                }

                return xx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaValue1(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)

                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }


        public string GetValueOdontograma1(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return xx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string GetCantidadCaries(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                string Retornar = "0";
                string[] componentId = null;
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                componentId = xx.Split(';');
                if (componentId[0] == "")
                {
                    Retornar = "0";
                }
                else
                {
                    Retornar = componentId.Count().ToString();
                }
                return Retornar;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public int[] GetCantidad(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                int ContadorCorona = 0;
                int ContadorExodoncia = 0;
                int ContadorImplante = 0;
                int ContadorPPR = 0;
                int ContadorProtesisTotal = 0;

                int[] xxx = new int[5];

                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);

                for (int i = 0; i < oServiceComponentFieldValuesList.Count(); i++)
                {

                    #region Region 1

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D11_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D12_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D13_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D14_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D15_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D16_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D17_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D18_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 2

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D21_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D22_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D23_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D24_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D25_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D26_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D27_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D28_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 3

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D31_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D32_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D33_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D34_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D35_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D36_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D37_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D38_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion

                    #region Region 4

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D41_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D42_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D43_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D44_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D45_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D46_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D47_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    if (oServiceComponentFieldValuesList[i].v_ComponentFieldId == Constants.D48_6)
                    {
                        if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Corona).ToString())
                        {
                            ContadorCorona = ContadorCorona + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Exodoncia).ToString())
                        {
                            ContadorExodoncia = ContadorExodoncia + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.Implante).ToString())
                        {
                            ContadorImplante = ContadorImplante + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.PPR).ToString())
                        {
                            ContadorPPR = ContadorPPR + 1;
                        }
                        else if (oServiceComponentFieldValuesList[i].v_Value1 == ((int)LeyendaOdontograma.ProtesisTotal).ToString())
                        {
                            ContadorProtesisTotal = ContadorProtesisTotal + 1;
                        }
                    }

                    #endregion
                }

                xxx[0] = ContadorCorona;
                xxx[1] = ContadorExodoncia;
                xxx[2] = ContadorImplante;
                xxx[3] = ContadorPPR;
                xxx[4] = ContadorProtesisTotal;


                return xxx;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string GetCantidadAusentes(string pstrServiceId, string pstrComponentId, string pstrFieldId)
        {
            try
            {
                string retornar = "0";
                string[] componentId = null;
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontograma1(pstrServiceId, pstrComponentId);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? string.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                componentId = xx.Split(';');

                if (componentId[0] == "")
                {
                    retornar = "0";
                }
                else
                {
                    retornar = componentId.Count().ToString();
                }
                return retornar;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma1(string pstrServiceId, string pstrComponentId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)

                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontograma(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)
                                                                                     let range = (
                                                                                                     D.v_Value1 == "2" ? pstrPath + "\\Resources\\caries.png" :
                                                                                                      D.v_Value1 == "3" ? pstrPath + "\\Resources\\curacion.png" :
                                                                                                      string.Empty
                                                                                          )
                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         //v_ComponentId = B.v_ComponentId,
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         v_Value1 = range,
                                                                                         v_Value2 = D.v_Value1
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ReportHistoriaOcupacionalList> ReportHistoriaOcupacional(string pstrserviceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var isDeleted = 0;
                var exFisicoId = Constants.EXAMEN_FISICO_ID;
                var exFisico7C = Constants.EXAMEN_FISICO_7C_ID;

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join D in dbContext.history on B.v_PersonId equals D.v_PersonId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join sc in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisicoId }
                                                                      equals new { a = sc.v_ServiceId, b = sc.v_ComponentId } into sc_join
                                 from sc in sc_join.DefaultIfEmpty()                              

                                 join E in dbContext.systemuser on sc.i_ApprovedUpdateUserId equals E.i_SystemUserId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join F in dbContext.professional on E.v_PersonId equals F.v_PersonId into F_join
                                 from F in F_join.DefaultIfEmpty()

                                  // Examen fisico 7C *******************************************************************
                                 join sc1 in dbContext.servicecomponent on new { a = pstrserviceId, b = exFisico7C }
                                                                    equals new { a = sc1.v_ServiceId, b = sc1.v_ComponentId } into sc1_join
                                 from sc1 in sc1_join.DefaultIfEmpty()

                                 join su7c in dbContext.systemuser on sc1.i_ApprovedUpdateUserId equals su7c.i_SystemUserId into su7c_join
                                 from su7c in su7c_join.DefaultIfEmpty()

                                 join p7c in dbContext.professional on su7c.v_PersonId equals p7c.v_PersonId into p7c_join
                                 from p7c in p7c_join.DefaultIfEmpty()

                                 //******************************************************************************

                                 // Ubigeo de la persona *******************************************************
                                 join dep in dbContext.datahierarchy on new { a = B.i_DepartmentId.Value, b = groupUbigeo }
                                                      equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                                 from dep in dep_join.DefaultIfEmpty()

                                 join prov in dbContext.datahierarchy on new { a = B.i_ProvinceId.Value, b = groupUbigeo }
                                                       equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                                 from prov in prov_join.DefaultIfEmpty()

                                 join distri in dbContext.datahierarchy on new { a = B.i_DistrictId.Value, b = groupUbigeo }
                                                       equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                                 from distri in distri_join.DefaultIfEmpty()
                                 //*********************************************************************************************

                                 let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                                 let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                                 let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1
                                 let del = D.i_IsDeleted == null ? 0 : D.i_IsDeleted

                                 where (A.v_ServiceId == pstrserviceId) &&
                                       (del == isDeleted)
                                 orderby D.d_StartDate descending
                                 select new ReportHistoriaOcupacionalList
                                 {
                                     IdHistory = D.v_HistoryId,
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     IdServicio = A.v_ServiceId,
                                     FNacimiento = B.d_Birthdate,
                                     Genero = B.i_SexTypeId.Value,
                                     LugarNacimiento = B.v_BirthPlace,
                                     LugarProcedencia = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima
                                     Puesto = B.v_CurrentOccupation,
                                     FechaInicio = D.d_StartDate,
                                     FechaFin = D.d_EndDate,
                                     Empresa = D.v_Organization,
                                     Altitud = D.i_GeografixcaHeight.Value,
                                     AreaTrabajo = D.v_TypeActivity,
                                     PuestoTrabajo = D.v_workstation,
                                     IdTipoOperacion = D.i_TypeOperationId.Value,
                                     Dia = A.d_ServiceDate.Value.Day,
                                     Mes = A.d_ServiceDate.Value.Month,
                                     Anio = A.d_ServiceDate.Value.Year,
                                     FirmaMedico = F.b_SignatureImage == null ? p7c.b_SignatureImage : F.b_SignatureImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           let date1 = a.FechaInicio == null ? "" : a.FechaInicio.Value.ToString("MMMM / yyyy")
                           let date2 = a.FechaFin == null ? "" : a.FechaFin.Value.ToString("MMMM / yyyy")
                           let xxx = GetYearsAndMonth(a.FechaFin, a.FechaInicio)
                           select new ReportHistoriaOcupacionalList
                           {
                               IdHistory = a.IdHistory,
                               Trabajador = a.Trabajador,
                               IdServicio = a.IdServicio,
                               FechaNacimiento = a.FNacimiento == null ? "" : a.FNacimiento.Value.ToString("dd/MM/yyyy"),
                               Genero = a.Genero,
                               LugarNacimiento = a.LugarNacimiento,
                               LugarProcedencia = a.LugarProcedencia,
                               Puesto = a.Puesto,
                               FechaInicio = a.FechaInicio,
                               FechaFin = a.FechaFin,
                               Fechas = "Fecha Ini. \n" + date1 + "\n" + "Fecha Fin. \n" + date2,
                               Empresa = a.Empresa,
                               Altitud = a.Altitud,
                               AreaTrabajo = a.AreaTrabajo,
                               PuestoTrabajo = a.PuestoTrabajo,
                               IdTipoOperacion = a.IdTipoOperacion,
                               TiempoLabor = xxx,
                               Dia = a.Dia,
                               Mes = a.Mes,
                               Anio = a.Anio,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               Peligros = ConcatenateExposiciones(a.IdHistory),
                               Epp = ConcatenateEpps(a.IdHistory),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string GetYearsAndMonth(DateTime? EndDate, DateTime? StartDate)
        {
            if (EndDate == null || StartDate == null)
            {
                return "0 años y 0 meses";
            }

            var Clase = Sigesoft.Common.Utils.YearMonthDiff(StartDate.Value, EndDate.Value);

            var totalYears = Clase.Years;
            var totalMonths = Clase.Months;

            if (totalYears == 0)
            {
                return string.Format("{0} mes(es)", totalMonths);
            }
            else if (totalMonths == 0)
            {
                return string.Format("{0} año(s)", totalYears);
            }
            else
            {
                return string.Format("{0} año(s), {1} mes(es)", totalYears, totalMonths);
            }
        }

        private string ConcatenateExposiciones(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.workstationdangers
                       join B1 in dbContext.systemparameter on new { a = a.i_DangerId.Value, b = 145 } equals new { a = B1.i_ParameterId, b = B1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                       a.i_IsDeleted == 0
                       select new
                       {
                           v_Exposicion = B1.v_Value1
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Exposicion));
        }

        private string ConcatenateEpps(string pstrHistoryId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            var qry = (from a in dbContext.typeofeep
                       join C1 in dbContext.systemparameter on new { a = a.i_TypeofEEPId.Value, b = 146 } equals new { a = C1.i_ParameterId, b = C1.i_GroupId }
                       where a.v_HistoryId == pstrHistoryId &&
                       a.i_IsDeleted == 0
                       select new
                       {
                           v_Epps = C1.v_Value1
                       }).ToList();

            return string.Join(", ", qry.Select(p => p.v_Epps));
        }

        public string GetValueOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrFieldId, string pstrPath)
        {
            try
            {
                ServiceBL oServiceBL = new ServiceBL();
                List<ServiceComponentFieldValuesList> oServiceComponentFieldValuesList = new List<ServiceComponentFieldValuesList>();

                oServiceComponentFieldValuesList = oServiceBL.ValoresComponenteOdontogramaAusente(pstrServiceId, pstrComponentId, pstrPath);
                var xx = oServiceComponentFieldValuesList.Count() == 0 || ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)) == null ? String.Empty : ((ServiceComponentFieldValuesList)oServiceComponentFieldValuesList.Find(p => p.v_ComponentFieldId == pstrFieldId)).v_Value1;

                return xx;

            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ServiceComponentFieldValuesList> ValoresComponenteOdontogramaAusente(string pstrServiceId, string pstrComponentId, string pstrPath)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


            try
            {
                List<ServiceComponentFieldValuesList> serviceComponentFieldValues = (from A in dbContext.service
                                                                                     join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                                                                     join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                                                                     join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId

                                                                                     where (A.v_ServiceId == pstrServiceId)
                                                                                           && (B.v_ComponentId == pstrComponentId)
                                                                                           && (B.i_IsDeleted == 0)
                                                                                           && (C.i_IsDeleted == 0)
                                                                                     let range = (D.v_Value1 == "1" ? pstrPath + "\\Resources\\ausent.png" :
                                                                                                 string.Empty
                                                                                                 )
                                                                                     select new ServiceComponentFieldValuesList
                                                                                     {
                                                                                         v_ComponentFieldId = C.v_ComponentFieldId,
                                                                                         //v_ComponentFieldId = G.v_ComponentFieldId,
                                                                                         //v_ComponentFielName = G.v_TextLabel,
                                                                                         v_ServiceComponentFieldsId = C.v_ServiceComponentFieldsId,
                                                                                         //v_Value1 =  D.v_Value1 == "1" ? pstrPath + "\\caries.png" ? D.v_Value1 == "2" ? pstrPath + "\\curacion.png" ?D.v_Value1 == "3" ? pstrPath + "\\ausent.png" : D.v_Value1, 
                                                                                         //v_Value1 = D.v_Value1
                                                                                         v_Value1 = range
                                                                                     }).ToList();


                return serviceComponentFieldValues;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public List<ReportRadiologico> ReportRadiologico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }
                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************                            

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId


                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportRadiologico
                                 {
                                     v_ServiceId = A.v_ServiceId,
                                     Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     ExamenSolicitado = "Radiografia de Torax (P-A)",
                                     Empresa = J.v_Name,
                                     Fecha = A.d_ServiceDate.Value,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedicoEva = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           select new ReportRadiologico
                           {
                               v_ServiceId = a.v_ServiceId,
                               Paciente = a.Paciente,
                               ExamenSolicitado = a.ExamenSolicitado,
                               Empresa = a.Empresa,
                               Fecha = a.Fecha,
                               FirmaTecnologo = a.FirmaTecnologo,
                               FirmaMedicoEva = a.FirmaMedicoEva,
                               d_BirthDate = a.d_BirthDate,
                               Edad = GetAge(a.d_BirthDate.Value),

                               Vertices = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_VERTICES_ID, "NOCOMBO", 0, "SI"),
                               CamposPulmonares = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CAMPOS_PULMONARES_ID, "NOCOMBO", 0, "SI"),
                               SenosCosto = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COSTO_ODIAFRAGMATICO_ID, "NOCOMBO", 0, "SI"),
                               SenosCardio = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SENOS_CARDIOFRENICOS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Mediastinos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIASTINOS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Silueta = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SILUETA_CARDIACA_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Indice = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INDICE_CARDIACO_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               PartesBlandas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PARTES_BLANDAS_OSEAS_ID, "NOCOMBO", 0, "SI"),
                               Conclusiones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Hilos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HILOS_ID, "NOCOMBO", 0, "SI"),
                               Hallazgos = GetDiagnosticByServiceIdAndComponent(a.v_ServiceId, pstrComponentId),
                               CodigoPlaca = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CODIGO_PLACA_ID, "NOCOMBO", 0, "SI"),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportOsteoMuscular> ReportOsteoMuscular(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 //**********************************************************************************************

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId

                                 join L in dbContext.systemparameter on new { a = I.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = L.i_ParameterId, b = L.i_GroupId } into L_join
                                 from L in L_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId

                                 select new ReportOsteoMuscular
                                 {
                                     IdServicio = A.v_ServiceId,
                                     IdSericioComponente = E.v_ServiceComponentId,
                                     Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Puesto = B.v_CurrentOccupation,
                                     Protocolo = I.v_Name,
                                     Empresa = J.v_Name,
                                     TipoExamen = L.v_Value1,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage,
                                     d_BirthDate = B.d_Birthdate.Value,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

               
                var sql = (from a in objEntity.ToList()
                           let OsteoMuscular = new ServiceBL().ValoresComponente(pstrserviceId, pstrComponentId)
                           select new ReportOsteoMuscular
                           {
                               IdServicio = a.IdServicio,
                               IdSericioComponente = a.IdSericioComponente,
                               Paciente = a.Paciente,
                               Puesto = a.Puesto,
                               Protocolo = a.Protocolo,
                               Empresa = a.Empresa,
                               TipoExamen = a.TipoExamen,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,
                               d_BirthDate = a.d_BirthDate,
                               Edad = GetAge(a.d_BirthDate.Value),

                               MetodoCarga = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_METODO_CARGA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_METODO_CARGA).v_Value1Name,
                               AntecedentesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PRESENTA_ANTECEDENTES).v_Value1,
                               AntecedentesDescripcion = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION).v_Value1,
                               PosturaSentado = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_SENTADO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_SENTADO).v_Value1,
                               PosturaPie = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_PIE) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_PIE).v_Value1,
                               PosturaForzadaSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_FORZADA) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_POSTURA_FORZADA).v_Value1,
                               MovCargaManualSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTO_MANUAL_CARGA).v_Value1,
                               PesoCarga = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PESO_CARGA)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PESO_CARGA).v_Value1,
                               MovRepetitivosSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MOVIMIENTOS_REPETITIVOS).v_Value1,
                               UsuPantallaPVDSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_USUARIO_PANTALLA_PVD).v_Value1,
                               HorasDia = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HORAS_DIA)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HORAS_DIA).v_Value1,
                               LordisisCervical = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL).v_Value1Name,
                               CifosisDorsal = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CIFOSIS_DORSAL) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CIFOSIS_DORSAL).v_Value1Name,
                               LordosisLumbar = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR).v_Value1Name,
                               EscoliosisLumbar = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR).v_Value1Name,
                               EscofiosisDorsal = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL).v_Value1Name,
                               //DolorEspalda = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA).v_Value1Name,
                               ContracturaMuscular = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR).v_Value1Name,
                               Observaciones = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_OBSERVACIONES) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_OBSERVACIONES).v_Value1,
                               RodillaDerechaVaroSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VARO).v_Value1,
                               RodillaDerechaValgoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DERECHA_VALGO).v_Value1,
                               RodillaIzquierdaVaroSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VARO).v_Value1,
                               RodillaIzquierdaValgoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_IZQUIERDA_VALGO).v_Value1,
                               PieDerechoCavoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_CAVO).v_Value1,
                               PieDerechoPlanoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_DERECHO_PLANO).v_Value1,
                               PieIzquierdoCavoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_CAVO).v_Value1,

                               PieIzquierdoPlanoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_PIE_IZQUIERDO_PLANO).v_Value1,
                               ReflejoTotulianoDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_DERECHO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_DERECHO).v_Value1Name,
                               ReflejoTotulianoIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_TOTULIANO_IZQUIERDO).v_Value1Name,
                               ReflejoAquileoDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_DERECHO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_DERECHO).v_Value1Name,
                               ReflejoAquileoIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_IZQUIERDO)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_REFLEJO_AQUILEO_IZQUIERDO).v_Value1Name,
                               TestPhalenDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_DERECHO)== null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_DERECHO).v_Value1,
                               TestPhalenIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_IZQUIERDA) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_PHALEN_IZQUIERDA).v_Value1,
                               TestTinelDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_DERECHO)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_DERECHO).v_Value1,
                               TestTinelIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_IZQUIERDO) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEST_TINEL_IZQUIERDO).v_Value1,
                               SignoLasagueIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_IZQUIERDO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_IZQUIERDO).v_Value1,
                               SignoLasagueDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_DERECHO) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_LASAGUE_DERECHO).v_Value1,
                               SignoBragardIzquierdoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_IZQUIERDO)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_IZQUIERDO).v_Value1,
                               SignoBragardDerechoSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_DERECHO) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_SIGNO_BRAGARD_DERECHO).v_Value1,

                               TemporoMadibularNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR).v_Value1,
                               TemporoMadibularObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TEMPERO_MANDIBULAR_DESCRIPCION).v_Value1,
                               HombroNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO).v_Value1,
                               HombroObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_HOMBRO_DESCRIPCION).v_Value1,
                               CodoNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO).v_Value1,
                               CodoObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CODO_DESCRIPCION).v_Value1,
                               MunecaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA).v_Value1,
                               MunecaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_MUNECA_DESCRIPCION).v_Value1,
                               InterfalangicaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS).v_Value1,
                               InterfalangicaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_INTERFALANGICAS_DESCRIPCION).v_Value1,
                               CoxoFermoralNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL).v_Value1,
                               CoxoFermoralObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COXOFEMORAL_DESCRIPCION).v_Value1,
                               RodillaNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA).v_Value1,
                               RodillaObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_RODILLA_DESCRIPCION).v_Value1,
                               TobilloPieNID = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE).v_Value1,
                               TobilloPieObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION)==null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TOBILLO_PIE_DESCRIPCION).v_Value1,

                               ColumnaCervicalSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL).v_Value1,
                               ColumnaCervicalObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_CERVICAL_DESCRIPCION).v_Value1,
                               ColumnaDorsalSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL).v_Value1,
                               ColumnaDorsalObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSAL_DESCRIPCION).v_Value1,
                               DorsoLumbarSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR).v_Value1,
                               DorsoLumbarObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_DORSO_LUMBAR_DESCRIPCION).v_Value1,
                               LumbroSacraSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA).v_Value1,
                               LumbroSacraObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LUMBOSACRA_DESCRIPCION).v_Value1,
                               CondralesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES).v_Value1,
                               CondralesObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_CONDRALES_DESCRIPCION).v_Value1,
                               CostoEsternalesSiNo = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES) == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES).v_Value1,
                               CostoEsternalesObs = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION) ==null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COSTO_ESTERNALES_DESCRIPCION).v_Value1,

                               Descripcion = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID)  == null? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID).v_Value1,
                               Aptitud = OsteoMuscular.Count == 0 || OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_2_APTITUD_ID) == null ? string.Empty : OsteoMuscular.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_2_APTITUD_ID).v_Value1Name,
                               Hallazgos = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID_1),
                               Recomendacion = GetRecommendationByServiceIdAndComponent(a.IdServicio, Constants.OSTEO_MUSCULAR_ID_1),
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string GetDiagnosticByServiceId(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }

        public string GetRestrictionByServiceId(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.restriction
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRestrictionId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_RestriccitionName = ddd.v_Name

                         }).ToList();


            return string.Join("/ ", query.Select(p => p.v_RestriccitionName));
        }


        private string GetRecommendationByServiceId(string pstrServiceId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_Recommendation));
        }

        public  string GetListRecommendationByServiceIdConcatenado(string pstrServiceId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == isDeleted
                         select new RecomendationList
                         {
                             v_RecommendationName = ddd.v_Name
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_RecommendationName));
        }

        private List<RecomendationList> GetListRecommendationByServiceId(string pstrServiceId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                               ccc.i_IsDeleted == isDeleted
                         select new RecomendationList
                         {
                             v_RecommendationName = ddd.v_Name
                         }).ToList();


            return query;
        }

        public string GetListRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponentId)
        {
            int isDeleted = (int)SiNo.NO;

            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId &&
                                ccc.v_ComponentId == pstrComponentId &&
                               ccc.i_IsDeleted == isDeleted
                         select new RecomendationList
                         {
                             v_RecommendationName = ddd.v_Name
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_RecommendationName));
        }     

        public string GetDiagnosticByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         //join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
                         //                                           equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
                         //from eee in eee_join.DefaultIfEmpty()

                         //join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
                         //                                       equals fff.v_MasterRecommendationRestricctionId into fff_join
                         //from fff in fff_join.DefaultIfEmpty()
            
                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name                              
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }

        public string GetDiagnosticForAudiometria(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_DiseasesName = ddd.v_Name
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }

   
        private string GetRecommendationByServiceIdAndComponent(string pstrServiceId, string pstrComponent)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_Recommendation));
        }

        // Alberto
        public List<ReportEsfuerzoFisico> GetReportPruebaEsfuerzo(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
                                 join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                                    equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()
                                 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
                                 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

                                 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************       


                                 join X in dbContext.person on me.v_PersonId equals X.v_PersonId
                                 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
                                 from Y in Y_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEsfuerzoFisico
                                 {
                                     Ficha = E.v_ComponentId,
                                     HistoriaClinica = A.v_ServiceId,
                                     DatoPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = M.v_Value1,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                     FirmaMedico = pme.b_SignatureImage,

                                     NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     NombreTecnico = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           select new ReportEsfuerzoFisico
                           {
                               Ficha = a.Ficha,
                               HistoriaClinica = a.HistoriaClinica,
                               DatoPaciente = a.DatoPaciente,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               Genero = a.Genero,
                               FirmaTecnologo = a.FirmaTecnologo,
                               FirmaMedico = a.FirmaMedico,

                               NombreDoctor = a.NombreDoctor,
                               NombreTecnico = a.NombreTecnico,


                               FumadorSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_FUMADOR_ID, "NOCOMBO", 0, "SI"),
                               DiabeticoSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DIABETICO_ID, "NOCOMBO", 0, "SI"),
                               InfartoSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_PRIOR_ID, "NOCOMBO", 0, "SI"),
                               FamiliarSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ANGINA_ID, "NOCOMBO", 0, "SI"),

                               PriorSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_INFARTO_ID, "NOCOMBO", 0, "SI"),
                               AnginaSiNo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ANTECEDENTE_FAMILIAR_ID, "NOCOMBO", 0, "SI"),

                               PReposoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_INICIO_ID, "NOCOMBO", 0, "SI"),
                               PReposoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_DURACION_ID, "NOCOMBO", 0, "SI"),
                               PReposoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),
                               PReposoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_INCLINACION_ID, "NOCOMBO", 0, "SI"),
                               PReposoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_MTS_ID, "NOCOMBO", 0, "SI"),
                               PReposoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_FC_ID, "NOCOMBO", 0, "SI"),
                               PReposoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_PAS_ID, "NOCOMBO", 0, "SI"),
                               PReposoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),
                               PReposoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_REPOSO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               PEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               PEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               SEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               SEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               TEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               TEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_T_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               CEsfuerzoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_INICIO_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_DURACION_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_MTS_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_FC_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_PAS_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               CEsfuerzoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_C_ESFUERZO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               PRecuperacionInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_INICIO_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_DURACION_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_MTS_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_FC_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_PAS_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionProtocolo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               PRecuperacionComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_RECUPERACION_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               SRecuperacionInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_INICIO_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_DURACION_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_MTS_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_FC_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_PAS_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               SRecuperacionComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_RECUPERACION_COMENTARIO_ID, "NOCOMBO", 0, "SI"),


                               SReposoInicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_INICIO_ID, "NOCOMBO", 0, "SI"),

                               SReposoDuracion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_DURACION_ID, "NOCOMBO", 0, "SI"),

                               SReposoVelocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               SReposoInclinacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_INCLINACION_ID, "NOCOMBO", 0, "SI"),

                               SReposoMTS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_MTS_ID, "NOCOMBO", 0, "SI"),

                               SReposoFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_FC_ID, "NOCOMBO", 0, "SI"),

                               SReposoPAS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_PAS_ID, "NOCOMBO", 0, "SI"),

                               SReposoProducto = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_PRODUCTO_ID, "NOCOMBO", 0, "SI"),

                               SReposoComentario = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_S_REPOSO_COMENTARIO_ID, "NOCOMBO", 0, "SI"),





                               //-----------------------------------------------------------------



                               TiempoEjercicio = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_TIEMPO_EJERCICIO_ID, "NOCOMBO", 0, "SI"),

                               CPV = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CPVS_ID, "NOCOMBO", 0, "SI"),

                               Derv = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DERIV_100_UVST_ID, "NOCOMBO", 0, "SI"),

                               Velocidad = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_VELOCIDAD_ID, "NOCOMBO", 0, "SI"),

                               Pendiente = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_PENDIENTE_ID, "NOCOMBO", 0, "SI"),

                               METS = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_METS_ID, "NOCOMBO", 0, "SI"),

                               FCardiaca = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_F_CARDIACA_ID, "NOCOMBO", 0, "SI"),

                               PSistolica = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_P_SISTOLICA_ID, "NOCOMBO", 0, "SI"),

                               PDiastolica = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DIASTOLICA_ID, "NOCOMBO", 0, "SI"),

                               FCxTA = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_FCXTA_ID, "NOCOMBO", 0, "SI"),

                               IndiceSTFC = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_INDICE_STFC_ID, "NOCOMBO", 0, "SI"),

                               Objetivo = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_OBJETIVO_ID, "NOCOMBO", 0, "SI"),

                               ElevacionST = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_ID, "NOCOMBO", 0, "SI"),

                               ElevacionSTEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_EN_ID, "NOCOMBO", 0, "SI"),

                               ElevacionSTAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_ELEVACION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

                               DepresionST = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_ID, "NOCOMBO", 0, "SI"),

                               DepresionSTEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_EN_ID, "NOCOMBO", 0, "SI"),

                               DepresionSTAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_DEPRESION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

                               CambioElevacion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_ID, "NOCOMBO", 0, "SI"),

                               CambioElevacionEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_EN_ID, "NOCOMBO", 0, "SI"),

                               CambioElevacionAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_ELEVACION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

                               CambioDepresion = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_ID, "NOCOMBO", 0, "SI"),

                               CambioDepresionEn = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_EN_ID, "NOCOMBO", 0, "SI"),

                               CambioDepresionAlos = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CAMBIO_DEPRESION_ST_ALOS_ID, "NOCOMBO", 0, "SI"),

                               Razones = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_RAZONES_FINALIZAR_ID, "NOCOMBO", 0, "SI"),

                               Conclusiones = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_CONCLUSIONES_ID, "NOCOMBO", 0, "SI"),

                               Sintomas = GetServiceComponentFielValue(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID, Constants.PRUEBA_ESFUERZO_SINTOMAS_ID, "NOCOMBO", 0, "SI"),



                               Dx = GetDiagnosticByServiceIdAndComponent(a.HistoriaClinica, Constants.PRUEBA_ESFUERZO_ID),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportEstudioElectrocardiografico> GetReportEstudioElectrocardiografico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId
                                 join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join J1 in dbContext.datahierarchy on new { a = B.i_LevelOfId.Value, b = 108 }
                                                                    equals new { a = J1.i_ItemId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()
                                 join F in dbContext.systemuser on E.i_InsertUserId equals F.i_SystemUserId
                                 join G in dbContext.professional on F.v_PersonId equals G.v_PersonId

                                 join M in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()



                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************       

                                 join X in dbContext.person on me.v_PersonId equals X.v_PersonId
                                 join Y in dbContext.person on tec.v_PersonId equals Y.v_PersonId into Y_join
                                 from Y in Y_join.DefaultIfEmpty()

                                join F1 in dbContext.servicecomponentmultimedia on E.v_ServiceComponentId equals F1.v_ServiceComponentId  into F1_join
                                 from F1 in F1_join.DefaultIfEmpty()

                                 join G1 in dbContext.multimediafile on F1.v_MultimediaFileId equals G1.v_MultimediaFileId into G1_join
                                 from G1 in G1_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEstudioElectrocardiografico
                                 {
                                     NroFicha = E.v_ServiceComponentId,
                                     NroHistoria = A.v_ServiceId,
                                     DatosPaciente = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = M.v_Value1,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FirmaTecnico = ptec.b_SignatureImage,
                                     Fecha = A.d_ServiceDate.Value,
                                     Empresa = D.v_Name,
                                     Puesto = B.v_CurrentOccupation,
                                     NombreDoctor = X.v_FirstLastName + " " + X.v_SecondLastName + " " + X.v_FirstName,
                                     NombreTecnologo = Y.v_FirstLastName + " " + Y.v_SecondLastName + " " + Y.v_FirstName,
                                     b_Imagen = G1.b_File
                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           let Valores = ValoresComponente(pstrserviceId, Constants.ELECTROCARDIOGRAMA_ID)
                           select new ReportEstudioElectrocardiografico
                           {
                               b_Imagen = a.b_Imagen,
                               NroFicha = a.NroFicha,
                               NroHistoria = a.NroHistoria,
                               DatosPaciente = a.DatosPaciente,
                               FechaNacimiento = a.FechaNacimiento,
                               Genero = a.Genero,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnico = a.FirmaTecnico,
                               Fecha = a.Fecha,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Edad = GetAge(a.FechaNacimiento),
                               NombreDoctor = a.NombreDoctor,
                               NombreTecnologo = a.NombreTecnologo,

                               SoploSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SOPLO_CARDIACO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SOPLO_CARDIACO_ID).v_Value1,
                               CansancioSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CANSANCIO_RAPIDO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CANSANCIO_RAPIDO_ID).v_Value1,
                               MareosSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS_ID).v_Value1,
                               PresionAltaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PRESION_ALTA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PRESION_ALTA_ID).v_Value1,
                               DolorPrecordialSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL_ID).v_Value1,
                               PalpitacionesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES_ID).v_Value1,
                               AtaquesCorazonSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ATAQUE_CORAZON_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ATAQUE_CORAZON_ID).v_Value1,
                               PerdidaConcienciaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PERDIDA_CONCIENCIA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PERDIDA_CONCIENCIA_ID).v_Value1,
                               ObesidadSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OBESIDAD_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OBESIDAD_ID).v_Value1,
                               TabaquismoSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TABAQUISMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TABAQUISMO_ID).v_Value1,
                               DisplidemiaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISLIPIDEMIA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISLIPIDEMIA_ID).v_Value1,
                               DiabetesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DIABETES_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DIABETES_ID).v_Value1,
                               SedentarismoSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEDENTARISMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEDENTARISMO_ID).v_Value1,
                               Otros1 = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS1_ESPECIFICAR_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS1_ESPECIFICAR_ID).v_Value1,
                               DolorPrecordial2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DOLOR_PRECORDIAL1_ID).v_Value1,
                               DesmayosSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESMAYOS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESMAYOS_ID).v_Value1,
                               Palpitaciones2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_PALPITACIONES2_ID).v_Value1,
                               DisneaSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISNEA_PAROXISTICA_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DISNEA_PAROXISTICA_ID).v_Value1,
                               Otros2 = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS2_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_OTROS2_ID).v_Value1,
                               Mareos2SiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS1_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_MAREOS1_ID).v_Value1,
                               VaricesSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_VARICES_PIERNAS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_VARICES_PIERNAS_ID).v_Value1,
                               ClaudicacSiNo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CLAUDICAC_INTERMITENTE_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_CLAUDICAC_INTERMITENTE_ID).v_Value1,
                               Ritmo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_RITMO_SINUAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_RITMO_SINUAL_ID).v_Value1,
                               IntervaloPR = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_PR_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_PR_ID).v_Value1,
                               IntervaloQRS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QRS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QRS_ID).v_Value1,
                               IntervaloQT = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QT_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_INTERVALO_QT_ID).v_Value1,
                               OndaPAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ANORMAL_ID).v_Value1,
                               OndaTAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ANORMAL_ID).v_Value1,
                               ComplejoQRSAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ANORMAL_ID).v_Value1,
                               SegementoSTAnormal = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ANORMAL_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ANORMAL_ID).v_Value1,
                               TrasntornoRitmo = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_RITMO_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_RITMO_ID).v_Value1,
                               TranstornoConduccion = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_CONDUCCION_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_TRANSTORNOS_CONDUCCION_ID).v_Value1,
                               Conclusiones = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).v_Value1,
                               Hallazgos = GetDiagnosticByServiceIdAndComponent(a.NroHistoria, Constants.ELECTROCARDIOGRAMA_ID),
                               Recomendaciones = GetRecommendationByServiceIdAndComponent(a.NroHistoria, Constants.ELECTROCARDIOGRAMA_ID),
                               OndaP = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_P_ID).v_Value1Name,
                               SegmentoST = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_SEGMENTO_ST_ID).v_Value1Name,
                                ComplejoQRS = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_COMPLEJO_QRS_ID).v_Value1Name,
                               OndaT = Valores.Count == 0 || Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ID) == null ? string.Empty : Valores.Find(p => p.v_ComponentFieldId == Constants.ELECTROCARDIOGRAMA_ONDA_T_ID).v_Value1Name,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               //Hallazgos = GetDiagnosticByServiceId(a.IdServicio),
                               //Descripcion = GetServiceComponentFielValue(a.IdServicio, pstrComponentId, Constants.OSTEO_MUSCULAR_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               //Recomendacion = GetRecommendationByServiceId(a.IdServicio),



                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportInformeRadiografico> ReportInformeRadiografico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
                                 //from F in F_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()


                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on E.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************      

                                 join me1 in dbContext.person on me.v_PersonId equals me1.v_PersonId


                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeRadiografico
                                 {
                                     Nombre = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate,
                                     d_ServiceDate = A.d_ServiceDate,
                                     v_ServiceId = A.v_ServiceId,
                                     FirmaMedico = pme.b_SignatureImage,
                                     v_ServiceComponentId = E.v_ServiceComponentId,
                                     Lector = me1.v_FirstName + " " + me1.v_FirstLastName + " " + me1.v_SecondLastName,
                                     Hcl = A.v_ServiceId,
                                     FirmaTecnologo = ptec.b_SignatureImage,
                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           select new ReportInformeRadiografico
                           {
                               Nombre = a.Nombre,
                               FechaNacimiento = a.FechaNacimiento,
                               d_ServiceDate = a.d_ServiceDate,
                               v_ServiceId = a.v_ServiceId,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTecnologo = a.FirmaTecnologo,
                               v_ServiceComponentId = a.v_ServiceComponentId,
                               Lector = a.Lector,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               Placa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_NRO_PLACA_ID, "NOCOMBO", 0, "SI"),
                               CalidaRadio = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CALIDAD_ID, "NOCOMBO", 0, "SI"),
                               Causas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CAUSAS_ID, "NOCOMBO", 0, "SI"),
                               Comentario = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COMENTARIOS_ID, "NOCOMBO", 0, "SI"),
                               Hcl = a.Hcl,
                               FechaLectura = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FECHA_LECTURA_ID, "NOCOMBO", 0, "SI"),
                               FechaRadiografia = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FECHA_TOMA_ID, "NOCOMBO", 0, "SI"),

                               SuperiorDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SUPERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               SuperiorIzquierda = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SUPERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
                               MedioDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIO_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               MedioIzquierda = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_MEDIO_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),
                               InferiorDerecho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INFERIOR_DERECHO_ID, "NOCOMBO", 0, "SI"),
                               InferiorIzquierdo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_INFERIOR_IZQUIERDO_ID, "NOCOMBO", 0, "SI"),

                               SimboloSi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIMBOLO_SI_ID, "NOCOMBO", 0, "SI"),
                               SimboloNo = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIMBOLO_NO_ID, "NOCOMBO", 0, "SI"),

                               CeroNada = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_NADA_ID, "NOCOMBO", 0, "SI"),
                               CeroCero = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_0_ID, "NOCOMBO", 0, "SI"),
                               CeroUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_0_1_ID, "NOCOMBO", 0, "SI"),

                               UnoCero = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_0_ID, "NOCOMBO", 0, "SI"),
                               UnoUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_1_ID, "NOCOMBO", 0, "SI"),
                               UnoDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_1_2_ID, "NOCOMBO", 0, "SI"),

                               DosUno = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_1_ID, "NOCOMBO", 0, "SI"),
                               DosDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_2_ID, "NOCOMBO", 0, "SI"),
                               DosTres = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_2_3_ID, "NOCOMBO", 0, "SI"),

                               TresDos = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_2_ID, "NOCOMBO", 0, "SI"),
                               TresTres = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_3_ID, "NOCOMBO", 0, "SI"),
                               TresMas = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_3_MAS_ID, "NOCOMBO", 0, "SI"),

                               p = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_P_ID, "NOCOMBO", 0, "SI"),
                               q = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_Q_ID, "NOCOMBO", 0, "SI"),
                               r = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_R_ID, "NOCOMBO", 0, "SI"),
                               s = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_S_ID, "NOCOMBO", 0, "SI"),
                               t = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_T_ID, "NOCOMBO", 0, "SI"),
                               u = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_U_ID, "NOCOMBO", 0, "SI"),
                               p1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_P1_ID, "NOCOMBO", 0, "SI"),
                               q1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_Q1_ID, "NOCOMBO", 0, "SI"),
                               r1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_R1_ID, "NOCOMBO", 0, "SI"),
                               s1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_S1_ID, "NOCOMBO", 0, "SI"),
                               t1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_T1_ID, "NOCOMBO", 0, "SI"),
                               u1 = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_U1_ID, "NOCOMBO", 0, "SI"),


                               O = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_D_ID, "NOCOMBO", 0, "SI"),
                               A = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_A_ID, "NOCOMBO", 0, "SI"),
                               B = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_B_ID, "NOCOMBO", 0, "SI"),
                               C = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_C_ID, "NOCOMBO", 0, "SI"),
                               //SimboloSiNo= GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_SIM, "NOCOMBO", 0, "SI"), 
                               aa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AA_ID, "NOCOMBO", 0, "SI"),
                               at = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AT_ID, "NOCOMBO", 0, "SI"),
                               ax = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_AX_ID, "NOCOMBO", 0, "SI"),
                               bu = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_BU_ID, "NOCOMBO", 0, "SI"),
                               ca = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CA_ID, "NOCOMBO", 0, "SI"),
                               cg = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CG_ID, "NOCOMBO", 0, "SI"),
                               cn = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CN_ID, "NOCOMBO", 0, "SI"),
                               co = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CO_ID, "NOCOMBO", 0, "SI"),
                               cp = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CP_ID, "NOCOMBO", 0, "SI"),
                               cv = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CV_ID, "NOCOMBO", 0, "SI"),



                               di = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_DI_ID, "NOCOMBO", 0, "SI"),
                               ef = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_EF_ID, "NOCOMBO", 0, "SI"),
                               em = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_EM_ID, "NOCOMBO", 0, "SI"),
                               es = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ES_ID, "NOCOMBO", 0, "SI"),
                               fr = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_FR_ID, "NOCOMBO", 0, "SI"),
                               hi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HI_ID, "NOCOMBO", 0, "SI"),
                               ho = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_HO_ID, "NOCOMBO", 0, "SI"),
                               id = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ID_ID, "NOCOMBO", 0, "SI"),
                               ih = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_IH_ID, "NOCOMBO", 0, "SI"),
                               kl = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_KL_ID, "NOCOMBO", 0, "SI"),
                               me = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_ME_ID, "NOCOMBO", 0, "SI"),
                               od = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_OD_ID, "NOCOMBO", 0, "SI"),
                               pa = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PA_ID, "NOCOMBO", 0, "SI"),
                               pb = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PB_ID, "NOCOMBO", 0, "SI"),
                               pi = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PI_ID, "NOCOMBO", 0, "SI"),
                               px = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_PX_ID, "NOCOMBO", 0, "SI"),
                               ra = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_RA_ID, "NOCOMBO", 0, "SI"),
                               rp = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_RP_ID, "NOCOMBO", 0, "SI"),
                               tb = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_TB_ID, "NOCOMBO", 0, "SI"),
                               Comentario_Od = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_COMENTARIO_OD_ID, "NOCOMBO", 0, "SI"),


                               Conclusiones = GetServiceComponentFielValue(a.v_ServiceId, pstrComponentId, Constants.RX_CONCLUSIONES_OIT_DESCRIPCION_ID, "NOCOMBO", 0, "SI"),
                               Dx = GetDiagnosticByServiceIdAndComponent(a.v_ServiceId, pstrComponentId),

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportTamizajeDermatologico> ReportTamizajeDermatologico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 //join F in dbContext.systemuser on E.i_UpdateUserId equals F.i_SystemUserId into F_join
                                 //from F in F_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join G in dbContext.professional on new { a = me.v_PersonId }
                                                                      equals new { a = G.v_PersonId } into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()

                                 join I in dbContext.protocol on A.v_ProtocolId equals I.v_ProtocolId into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join J in dbContext.organization on I.v_EmployerOrganizationId equals J.v_OrganizationId into J_join
                                 from J in J_join.DefaultIfEmpty()



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportTamizajeDermatologico
                                 {
                                     Ficha = A.v_ServiceId,
                                     Hc = E.v_ServiceComponentId,
                                     NombreTrabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     Fecha = A.d_ServiceDate.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage
                                 });


                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           select new ReportTamizajeDermatologico
                           {
                               Ficha = a.Ficha,
                               Hc = a.Hc,
                               NombreTrabajador = a.NombreTrabajador,
                               Fecha = a.Fecha,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               SufreEnfermedadPielSiNo = GetServiceComponentFielValue(pstrserviceId, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SUFRE_UD_ENFERMEDAD_PIEL_ID, "NOCOMBO", 0, "SI"),
                               SiQueDxTiene = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_QUE_DX_TIENE_ID, "NOCOMBO", 0, "SI"),
                               ActualmenteLesionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ACTUALMENTE_LESION_ID, "NOCOMBO", 0, "SI"),
                               DondeLocalizaLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               CuantoTieneLesion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_CUANTO_TIENE_LESION_ID, "NOCOMBO", 0, "SI"),
                               PresentaColoracionPielSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_COLORACION_PIEL_ID, "NOCOMBO", 0, "SI"),
                               LesionRepiteVariasAniosSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_LESIONES_REPITE_VARIAS_ANIOS_ID, "NOCOMBO", 0, "SI"),
                               EnrrojecimientoParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
                               EnrrojecimientoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ENRROJECIMIENTO_SI_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               TieneComezonSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TIENE_COMEZON_ID, "NOCOMBO", 0, "SI"),
                               ComezonLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_COMEZON_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               HinchazonParteCuerpoSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_ID, "NOCOMBO", 0, "SI"),
                               HinchazonParteCuerpoLocaliza = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_HINCHAZON_PARTE_CUERPO_DONDE_LOCALIZA_ID, "NOCOMBO", 0, "SI"),
                               AlergiaAsmaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_ALERGIA_ASMA_ID, "NOCOMBO", 0, "SI"),
                               EppSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_USA_EPP_ID, "NOCOMBO", 0, "SI"),
                               TipoProteccionUsa = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_TIPO_PROTECCION_USA_ID, "NOCOMBO", 0, "SI"),
                               CambioUnasSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_PRESENTA_CAMBIO_UNAS_ID, "NOCOMBO", 0, "SI"),
                               TomandoMedicacionSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_TOMANDO_ALGUNA_MEDICACION_ID, "NOCOMBO", 0, "SI"),
                               ComoLlamaMedicacion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_SI_COMO_SE_LLAMA_ID, "NOCOMBO", 0, "SI"),
                               DosisFrecuencia = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DOSIS_FRECUENCIA_ID, "NOCOMBO", 0, "SI"),
                               Descripcion = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DESCRIPCION1_ID, "NOCOMBO", 0, "SI"),
                               DermatopiaSiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
                               NikolskySiNo = GetServiceComponentFielValue(a.Ficha, pstrComponentId, Constants.TAMIZAJE_DERMATOLOGIO_DERMATOPIA_ID, "NOCOMBO", 0, "SI"),
                               v_OwnerOrganizationName = (from n in dbContext.organization
                                                          where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                                          select n.v_Name).SingleOrDefault<string>(),


                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public string DevolverAptitud(string pstrServiceId)
        {
            try
            {
                    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var objEntity = (from A in dbContext.service

                                join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
                                equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                from J4 in J4_join.DefaultIfEmpty()
                                where A.v_ServiceId == pstrServiceId
                                select new
                              {
                                  Aptitud = J4.v_Value1
                              }).FirstOrDefault();

                return objEntity.Aptitud;
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        //AMC / Alejandro/ ya te lo agarrastes
        public List<ReportAseguradora> ReporteAseguradora(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression)
        {
  
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    List<string> ServicioIds = new List<string>();
                    List<string> PersonIds = new List<string>();
                    #region Antecedentes

                    var varDxReco = DevolverJerarquiaDxRecomendaciones(FechaInicio, FechaFin);
                    var varAntecedentes = DevolverTodosAntecedentes( FechaInicio, FechaFin);
                    //var varValores = DevolverValorCampoPorServicio(FechaInicio, FechaFin);
                    var varDx = DevolverJerarquiaDx(FechaInicio, FechaFin);
                   

                    #endregion


                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
                                    from D in C_join.DefaultIfEmpty()

                                    join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
                                           equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
                                       equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 }
                                       equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()

                                    where A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin && C.v_ProtocolId != "N009-PR000000044"
                                    //&& A.v_PersonId == "N009-PP000000208"
                                    select new ReportAseguradora
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " +  B.v_FirstName,
                                        NroDNI = B.v_DocNumber,
                                        PuestoTrabajo = B.v_CurrentOccupation,
                                        Parentesco = J1.v_Value1,
                                        NombreTitular = B.v_OwnerName,
                                        EmpresaTrabajo = D.v_Name,
                                        Producto = "EPS", //J2.v_Value1
                                        DireccionTrabajador = B.v_AdressLocation,
                                        Proveedor = "",
                                        Modalidad = "A demanda", //J3.v_Value1,
                                        FechaServicioDate = A.d_ServiceDate.Value,
                                        TelefonoTrabajador = B.v_TelephoneNumber,
                                        CelularTrabajador = "",
                                        EmailTrabajador = B.v_Mail,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
                                        Anannesis = A.v_Story,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        Aptitud = J4.v_Value1
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    foreach (var item in objEntity)
                    {
                        PersonIds.Add(item.IdTrabajador);
                        ServicioIds.Add(item.IdServicio);
                    }

                    var varValores = DevolverValorCampoPorServicioMejorado(ServicioIds);

                    var sql = (from a in objEntity.ToList()

                               #region Falta                         
                               let varPesoMaximo = PesoMaximo(varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor)//Revisar Beto
                            
                               #region Subquerys

                               //// Subquerys ************************************************************************
                               let nameMedicalCenter = GetNameMedicalCenter()
                               let nameDoctoPhisicalExam = GetNameDoctoPhisicalExam(a.IdServicio)
                               let age = GetAge(a.FechaNacimiento.Value)
                               let ageGroup = GetGrupoEtario(age)

                               #endregion

                               #region DX

                               //////////////let varDxAudiometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.AUDIOMETRIA_ID)
                               //////////////let varDxEspirometria = GetDiagnosticByServiceIdAndComponent(a.IdServicio, Constants.ESPIROMETRIA_ID)

                               let AudiometriaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.AUDIOMETRIA_ID)
                               let varDxAudiometria = AudiometriaDxs != null ? string.Join(", ", AudiometriaDxs.Select(p => p.Descripcion)) : "Normal"

                               let EspiroDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.ESPIROMETRIA_ID)
                               let varDxEspirometria = EspiroDxs != null ? string.Join(", ", EspiroDxs.Select(p => p.Descripcion)) : "Normal"


                               let HemogramaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID)
                               let Hemograma = HemogramaDxs != null ? string.Join(", ", HemogramaDxs.Select(p => p.Descripcion)) : "Normal"

                               let hemo1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_ID_REALIZADO) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_ID_REALIZADO).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_ID_REALIZADO).Valor
                               let hemo2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA).Valor


                               let ExamenOrinaDxs = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID)
                               let ExamenOrina = ExamenOrinaDxs != null ? string.Join(", ", ExamenOrinaDxs.Select(p => p.Descripcion)) : "Normal"

                               let Restricciones = GetRestrictionByServiceId(a.IdServicio)


                               let Grupo = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID) == null ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).Valor == "" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.GRUPO_SANGUINEO_ID).ValorName
                               let Factor = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID) == null ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).Valor == "" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GRUPO_Y_FACTOR_SANGUINEO_ID && o.IdCampo == Constants.FACTOR_SANGUINEO_ID).ValorName


                               let TestSomnolenciaDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.TEST_SOMNOLENCIA_ID)
                               let TestSomnolencia = HemogramaDxs != null ? string.Join(", ", HemogramaDxs.Select(p => p.Descripcion)) : "Normal"

                               let OftalmologiaDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdComponente == Constants.OFTALMOLOGIA_ID)
                               let Oftalmologia = OftalmologiaDx != null ? string.Join("/ ", OftalmologiaDx.Select(p => p.Descripcion)) : "Normal"

                               //Trigli 1
                               let Trigli1 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor == "" ? "SIN DATOS" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.TRIGLICERIDOS_ID && o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS).Valor
                               //let TGCD1x = varDxConDescartados.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.TRIGLICERIDOS_BIOQUIMICA_TRIGLICERIDOS)
                               //let DxTGC1 = TGCD1x == null ? "No Aplica" : TGCD1x.Count == 0 ? "Normal" : string.Join("/ ", TGCD1x.Select(p => p.Descripcion))// TGCD1x.Count == 0 ? null : TGCD1x != null ? string.Join("/ ", TGCD1x.Select(p => p.Descripcion)) : "Normal"


                               ////Trigli 2
                               //let Trigli2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_LIPIDICO) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_LIPIDICO && o.IdCampo == Constants.TRIGLICERIDOS).Valor == "" ? "SIN DATOS" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_LIPIDICO && o.IdCampo == Constants.TRIGLICERIDOS).Valor
                               ////let TGCD2x = varDxConDescartados.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.FindAll(o => o.IdCampo == Constants.TRIGLICERIDOS)
                               ////let DxTGC2 = TGCD2x == null ? "No Aplica" : TGCD2x.Count == 0 ? "Normal" : string.Join("/ ", TGCD2x.Select(p => p.Descripcion))//TGCD2x.Count == 0 ? null : TGCD2x != null ? string.Join("/ ", TGCD2x.Select(p => p.Descripcion)) : "Normal"


                               #endregion
                               #endregion                               

                               select new ReportAseguradora
                               {

                                   TestAltura = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_APTO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_APTO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ALTURA_ESTRUCTURAL_ID && o.IdCampo == Constants.ALTURA_ESTRUCTURAL_APTO_ID).ValorName,
                                                                       
                                    Aptitud = a.Aptitud,                                  
                                    IdServicio = a.IdServicio,
                                    IdProtocolId = a.IdProtocolId,
                                    IdTrabajador = a.IdTrabajador,
                                    Trabajador = a.Trabajador,
                                    NroDNI = a.NroDNI,
                                    PuestoTrabajo = a.PuestoTrabajo,
                                    Parentesco = a.Parentesco,
                                    NombreTitular = a.NombreTitular,
                                    EmpresaTrabajo = a.EmpresaTrabajo,
                                    Producto = a.Producto,
                                    DireccionTrabajador = a.DireccionTrabajador,
                                    Proveedor = a.Proveedor,                                   
                                    Modalidad = a.Modalidad,
                                    FechaServicio = a.FechaServicioDate.ToShortDateString(),
                                    TelefonoTrabajador = a.TelefonoTrabajador,
                                    CelularTrabajador = a.CelularTrabajador,
                                    EmailTrabajador = a.EmailTrabajador,                                   
                                    FechaNacimiento = a.FechaNacimiento,                                  
                                    GeneroTrabajador = a.GeneroTrabajador,

                                   AntecedentePersonal1 =varAntecedentes==null?"": varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[0].v_DiseasesName,
                                   AntecedentePersonal2 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[1].v_DiseasesName,
                                   AntecedentePersonal3 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[2].v_DiseasesName,
                                   AntecedentePersonal4 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[3].v_DiseasesName,
                                   AntecedentePersonal5 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[4].v_DiseasesName,
                                   AntecedentePersonal6 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[5].v_DiseasesName,
                                   AntecedenteFamiliar1 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[6].v_DiseasesName,
                                   AntecedenteFamiliar2 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[7].v_DiseasesName,
                                   AntecedenteFamiliar3 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[8].v_DiseasesName,
                                   AntecedenteFamiliar4 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[9].v_DiseasesName,
                                   AntecedenteFamiliar5 = varAntecedentes == null ? "" : varAntecedentes.Find(p => p.PersonId == a.IdTrabajador).ListaAntecendentes[10].v_DiseasesName,

                                    PresionSistolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Valor,
                                    PresionDiastolica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_PAD_ID).Valor,

                                    Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.HEMOGLOBINA_ID).Valor,
                                    HemoglobinaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.LABORATORIO_HEMOGLOBINA_ID && o.IdCampo == Constants.LABORATORIO_HEMOGLOBINA_VALOR_DESEABLE_ID).Valor,
                                    Glucosa = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Valor,
                                    GlucosaB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID && o.IdCampo == Constants.GLUCOSA_GLUCOSA_VALOR_DESEABLE_ID).Valor,
                                    Colesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Valor,
                                    ColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID && o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_DESEABLE_ID).Valor,
                                    HDLColesterol = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Valor,
                                    HDLColesterolB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_DESEABLE_ID).Valor,
                                    Triglicerido = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
                                    TrigliceridoB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_DESEABLE_ID).Valor,
                                    PSA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Valor,
                                    PSAB = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor == "0.00" ? "Sin Datos" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == Constants.ANTIGENO_PROSTATICO_VALOR_DESEABLE).Valor,
                                    IMC = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Valor,
                                    PerimetroAbdominal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PERIMETRO_ABDOMINAL_ID).Valor,
                                    Talla = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_TALLA_ID).Valor,
                                    Peso = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ANTROPOMETRIA_ID && o.IdCampo == Constants.ANTROPOMETRIA_PESO_ID).Valor,

                                    ExamenFisicoDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_ID && o.IdCampo == Constants.EXAMEN_FISICO_HALLAZGOS_ID).Valor,
                                    ExamenClinico2 = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_FISICO_7C_ID && o.IdCampo == Constants.EXAMEN_FISICO_7C_HALLAZGOS_ID).Valor,

                                    THENEVON = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_D_HECES_ID && o.IdCampo == Constants.EXAMEN_D_HECES_THENEVON_EXAMEN_DE_HECES_ID).Valor,
                                    RxDescripcion = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID && o.IdCampo == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).Valor,
                                    Electrocardiograma = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID && o.IdCampo == Constants.ELECTROCARDIOGRAMA_DESCRIPCION_ID).Valor,
                                    Papanicolao = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_HALLAZGOS).Valor,
                                    Mamografia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PAPANICOLAU_ID && o.IdCampo == Constants.PAPANICOLAU_RADIOGRAFIA_RESULTADO_DE_LA_EVALUACION).Valor,
                                    EcoPelvica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_PELVICA_ID && o.IdCampo == Constants.ECOGRAFIA_PELVICA_HALLAZGOS).Valor,
                                    EcoTransvaginal = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ECOGRAFIA_TRANSVAGINAL_ID && o.IdCampo == Constants.ECOGRAFIA_TRANSVAGINAL_HALLAZGOS).Valor,
                                    Colonoscopia = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLONOSCOPIA_ID && o.IdCampo == Constants.COLONOSCOPIA_HALLAZGOS).Valor,
                                    DesintometriaOsea = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.DENSITOMETRIA_OSEA_ID && o.IdCampo == Constants.DENSITOMETRIA_OSEA_HALLAZGOS).Valor,
                                    EvOdontologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ODONTOGRAMA_ID && o.IdCampo == Constants.ODONTOGRAMA_CONCLUSIONES_DESCRIPCION_ID).Valor,
                                    EvOftalmologica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == Constants.OFTALMOLOGIA_HALLAZGOS_ID).Valor,
                                    EvPsicológica = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA) == null || varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA).Valor == "0.00" ? "" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PSICOLOGIA_ID && o.IdCampo == Constants.PSICOLOGIA_APTITUD_PSICOLOGICA).Valor,

                                    Dx1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[0].Descripcion,
                                    Dx2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[1].Descripcion,
                                    Dx3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[2].Descripcion,
                                    Dx4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[3].Descripcion,
                                    Dx5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[4].Descripcion,
                                    Dx6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[5].Descripcion,
                                    Dx7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[6].Descripcion,
                                    Dx8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[7].Descripcion,

                                    Recomendacion1 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[8].Descripcion,
                                    Recomendacion2 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[9].Descripcion,
                                    Recomendacion3 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[10].Descripcion,
                                    Recomendacion4 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[11].Descripcion,
                                    Recomendacion5 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[12].Descripcion,
                                    Recomendacion6 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[13].Descripcion,
                                    Recomendacion7 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[14].Descripcion,
                                    Recomendacion8 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[15].Descripcion,
                                    Recomendacion9 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[16].Descripcion,
                                    Recomendacion10 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[17].Descripcion,
                                    Recomendacion11 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[18].Descripcion,
                                    Recomendacion12 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[19].Descripcion,
                                    Recomendacion13 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[20].Descripcion,
                                    Recomendacion14 = varDxReco.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones[21].Descripcion,

                                   HemogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ?"HEMOGRAMA" : "",

                                   GlucosaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.GLUCOSA_ID) != null ? "GLUCOSA" : "",
                                   ColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.COLESTEROL_ID) != null ? "COLESTEROL TOTAL" : "",
                                   HDLColesterolA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "HDL COLESTEROL TOTAL" : "",
                                   TrigliceridoA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.PERFIL_HIPIDICO_ID) != null ? "TRIGLICERIDOS" : "",
                                   PSAA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) != null ? "ANTIGENOS PROSTATICO" : "",
                                   ExamenOrinaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.EXAMEN_COMPLETO_DE_ORINA_ID) != null ? "EXAMEN COMPLETO DE ORINA" : "",

                                   Rx = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.RX_TORAX_ID) != null ? "RX" : "",
                                   ElectrocardiogramaA = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.ELECTROCARDIOGRAMA_ID) != null ? "ELECTROCARDIOGRAMA" : "",

                                   LugarChekeo = nameMedicalCenter,
                                   MedicoEvaluador = nameDoctoPhisicalExam,
                                   EdadTrabajador = age,
                                   GrupoEtario = ageGroup,
                                   Anannesis = a.Anannesis,
                                   ActividadFisica = GetHabitoNoscivo(a.IdTrabajador, 4),
                                   Fumar = GetHabitoNoscivo(a.IdTrabajador, 1),
                                   Alcohol = GetHabitoNoscivo(a.IdTrabajador, 2),
                                   Drogas = GetHabitoNoscivo(a.IdTrabajador, 3),

                                   PresionArterialDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.FUNCIONES_VITALES_PAS_ID).Descripcion : "Normal",
                                   HDLDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_COLESTEROL_HDL_ID).Descripcion : "Normal",

                                   IMCDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Descripcion : "Normal",

                                   HemoglobinaDX = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.HEMOGLOBINA_ID).Descripcion : "Normal",
                                   GlucosaDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.GLUCOSA_GLUCOSA_ID).Descripcion : "Normal",
                                   ColesterolDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.COLESTEROL_COLESTEROL_TOTAL_ID).Descripcion : "Normal",
                                   TrigliceridoDx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.PERFIL_HIPIDICO_TRIGLICERIDO_ID).Descripcion : "Normal",
                                   PSADx = varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR) != null ? varDx.Find(p => p.ServicioId == a.IdServicio).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTIGENO_PROSTATICO_ANTIGENO_PROSTATICO_VALOR).Descripcion : "Normal",
                                   PesoMaximo = varPesoMaximo,



                                   DxAudiometria = varDxAudiometria,
                                   DxEspirometria = varDxEspirometria,
                                   restricciones = Restricciones,
                                   HemoglobinaA = hemo1+ " " + hemo2,
                                   Hemograma = Hemograma,
                                   ExamenOrina = ExamenOrina,
                                   GrupoFactorSanguineo = Grupo + " - " +Factor,
                                   TestSomnolencia =TestSomnolencia,


                                   Fr = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID).Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_RESPIRATORIA_ID).Valor,
                                   Fc = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID).Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.FUNCIONES_VITALES_ID && o.IdCampo == Constants.FUNCIONES_VITALES_FREC_CARDIACA_ID).Valor,

                                   VisionCercaOD = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000233").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000233").Valor,
                                   VisionCercaOI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000227").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000227").Valor,

                                   AgudezaVisualLejosOD = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000234").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000234").Valor,
                                   AgudezaVisualLejosOI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000230").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000230").Valor,
                                   VisionCercaCorregidaOD = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000235").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000235").Valor,
                                   VisionCercaCorregidaOI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N009-MF000000646").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N009-MF000000646").Valor,
                                   AgudezaVisualLejosCorregidaOD = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000231").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000231").Valor,
                                   AgudezaVisualLejosCorregidaOI = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000236").Valor == "" ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.OFTALMOLOGIA_ID && o.IdCampo == "N002-MF000000236").Valor,
                                   Oftalmologia = Oftalmologia == "" ? "NO APLICA" : Oftalmologia,
                                   //Trigliceridos2 = Trigli2 == "" ? "NO APLICA" : Trigli2,
                                   Trigliceridos = Trigli1 == "" ? "NO APLICA" : Trigli1,
                                   //Hemoglobina = varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID) == null ? "NO APLICA" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == "N009-MF000001282").Valor == "" ? "SIN DATOS" : varValores.Find(p => p.ServicioId == a.IdServicio).CampoValores.Find(o => o.IdComponente == Constants.HEMOGRAMA_COMPLETO_ID && o.IdCampo == "N009-MF000001282").Valor,

                               }).ToList();

                    return sql;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alejandro
        public string GetNameMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Name + " " + n.v_Address).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetNameMedicalCenterName()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Name).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetNameMedicalCenteraddress()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_Address).SingleOrDefault<string>();

                return nameMedicalCenter;
            }
        }

        public string GetPhoneNumberMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var phoneNumber = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.v_PhoneNumber).SingleOrDefault<string>();

                return phoneNumber;
            }
        }

        public string GetEmailMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var email = (from n in dbContext.organization
                                   where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                   select n.v_Mail).SingleOrDefault<string>();

                return email;
            }
        }

        // Alejandro
        public organizationDto GetInfoMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var sql = (from o in dbContext.organization
                           where o.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                           select new organizationDto
                           {
                              v_Name = o.v_Name,
                              v_Address = o.v_Address,
                              b_Image = o.b_Image,
                              v_PhoneNumber = o.v_PhoneNumber,
                              v_Mail = o.v_Mail,

                           }).SingleOrDefault();
                    

                return sql;
            }
        }

        //AMC
        public byte[] GetLogoMedicalCenter()
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {

                var nameMedicalCenter = (from n in dbContext.organization
                                         where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                         select n.b_Image).SingleOrDefault();

                return nameMedicalCenter;
            }
        }

        // alejandro
        public string GetNameDoctoPhisicalExam(string serviceId)
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {
                var nameDoctor = (from x in dbContext.servicecomponent
                                  join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()
                                  join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

                                  where x.v_ComponentId == Constants.EXAMEN_FISICO_ID && x.v_ServiceId == serviceId
                                  select Pe.v_FirstName + " " +
                                         Pe.v_FirstLastName + " " + Pe.v_SecondLastName
                                                       ).SingleOrDefault<string>();

                return nameDoctor;
            }
        }

        // alejandro
        public ServiceList GetDoctoPhisicalExam(string serviceId)
        {
            using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
            {
                var sql = (from x in dbContext.servicecomponent
                                  join me in dbContext.systemuser on x.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                  from me in me_join.DefaultIfEmpty()

                                  join Pe in dbContext.person on me.v_PersonId equals Pe.v_PersonId

                                  join pr in dbContext.professional on Pe.v_PersonId equals pr.v_PersonId into pr_join
                                  from pr in pr_join.DefaultIfEmpty()

                                  where x.v_ComponentId == Constants.EXAMEN_FISICO_ID &&
                                        x.v_ServiceId == serviceId

                                  select new ServiceList
                                    {
                                        v_Pacient =  Pe.v_FirstName + " " + Pe.v_FirstLastName + " " + Pe.v_SecondLastName,
                                        FirmaDoctor = pr.b_SignatureImage
                                                       
                                    }).FirstOrDefault();

                return sql;
            }
        }

        private string GetGrupoEtario(int Edad)
        {
            string GrupoEterario = "";
            try
            {
                if (Edad < 18)
                {
                    GrupoEterario = "Menor de 18";
                }
                else if (18 <= Edad && Edad <= 29)
                {
                    GrupoEterario = "de 18 a 29";
                }
                else if (30 <= Edad && Edad <= 39)
                {
                    GrupoEterario = "de 30 a 39";
                }
                else if (40 <= Edad && Edad <= 49)
                {
                    GrupoEterario = "de 40 a 49";
                }
                else if (Edad >= 50)
                {
                    GrupoEterario = "mayor de 50";
                }

                return GrupoEterario;
            }
            catch (Exception)
            {

                throw;
            }

        }

        public string PesoMaximo(string Talla)
        {
            if (Talla != "")
            {
                double ValueTalla = double.Parse(Talla);
                double Result = ValueTalla * ValueTalla * 25;
                return Result.ToString();
            }
            else
            {
                return "";
            }
        }

        public string GetDxByField(string pstrServiceId, string pstrCampoId, string Value1, string Value2)
        {
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";
                    var query = (from A in dbContext.diagnosticrepository
                                 join B in dbContext.diseases on A.v_DiseasesId equals B.v_DiseasesId
                                 where A.v_ServiceId == pstrServiceId && A.v_ComponentFieldId == pstrCampoId
                                 select new
                                 {
                                     Dx = B.v_Name
                                 }
                                  ).FirstOrDefault();

                    if (query != null)
                    {
                        CadenaRetornar = query.Dx;
                    }
                    else
                    {
                        if (Value1 == "" || Value2 == "")
                        {
                            CadenaRetornar = "";
                        }
                        else
                        {
                            CadenaRetornar = "Normal";
                        }

                    }

                    return CadenaRetornar;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Antecedentes Personales
        public string GetPersonMedicalHistory(string pstrPacientId, int Nro)
        {
            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";

                    var query = (from A in dbContext.personmedicalhistory
                                 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                 where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
                                 select new
                                 {
                                     v_DiseasesName = D.v_Name,
                                     d_StartDate = A.d_StartDate.Value,
                                     Detalle_Dx = A.v_DiagnosticDetail
                                 }).ToList();

                    var sql = (from a in query
                               select new
                               {
                                   Concatec = a.v_DiseasesName + " (" + a.d_StartDate.ToString("MM/yyyy") + ")" + ", " + a.Detalle_Dx
                               }).ToList();

                    if (Nro == 5)
                    {
                        int Contador = query.Count - 5;
                        var x = sql.GetRange(5, Contador);

                        CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

                    }
                    else
                    {
                        CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
                    }

                    return CadenaRetornar;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //Antecedentes Familiares
        public string GetFamilyMedical(string pstrPacientId, int Nro)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";

                    var query = (from A in dbContext.familymedicalantecedents
                                 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

                                 join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
                                     equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                 from J1 in J1_join.DefaultIfEmpty()

                                 join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
                                     equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                 from J2 in J2_join.DefaultIfEmpty()

                                 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
                                 select new
                                 {
                                     v_DiseasesName = D.v_Name,
                                     Parentesco = J2.v_Value1
                                 }).ToList();

                    var sql = (from a in query
                               select new
                               {
                                   Concatec = a.v_DiseasesName + " (" + a.Parentesco + ")"
                               }).ToList();

                    if (Nro == 4)
                    {
                        int Contador = query.Count - 4;
                        var x = sql.GetRange(4, Contador);

                        CadenaRetornar = string.Join(", ", x.Select(p => p.Concatec));

                    }
                    else
                    {
                        CadenaRetornar = query.Count == 0 ? "" : sql[Nro].Concatec;
                    }

                    return CadenaRetornar;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        //Habitos Noscivos
        public string GetHabitoNoscivo(string pstrPacientId, int pintTypeHabit)
        {
            int isDeleted = (int)SiNo.NO;

            try
            {

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    string CadenaRetornar = "";
                    var query = (from A in dbContext.noxioushabits
                                 //join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 205 }
                                 //              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                 where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId && A.i_TypeHabitsId == pintTypeHabit
                                 select new
                                 {
                                     Frecuencia = A.v_Frequency
                                 }).FirstOrDefault();

                    return CadenaRetornar = query == null ? "" : query.Frecuencia;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Diagnosticos por Servicio
        public string GetDxByServiceId(string pstrServiceId, int Nro)
        {
            string CadenaRetornar = "";
            try
            {

                List<DiagnosticRepositoryList> ListaDx = GetDxByServiceId(pstrServiceId);
                if (ListaDx.Count != 0)
                {
                    if (ListaDx.Count <= 8)
                    {
                        if (Nro <= 7)
                        {
                            if (Nro <= ListaDx.Count - 1)
                            {
                                CadenaRetornar = ListaDx[Nro].v_DiseasesName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                    }
                    else if (ListaDx.Count > 8)
                    {
                        if (Nro <= 6)
                        {
                            if (Nro <= ListaDx.Count - 1)
                            {
                                CadenaRetornar = ListaDx[Nro].v_DiseasesName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                        else
                        {
                            int Contador = ListaDx.Count - 7;
                            var x = ListaDx.GetRange(7, Contador);

                            CadenaRetornar = string.Join(", ", x.Select(p => p.v_DiseasesName));
                        }
                    }


                }
                return CadenaRetornar;

            }
            catch (Exception)
            {

                throw;
            }
        }

        //Recomendaciones por Servicio
        public string GetRecomendationByServiceId(string pstrServiceId, int Nro)
        {
            string CadenaRetornar = "";
            try
            {

                List<RecomendationList> ListaRecomendaciones = GetListRecommendationByServiceId(pstrServiceId);

                if (ListaRecomendaciones.Count != 0)
                {
                    if (ListaRecomendaciones.Count <= 14)
                    {
                        if (Nro <= 13)
                        {
                            if (Nro <= ListaRecomendaciones.Count - 1)
                            {
                                CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                    }
                    else if (ListaRecomendaciones.Count > 14)
                    {
                        if (Nro <= 6)
                        {
                            if (Nro <= ListaRecomendaciones.Count - 1)
                            {
                                CadenaRetornar = ListaRecomendaciones[Nro].v_RecommendationName;
                            }
                            else
                            {
                                CadenaRetornar = "";
                            }
                        }
                        else
                        {
                            int Contador = ListaRecomendaciones.Count - 13;
                            var x = ListaRecomendaciones.GetRange(13, Contador);

                            CadenaRetornar = string.Join(", ", x.Select(p => p.v_RecommendationName));
                        }
                    }


                }



















                //if (ListaRecomendaciones.Count != 0)
                //{
                //    if (Nro == 13)
                //    {
                //        if (Nro == ListaRecomendaciones.Count)
                //        {
                //            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro - 1].v_RecommendationName;
                //        }
                //        else if (ListaRecomendaciones.Count > 12)
                //        {
                //            int Contador = ListaRecomendaciones.Count - 14;
                //            var x = ListaRecomendaciones.GetRange(14, Contador);

                //            CadenaRetornar = string.Join(", ", ListaRecomendaciones.Select(p => p.v_RecommendationName));
                //        }
                //        else
                //        {
                //            return "";
                //        }

                //    }
                //    else
                //    {
                //        if (ListaRecomendaciones.Count > Nro)
                //        {
                //            CadenaRetornar = ListaRecomendaciones.Count == 0 ? "" : ListaRecomendaciones[Nro].v_RecommendationName;
                //        }
                //        else
                //        {
                //            return "";
                //        }
                //    }
                //}
                return CadenaRetornar;
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto 

        public List<ReportCuestionarioOjoSeco> GetReportCuestionarioOjoSeco(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 //join F in dbContext.organization on C.v_ equals D.v_OrganizationId into F_join
                                 //from F in F_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportCuestionarioOjoSeco
                                 {
                                     FechaSinFormatear = A.d_ServiceDate.Value,
                                     Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,                         
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = D.v_Name

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()

                           let Test = ValoresComponente(pstrserviceId, Constants.TESTOJOSECO_ID)                   
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let Fecha = FormatearFecha(a.FechaSinFormatear)
                           select new ReportCuestionarioOjoSeco
                           {
                                Fecha = Fecha,
                                Trabajador = a.Trabajador,
                                FirmaMedico = a.FirmaMedico,
                                Empresa = a.Empresa,
                                LogoClinica = LogoEmpresa,
                                EnrojOcular = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_ENROJECIMIENTO_OCULAR).v_Value1,
                                ParpaInflama = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_BORDE_PARPADOS_IMFLAMADOS).v_Value1,
                                CostraParpa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_COSTRAS_PARPADOS).v_Value1,
                                OjosPegados = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_OJO_PEGADOS_LEVANTARSE).v_Value1,
                                Secreciones = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SECRECION).v_Value1,
                                SequedadOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SEQUEDAD_OJO).v_Value1,
                                SensaArenilla = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SEMSACION_ARENILLA).v_Value1,
                                SensaCuerpExtra = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_SENSACION_CUERPO_EXTRANO).v_Value1,
                                Ardor = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_ARDOR).v_Value1,
                                Picor = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_PICOR).v_Value1,
                                MalestarOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_MALESTAR_OJO).v_Value1,
                                DolorAgudo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_DOLO_AGUDO).v_Value1,
                                Lagrimeo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TESTOJOSECO_LAGRIMEO).v_Value1,
                                OjosLlorosos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_LEYENDO).v_Value1,
                                SensibilidadLuz = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_MIRANDO_TV).v_Value1,
                                VisionBorrosa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_QUIETO).v_Value1,
                                CansancioOjo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_VIAJANDO).v_Value1,
                                SensaPesadez = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONVERSANDO).v_Value1,
                                EmpresaPropietaria = MedicalCenter.v_Name,
                                EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                                EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                                EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        private string FormatearFecha(DateTime? nullable)
        {
            return nullable.Value.ToString("dd/MM/yyyy");
        }


        public List<ReportAntigenosFebriles> GetReportAntigenosFebriles(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportAntigenosFebriles
                                 {
                                     FechaSinformatear = A.d_ServiceDate.Value,
                                     Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     EmpresaTrabajador = D.v_Name,
                                     Puesto = E.v_CurrentOccupation
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let LogoEmpresa = GetLogoMedicalCenter()                        
                           let ValorFecha = FormatearFecha(a.FechaSinformatear)
                           let Test = ValoresComponente(pstrserviceId, Constants.AGLUTINACIONES_LAMINA_ID)   
                           select new ReportAntigenosFebriles
                           {
                               LogoEmpresa = LogoEmpresa,
                               Trabajador = a.Trabajador,
                               EmpresaTrabajador = a.EmpresaTrabajador,     
                               Puesto = a.Puesto,
                               Fecha = ValorFecha,
                               FirmaMedico = a.FirmaMedico,

                               ParatificoA = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A).v_Value1Name,
                               ParatificoADeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_A_DESEABLE).v_Value1,

                               ParatificoB = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B).v_Value1Name,
                               ParatificoBDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_PARATIFICO_B_DESEABLE).v_Value1,

                               TificoH = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H).v_Value1Name,
                               TificoHDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_H_DESEABLE).v_Value1,

                               TificoO = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O).v_Value1Name,
                               TificoODeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_TIFICO_O_DESEABLE).v_Value1,

                               Brucella = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA).v_Value1Name,
                               BrucellaDeseable = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.AGLUTINACIONES_LAMINA_REACTIVOS_BRUCELLA_DESEABLE).v_Value1,
                            

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportParasitologicoSimple> GetReportParasitologicoSimple(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportParasitologicoSimple
                                 {
                                     FechaSinFormato = A.d_ServiceDate.Value,
                                     Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = D.v_Name,
                                     Puesto = E.v_CurrentOccupation
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let ValorFecha = FormatearFecha(a.FechaSinFormato)
                           let Test = ValoresComponente(pstrserviceId, Constants.PARASITOLOGICO_SIMPLE_ID)
                           select new ReportParasitologicoSimple
                           {
                               LogoEmpresa = LogoEmpresa,
                               Paciente = a.Paciente,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Fecha = ValorFecha,
                               FirmaMedico = a.FirmaMedico,

                               Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_COLOR).v_Value1,
                               Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_CONSISTENCIA).v_Value1Name,

                               RestosAlimenticios = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESTOS_ALIMENTICIOS).v_Value1Name,
                               Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_SANGRE).v_Value1Name,
                               Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_MOCO).v_Value1Name,
                               Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_QUISTES).v_Value1Name,
                               Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HUEVOS).v_Value1Name,
                               Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_TROFOZOITOS).v_Value1Name,
                               Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_HEMATIES).v_Value1Name,
                               Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_LEUCOCITOS).v_Value1Name,
                               Resultados = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SIMPLE_EXAMEN_HECES_RESULTADOS).v_Value1, 
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<ReportParasitologicoSeriado> GetReportParasitologicoSeriado(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportParasitologicoSeriado
                                 {
                                     FechaSinFormato = A.d_ServiceDate.Value,
                                     Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = D.v_Name,
                                     Puesto = E.v_CurrentOccupation
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let ValorFecha = FormatearFecha(a.FechaSinFormato)
                           let Test = ValoresComponente(pstrserviceId, Constants.PARASITOLOGICO_SERIADO_ID)
                           select new ReportParasitologicoSeriado
                           {
                               LogoEmpresa = LogoEmpresa,
                               Paciente = a.Paciente,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Fecha = ValorFecha,
                               FirmaMedico = a.FirmaMedico,

                               Muestra1Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_COLOR).v_Value1,
                               Muestra1Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_CONSISTENCIA).v_Value1Name,
                               Muestra1RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_RESTOS_ALIMENTICIOS).v_Value1Name,
                               Muestra1Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_SANGRE).v_Value1Name,
                               Muestra1Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_MOCO).v_Value1Name,
                               Muestra1Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_QUISTES).v_Value1Name,
                               Muestra1Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HUEVOS).v_Value1Name,
                               Muestra1Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_TROFOZOITOS).v_Value1Name,
                               Muestra1Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_HEMATIES).v_Value1Name,
                               Muestra1Luecocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_PRIMERA_LEUCOCITOS).v_Value1Name,

                               Muestra2Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_COLOR).v_Value1,
                               Muestra2Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_CONSISTENCIA).v_Value1Name,
                               Muestra2RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_RESTOS_ALIMENTICIOS).v_Value1Name,
                               Muestra2Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_SANGRE).v_Value1Name,
                               Muestra2Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_MOCO).v_Value1Name,
                               Muestra2Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_QUISTES).v_Value1Name,
                               Muestra2Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HUEVOS).v_Value1Name,
                               Muestra2Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_TROFOZOITOS).v_Value1Name,
                               Muestra2Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_HEMATIES).v_Value1Name,
                               Muestra2Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_SEGUNDA_LEUCOCITOS).v_Value1Name,

                               Muestra3Color = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_COLOR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_COLOR).v_Value1,
                               Muestra3Consistencia = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_CONSISTENCIA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_CONSISTENCIA).v_Value1Name,
                               Muestra3RestosAlim = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESTOS_ALIMENTICIOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESTOS_ALIMENTICIOS).v_Value1Name,
                               Muestra3Sangre = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_SANGRE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_SANGRE).v_Value1Name,
                               Muestra3Moco = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_MOCO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_MOCO).v_Value1Name,
                               Quistes = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_QUISTES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_QUISTES).v_Value1Name,
                               Muestra3Huevos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HUEVOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HUEVOS).v_Value1Name,
                               Muestra3Trofozoitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_TROFOZOITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_TROFOZOITOS).v_Value1Name,
                               Muestra3Hematies = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_HEMATIES).v_Value1Name,
                               Muestra3Leucocitos = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_LEUCOCITOS).v_Value1Name,

                               Resultado = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESULTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.PARASITOLOGICO_SERIADO_EXAMEN_HECES_TERCERA_RESULTADOS).v_Value1,
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {
                throw;
            }
        }
        
        public List<ReportHemogramaCompleto> GetReportHemogramaCompleto(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportHemogramaCompleto
                                 {
                                     FechaSinFormato = A.d_ServiceDate.Value,
                                     Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = D.v_Name,
                                     Puesto = E.v_CurrentOccupation
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let ValorFecha = FormatearFecha(a.FechaSinFormato)
                           let Test = ValoresComponente(pstrserviceId, Constants.HEMOGRAMA_COMPLETO_ID)
                           let Sangre = ValoresComponente(pstrserviceId, Constants.GRUPO_Y_FACTOR_SANGUINEO_ID)
                           select new ReportHemogramaCompleto
                           {
                               LogoEmpresa = LogoEmpresa,
                               Paciente = a.Paciente,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Fecha = ValorFecha,
                               FirmaMedico = a.FirmaMedico,

                               HematocritoReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO).v_Value1,
                               HematocritoRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO_DESEABLE) == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATOCRITO_DESEABLE).v_Value1,

                               HemoglobinaReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA).v_Value1,
                               HemoglobinaRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMOGLOBINA_DESEABLE).v_Value1,

                               GlobulosRojosReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES).v_Value1,
                               GlobulosRojosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_HEMATIES_DESEABLE).v_Value1,

                               LeucocitosReslt = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS).v_Value1,
                               LeucocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_LEUCOCITOS_DESEABLE).v_Value1,

                               RecuPlaquetasResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS).v_Value1,
                               RecuPlaquetasRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS_DESEABLE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_PLAQUETAS_DESEABLE).v_Value1,

                               AbastonadosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS).v_Value1,
                               AbastonadosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_ABASTONADOS_DESEABLE).v_Value1,

                               SegmentadosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS).v_Value1,
                               SegmentadoRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_SEGMENTADOS_DESEABLE).v_Value1,

                               EosinofilosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS).v_Value1,
                               EosinofilosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_EOSINOFILOS_DESEABLE).v_Value1,

                               BasofilosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS).v_Value1,
                               BasofilosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_BASOFILOS_DESEABLE).v_Value1,

                               MonocitosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS).v_Value1,
                               MonocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_MONOCITOS_DESEABLE).v_Value1,

                               LinfocitosResult = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS).v_Value1,
                               LinfocitosRef = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS_DESEABLE)  == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_FORMULA_LEUCOCITARIA_LINFOCITOS_DESEABLE).v_Value1,

                               Sanguineo = Sangre.Count == 0 || Sangre.Find(p => p.v_ComponentFieldId == Constants.GRUPO_SANGUINEO_ID) == null ? string.Empty : Sangre.Find(p => p.v_ComponentFieldId == Constants.GRUPO_SANGUINEO_ID).v_Value1Name,
                               Factor = Sangre.Count == 0 || Sangre.Find(p => p.v_ComponentFieldId == Constants.FACTOR_SANGUINEO_ID) == null ? string.Empty : Sangre.Find(p => p.v_ComponentFieldId == Constants.FACTOR_SANGUINEO_ID).v_Value1Name,

                               Observaciones = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA) == null? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.HEMOGRAMA_COMPLETO_CONCLUSIONES_DE_HEMOGRAMA).v_Value1,


                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }
        
        public List<ReportExamenOrinaCompleto> GetReportExamenCompletoOrina(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportExamenOrinaCompleto
                                 {
                                     FechaSinformatear = A.d_ServiceDate.Value,
                                     Paciente = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     Empresa = D.v_Name,
                                     Puesto = E.v_CurrentOccupation
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let ValorFecha = FormatearFecha(a.FechaSinformatear)
                           let Test = ValoresComponente(pstrserviceId, Constants.EXAMEN_COMPLETO_DE_ORINA_ID)
                           select new ReportExamenOrinaCompleto
                           {
                               LogoEmpresa =LogoEmpresa,
                               Paciente = a.Paciente,
                               Empresa = a.Empresa,
                               Puesto = a.Puesto,
                               Fecha = ValorFecha,
                               FirmaMedico = a.FirmaMedico,

                               Color = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_COLOR).v_Value1Name,
                               Aspecto = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_ASPECTO).v_Value1Name,
                               Densidad = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_DENSIDAD).v_Value1,
                               Ph = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MACROSCOPICO_PH).v_Value1,

                               CelulasEpiteliales = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CELULAS_EPITELIALES).v_Value1Name,
                               Leucocitos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_LEUCOCITOS).v_Value1,
                               Hematies = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_HEMATIES).v_Value1,
                               Germenes = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_GERMENES).v_Value1Name,
                               Cilindros = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CILINDROS).v_Value1Name,
                               Cristales = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_MICROSCOPICO_CRISTALES).v_Value1,

                               Nitritos = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_NITRITOS).v_Value1Name,
                               Proteinas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_PROTEINAS).v_Value1Name,
                               Glucosa = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_GLUCOSA).v_Value1Name,
                               Cetonas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_CETONAS).v_Value1Name,
                               Urobilinogeno = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_UROBILINOGENO).v_Value1Name,
                               Bilirrubinas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_BILIRRUBINA).v_Value1Name,
                               Sangre = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_SANGRE).v_Value1Name,
                               Hemoglobina = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.EXAMEN_COMPLETO_ORINA_BIOQUIMICO_HEMOGLOBINA).v_Value1Name,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }
        
        public List<ReportAutorizacionDosajeDrogas> GetReportAutorizacionDosajeDrogas(string pstrserviceId, string pstrComponentId , List<ServiceComponentList> pListaDosaje)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportAutorizacionDosajeDrogas
                                 {
                                     FechaSinformatear = A.d_ServiceDate.Value,
                                     Trabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FirmaMedico = pme.b_SignatureImage,
                                     EmpresaTrabajador = D.v_Name,
                                     FechaNacimiento = E.d_Birthdate.Value,
                                     FirmaTrabajador = E.b_RubricImage,
                                     HuellaTrabajador = E.b_FingerPrintImage,
                                     Puesto = E.v_CurrentOccupation,
                                     Empresa = D.v_Name,
                                     Dni = E.v_DocNumber
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
             
                var sql = (from a in objEntity.ToList()

                           let Test = ValoresComponente(pstrserviceId, Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           let Edad =  GetAge(a.FechaNacimiento)
                           let ValorFecha = FormatearFecha(a.FechaSinformatear)
                           let ValoresDosaje = DevolverExamensConResultados(pstrserviceId, pListaDosaje)
                            
                           select new ReportAutorizacionDosajeDrogas
                           {
                               LogoEmpresa = LogoEmpresa,
                               Fecha =ValorFecha,
                               Trabajador = a.Trabajador,
                               Dni = a.Dni,
                               Clinica = MedicalCenter.v_Name,
                               FirmaMedico = a.FirmaMedico,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               EmpresaTrabajador = a.EmpresaTrabajador,
                               Edad = Edad,
                               Puesto    =a.Puesto,
                               Empresa = a.Empresa,
                               SufreEnfermedadSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_SUFRE_ENFER).v_Value1,
                               EnfermedadCual = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_SUFRE_ENFER_CUAL).v_Value1,
                               ConsumeMedicamentoSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_LUEGO_COMIDA).v_Value1,
                               ConsumeMedicamentoCual = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONDUCIENDO).v_Value1,
                               TomaCocaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_DESCANSAR).v_Value1,
                               TomaCocaCuantas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TOMA_MATECOCA_CUANTAS_VECES_SEMANA1).v_Value1,
                               ConsumioUltimo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TOMA_MATECOCA_ULTIMA_VEZ).v_Value1,
                               ConsumeProductoCocaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_HABITUALMENTE_PROD_COCA).v_Value1,
                               ConsumeProductoCocaCuantas = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CUANTAS_VECES_SEMANA2).v_Value1,
                               ConsumeProductoCocaUltima = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_CONSUME_HABITUALMENTE_PROD_COCA_CONSUMIO_ULTIMA_VEZ).v_Value1,
                               TratamientoAnestesiaSiNo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_TRATAMIENTO_ANESTESIA).v_Value1,
                               Metodo = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_METODO).v_Value1,
                               Muestra = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MUESTRA).v_Value1,
                               Cocaina = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).v_Value1Name,
                               Marihuana = Test.Count == 0 ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).v_Value1Name,
                               Resultado = ValoresDosaje
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        private string DevolverExamensConResultados(string  seviceId ,List<ServiceComponentList> pListaDosaje)
        {
            try
            {


                string Resultado = "";
                string[] Examenes = new string[] 
            {
            Constants.TOXICOLOGICO_COLINESTERASA,
            Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA,
            Constants.TOXICOLOGICO_BENZODIAZEPINAS,
            Constants.TOXICOLOGICO_ALCOHOLEMIA,
            Constants.TOXICOLOGICO_ANFETAMINAS,
            Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID,
            };


                var Lista = pListaDosaje.FindAll(P => Examenes.Contains(P.v_ComponentId));


                foreach (var item in Lista)
                {
                    var Valor = ValoresComponente(seviceId, item.v_ComponentId);

                    if (item.v_ComponentId == Constants.TOXICOLOGICO_COLINESTERASA)
                    {
                        Resultado =Resultado + "COLINESTERASA                                            " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_COLINESTERASA_RESULTADO).v_Value1Name + "\n";
                    }
                    else if (item.v_ComponentId == Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA)
                    {
                        Resultado = Resultado + "CARBOXIHEMOGLOBINA                                      " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_CARBOXIHEMOGLOBINA_RESULTADO).v_Value1Name + "\n";
                    }
                    else if (item.v_ComponentId == Constants.TOXICOLOGICO_BENZODIAZEPINAS)
                    {
                        Resultado = Resultado + "BENZODIAZEPINAS                                          " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_BENZODIAZEPINAS_RESULTADO).v_Value1Name + "\n";
                    }
                    else if (item.v_ComponentId == Constants.TOXICOLOGICO_ALCOHOLEMIA)
                    {
                        Resultado = Resultado + "ALCOHOLEMIA                                              " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_ALCOHOLEMIA_RESULTADO).v_Value1Name + "\n";
                    }
                    else if (item.v_ComponentId == Constants.TOXICOLOGICO_ANFETAMINAS)
                    {
                        Resultado = Resultado + "ANFETAMINAS                                              " + Valor.Find(p => p.v_ComponentFieldId == Constants.TOXICOLOGICO_ANFETAMINAS_RESULTADO).v_Value1Name + "\n";
                    }
                    else if (item.v_ComponentId == Constants.TOXICOLOGICO_COCAINA_MARIHUANA_ID)
                    {
                        Resultado = Resultado + "MARIHUANA                                                " + Valor.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_MARIHUANA).v_Value1Name + "\n";
                        Resultado = Resultado + "COCAINA                                                  " + Valor.Find(p => p.v_ComponentFieldId == Constants.COCAINA_MARIHUANA_TOXICOLOGICOS_COCAINA).v_Value1Name + "\n";
                  
                    }
                }

                return Resultado;
            }
            catch (Exception)
            {
                
                throw;
            }

       




        }

        // Alberto
        public List<ReportEvaGinecologico> GetReportEvaluacionGinecologico(string pstrserviceId, string pstrComponentId)
        {

            string[] excludeComponents = {   Sigesoft.Common.Constants.GINECOLOGIA_ID,
                                                 Sigesoft.Common.Constants.EXAMEN_MAMA_ID,
                                                 Sigesoft.Common.Constants.ECOGRAFIA_MAMA_ID ,
                                                 Sigesoft.Common.Constants.PAPANICOLAU_ID,
                                                 Sigesoft.Common.Constants.RESULTADOS_MAMOGRAFIA_ID
                                             };
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join M in dbContext.systemparameter on new { a = B.i_TypeOfInsuranceId.Value, b = 188 }
                                     equals new { a = M.i_ParameterId, b = M.i_GroupId } into M_join
                                 from M in M_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()


                                 //join F in dbContext.component on new { a = E.v_ComponentId, b = 12 }
                                 //                                       equals new { a = F.v_ComponentId, b = F.i_CategoryId.Value } into F_join
                                 //from F in F_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId 


                                 join I in dbContext.systemparameter on new { a = A.i_MacId.Value, b = 134 }
                                   equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
                                 from I in I_join.DefaultIfEmpty()

                                 join ccc in dbContext.diagnosticrepository on A.v_ServiceId equals ccc.v_ServiceId into ccc_join
                                 from ccc in ccc_join.DefaultIfEmpty()  // ESO

                                 join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                                 from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos


                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEvaGinecologico
                                 {
                                     v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                     Ficha = E.v_ServiceComponentId,
                                     Historia = A.v_ServiceId,
                                     NombreTrabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Seguro = M.v_Value1,
                                     EmpresaCliente = D.v_Name,
                                     EmpresaEmpleadora = C1.v_Name,
                                     Medico = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
                                     FechaAtencion = A.d_ServiceDate.Value,
                                     Fum = A.d_Fur.Value,
                                     Gestapara = A.v_Gestapara,
                                     MAC = I.v_Value1,
                                     Menarquia = A.v_Menarquia,
                                     RegimenCatamenial = A.v_CatemenialRegime,
                                     CirugiaGinecologica = A.v_CiruGine,
                                     FirmaDoctor =  pme.b_SignatureImage,
                                     FotoPaciente = B.b_PersonImage,
                                     Diagnosticos = ddd.v_Name,
                                     v_ComponentId = ccc.v_ComponentId

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           let Gine = ValoresComponente(pstrserviceId, Constants.GINECOLOGIA_ID)
                         
                           
                           let ExamMama = ValoresComponente(pstrserviceId, Constants.EXAMEN_MAMA_ID)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           //let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)
                           let AntePersonales = ValoresComponente(pstrserviceId, Constants.ISTAS_21_ABREVIADA)

                           //let ResultadoPapanicolao = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
                           let GineAuxiliares = ValoresComponente(pstrserviceId, Constants.PAPANICOLAU_ID)
                           let ResultadoEcografia = ValoresComponente(pstrserviceId, Constants.RESULTADOS_MAMOGRAFIA_ID)
                           let ResultadoEcografiaMama = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_MAMA_ID)

                           select new ReportEvaGinecologico
                           {
                               v_ComponentId = a.v_ComponentId,
                               v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                               Ficha = a.Ficha,
                               Historia = a.Historia,
                               Logo = LogoEmpresa,
                               NombreTrabajador = a.NombreTrabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               Seguro = a.Seguro,
                               EmpresaCliente = a.EmpresaCliente,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               CentroMedico = (from n in dbContext.organization
                                               where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                               select n.v_Name + ", " + n.v_Address).SingleOrDefault<string>(),
                               Medico = a.Medico,
                               FechaAtencion = a.FechaAtencion,
                               Fum = a.Fum,
                               Gestapara = a.Gestapara,
                               FechaPAP = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMO_PAP).v_Value1,
                               MAC = a.MAC,
                               Menarquia = a.Menarquia,
                               FechaMamografia =  Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_GINECOLOGICA_ANTECEDENTES_FECHA_ULTIMA_MAMOGRAFIA).v_Value1,
                               RegimenCatamenial = a.RegimenCatamenial,
                               CirugiaGinecologica = a.CirugiaGinecologica,

                               Leucorrea = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA).v_Value1,
                               LeucorreaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_LEUCORREA_COMENTARIO).v_Value1,

                               Dipareunia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA).v_Value1,
                               DipareuniaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_DISPAREUNIA_COMENTARIO).v_Value1,

                               Incontinencia = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA).v_Value1,
                               IncontinenciaDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_INCONTINENCIA_URINARIA_COMENTARIO).v_Value1,

                               Otros = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS).v_Value1,
                               OtrosDescripcion = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_SINTOMAS_OTROS_COMENTARIO).v_Value1,

                               EvaluacionGinecologica = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_HALLAZGOS_HALLAZGOS).v_Value1,
                                                            
                               ExamenMama = ExamMama.Count == 0 ? string.Empty : ExamMama.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_EX_MAMA_HALLAZGOS_HALLAZGOS).v_Value1.Replace("\n", " "),
                              


                               
                               ResultadoPAP = GineAuxiliares.Count == 0 ? "N/A" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1 == "" ? "" : GineAuxiliares.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_HALLAZGOS).v_Value1,
                               ResultadoMamografia = ResultadoEcografia.Count == 0 ? "N/A" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografia.Find(p => p.v_ComponentFieldId == Constants.PAPANICOLAU_RADIOGRAFIA_HALLAZGOS).v_Value1,
                               ResultadoMama = ResultadoEcografiaMama.Count == 0 ? "N/A" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1 == "" ? "" : ResultadoEcografiaMama.Find(p => p.v_ComponentFieldId == Constants.RESULTADOS_DE_ECOGRAFIA_HALLAZGOS).v_Value1,
                             





                               Diagnosticos = a.Diagnosticos,
                               Recomendaciones = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),

                               FotoPaciente = a.FotoPaciente,
                               FirmaDoctor = a.FirmaDoctor,
                               AntecedentesPersonales = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_PERSONALES_ANTECEDENTES).v_Value1,

                               AntecendentesFamiliares = Gine.Count == 0 ? string.Empty : Gine.Find(p => p.v_ComponentFieldId == Constants.GINECOLOGIA_ANTECEDENTES_FAMILIARES).v_Value1,


                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                var otherExams = sql.FindAll(p => excludeComponents.Contains(p.v_ComponentId));


                return otherExams;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportInformeEspirometria> GetReportInformeEspirometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join SP1 in dbContext.datahierarchy on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP1.i_ItemId, b = SP1.i_GroupId } into SP1_join
                                 from SP1 in SP1_join.DefaultIfEmpty()

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on B.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 // Usuario Tecnologo *************************************
                                 join tec in dbContext.systemuser on B.i_UpdateUserTechnicalDataRegisterId equals tec.i_SystemUserId into tec_join
                                 from tec in tec_join.DefaultIfEmpty()

                                 join ptec in dbContext.professional on tec.v_PersonId equals ptec.v_PersonId into ptec_join
                                 from ptec in ptec_join.DefaultIfEmpty()
                                 // *******************************************************  

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeEspirometria
                                 {
                                     EspirometriaNro = B.v_ServiceComponentId,
                                     Fecha = A.d_ServiceDate.Value,
                                     HCL = A.v_ServiceId,
                                     i_TipoEvaluacion = C.i_MasterServiceTypeId.Value,
                                     RazonSocial = D.v_Name,
                                     ActividadEconomica = SP1.v_Value1,
                                     PuestoTrabajo = E.v_CurrentOccupation,
                                     NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FechaNacimiento = E.d_Birthdate.Value,
                                     i_Sexo = E.i_SexTypeId.Value,
                                     FirmaRealizaEspirometria = ptec.b_SignatureImage,
                                     FirmaMedicoInterpreta = pme.b_SignatureImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           let nameMedicalCenter = GetNameMedicalCenter()
                           let Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID)
                           let age = GetAge(a.FechaNacimiento.Value)
                           let Antropometria = ValoresComponente(pstrserviceId, Constants.ANTROPOMETRIA_ID)
                          
                           let DxEspirometria = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.ESPIROMETRIA_ID)   
                           select new ReportInformeEspirometria
                           {
                               Logo = MedicalCenter.b_Image,
                               EspirometriaNro = a.EspirometriaNro,
                               Fecha = a.Fecha,
                               HCL = a.HCL,
                               TipoEvaluacion = a.i_TipoEvaluacion.ToString(),
                               LugarExamen = nameMedicalCenter,
                               RazonSocial = a.RazonSocial,
                               ActividadEconomica = a.ActividadEconomica,
                               PuestoTrabajo = a.PuestoTrabajo,
                               TiempoTrabajo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_TIEMPO_TRABAJO_ID).v_Value1,
                               NombreTrabajador = a.NombreTrabajador,
                               Edad = age,
                               Sexo = a.i_Sexo.ToString(),
                               Talla = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_TALLA_ID).v_Value1,
                               Peso = Antropometria.Count == 0 ? string.Empty : Antropometria.Find(p => p.v_ComponentFieldId == Constants.ANTROPOMETRIA_PESO_ID).v_Value1,
                               OrigenEtnico = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ORIGEN_ETNICO).v_Value1,
                               FumadorSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_TABAQUISMO).v_Value1,
                               CVF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_ABS_CVF).v_Value1,
                               VEF1 = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_VEF_1).v_Value1,
                               VEF1CVF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_VEF_1_CVF).v_Value1,
                               FET = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_FET).v_Value1,
                               FEV2575 = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCIÓN_RESPIRATORIA_ABS_FEF_25_75).v_Value1,
                               PEF = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_PEF).v_Value1,
                               CVFDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_CVF).v_Value1,
                               VEF1Des = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_VEF_1).v_Value1,
                               VEF1CVFDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_VEF_1_CVF).v_Value1,
                               FETDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_FET).v_Value1,
                               FEV2575Des = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_F_25_75).v_Value1,
                               PEFDes = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_DESCRIPCION_PEF).v_Value1,
                               EdadPulmonar = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_FUNCION_RESPIRATORIA_EDAD_PULMONAR_ESTIMADA).v_Value1,
                               Resultado = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_RESULTADO_ID).v_Value1,
                               Observacion = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_OBSERVACION_ID).v_Value1,
                               FirmaRealizaEspirometria = a.FirmaRealizaEspirometria,
                               FirmaMedicoInterpreta = a.FirmaMedicoInterpreta,
                               Dx = DxEspirometria,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportCuestionarioEspirometria> GetReportCuestionarioEspirometria_(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join SP1 in dbContext.systemparameter on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP1.i_ParameterId, b = SP1.i_GroupId } into SP1_join
                                 from SP1 in SP1_join.DefaultIfEmpty()

                                 join F in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals F.v_ServiceComponentId  into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 join G in dbContext.multimediafile on F.v_MultimediaFileId equals G.v_MultimediaFileId into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId && F.i_IsDeleted == 0 && G.i_IsDeleted == 0
                                 select new ReportCuestionarioEspirometria
                                 {
                                     IdServicio = A.v_ServiceId,
                                     IdComponent = B.v_ServiceComponentId,
                                     Fecha = A.d_ServiceDate.Value,
                                     NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FechaNacimineto = E.d_Birthdate,
                                     Genero = E.i_SexTypeId.Value,
                                     FirmaTrabajador = E.b_RubricImage,
                                     HuellaTrabajador = E.b_FingerPrintImage,
                                     b_File = G.b_File

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()

                           let Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID)
                           let age = GetAge(a.FechaNacimineto.Value)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           select new ReportCuestionarioEspirometria
                           {
                               IdServicio = a.IdServicio,
                               IdComponent = a.IdComponent,
                               Fecha = a.Fecha,
                               NombreTrabajador = a.NombreTrabajador,
                               FechaNacimineto = a.FechaNacimineto,
                               Edad = age,
                               Logo = LogoEmpresa,
                               b_File = a.b_File,
                               Pregunta1ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_1).v_Value1,
                               Pregunta2ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_2).v_Value1,
                               Pregunta3ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_3).v_Value1,
                               Pregunta4ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_4).v_Value1,
                               Pregunta5ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_5).v_Value1,

                               HemoptisisSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.PIROMETRIA_ANTECEDENTES_HEMOSTISIS).v_Value1,
                               PseumotoraxSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_PNEUMOTORAX).v_Value1,
                               TraqueostomiaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_TRAQUEOSTOMIA).v_Value1,
                               SondaPleuralSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_SONDA_PLEURAL).v_Value1,
                               AneurismaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_ANEURISMA_CEREBRAL).v_Value1,
                               EmboliaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBOLIA_PULMONAR).v_Value1,
                               InfartoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INFARTO_RECIENTE).v_Value1,
                               InestabilidadSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INESTABILIDAD_CV).v_Value1,
                               FiebreSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_FIEBRE_NAUSEAS).v_Value1,
                               EmbarazoAvanzadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_AVANZADO).v_Value1,
                               EmbarazoComplicadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_COMPLICADO).v_Value1,

                               Pregunta1BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESESPIROMETRIA_CUESTIONARIO_PARA_1).v_Value1,
                               Pregunta2BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_2).v_Value1,
                               Pregunta3BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_3).v_Value1,
                               Pregunta4BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_4).v_Value1,
                               Pregunta5BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_5).v_Value1,
                               Pregunta6BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_6).v_Value1,
                               Pregunta7BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_7).v_Value1,

                               Genero = a.Genero,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public List<ReportCuestionarioEspirometria> GetReportCuestionarioEspirometria(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service

                                 join B in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                     equals new { a = B.v_ServiceId, b = B.v_ComponentId } into B_join
                                 from B in B_join.DefaultIfEmpty()


                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join I in dbContext.systemparameter on new { a = C.i_EsoTypeId.Value, b = 118 }
                                                    equals new { a = I.i_ParameterId, b = I.i_GroupId } into I_join
                                 from I in I_join.DefaultIfEmpty()


                                 join D in dbContext.organization on C.v_EmployerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join E in dbContext.person on A.v_PersonId equals E.v_PersonId into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join SP1 in dbContext.systemparameter on new { a = D.i_SectorTypeId.Value, b = 104 }
                                        equals new { a = SP1.i_ParameterId, b = SP1.i_GroupId } into SP1_join
                                 from SP1 in SP1_join.DefaultIfEmpty()

                                 join F in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals F.v_ServiceComponentId into F_join
                                 from F in F_join.DefaultIfEmpty()

                                 join G in dbContext.multimediafile on F.v_MultimediaFileId equals G.v_MultimediaFileId into G_join
                                 from G in G_join.DefaultIfEmpty()

                                 join F1 in dbContext.systemuser on B.i_ApprovedUpdateUserId equals F1.i_SystemUserId into F1_join
                                 from F1 in F1_join.DefaultIfEmpty()

                                 join Z in dbContext.person on F1.v_PersonId equals Z.v_PersonId into Z_join
                                 from Z in Z_join.DefaultIfEmpty()

                                 join D1 in dbContext.organization on C.v_CustomerOrganizationId equals D1.v_OrganizationId into D1_join
                                 from D1 in D1_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                     //&& F.i_IsDeleted == 0 
                                 && (G.i_IsDeleted == 0 || G.i_IsDeleted == null)
                                 select new ReportCuestionarioEspirometria
                                 {
                                     IdServicio = A.v_ServiceId,
                                     IdComponent = B.v_ServiceComponentId,
                                     Fecha = A.d_ServiceDate.Value,
                                     NombreTrabajador = E.v_FirstName + " " + E.v_FirstLastName + " " + E.v_SecondLastName,
                                     FechaNacimineto = E.d_Birthdate,
                                     Genero = E.i_SexTypeId.Value,
                                     FirmaTrabajador = E.b_RubricImage,
                                     HuellaTrabajador = E.b_FingerPrintImage,
                                     b_File = G.b_File
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()

                           let Espirometria = ValoresComponente(pstrserviceId, Constants.ESPIROMETRIA_ID)
                           let age = GetAge(a.FechaNacimineto.Value)
                           let LogoEmpresa = GetLogoMedicalCenter()
                           select new ReportCuestionarioEspirometria
                           {
                               //EmpresaCliente = a.EmpresaCliente,
                               IdServicio = a.IdServicio,
                               IdComponent = a.IdComponent,
                               Fecha = a.Fecha,
                               NombreTrabajador = a.NombreTrabajador,
                               FechaNacimineto = a.FechaNacimineto,
                               Edad = age,
                               Logo = LogoEmpresa,
                               b_File = a.b_File,
                               //Dni = a.Dni,
                               Pregunta1ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_1).v_Value1,
                               Pregunta2ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_2).v_Value1,
                               Pregunta3ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_3).v_Value1,
                               Pregunta4ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_4).v_Value1,
                               Pregunta5ASiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_DE_EXCLUSION_5).v_Value1,

                               HemoptisisSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.PIROMETRIA_ANTECEDENTES_HEMOSTISIS).v_Value1,
                               PseumotoraxSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_PNEUMOTORAX).v_Value1,
                               TraqueostomiaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_TRAQUEOSTOMIA).v_Value1,
                               SondaPleuralSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_SONDA_PLEURAL).v_Value1,
                               AneurismaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_ANEURISMA_CEREBRAL).v_Value1,
                               EmboliaSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBOLIA_PULMONAR).v_Value1,
                               InfartoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INFARTO_RECIENTE).v_Value1,
                               InestabilidadSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_INESTABILIDAD_CV).v_Value1,
                               FiebreSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_FIEBRE_NAUSEAS).v_Value1,
                               EmbarazoAvanzadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_AVANZADO).v_Value1,
                               EmbarazoComplicadoSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_ANTECEDENTES_EMBARAZO_COMPLICADO).v_Value1,

                               Pregunta1BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESESPIROMETRIA_CUESTIONARIO_PARA_1).v_Value1,
                               Pregunta2BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_2).v_Value1,
                               Pregunta3BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_3).v_Value1,
                               Pregunta4BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_4).v_Value1,
                               Pregunta5BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_5).v_Value1,
                               Pregunta6BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_6).v_Value1,
                               Pregunta7BSiNo = Espirometria.Count == 0 ? string.Empty : Espirometria.Find(p => p.v_ComponentFieldId == Constants.ESPIROMETRIA_CUESTIONARIO_PARA_7).v_Value1,

                               Genero = a.Genero,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,

                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                               //NombreUsuarioGraba = a.NombreUsuarioGraba,
                               //TipoExamen = a.TipoExamen
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alejandro
        public List<DiagnosticsByAgeGroup> ReportDiagnosticsByAgeGroup(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string ageGroupText, int top)
        {
          

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query
                    var MedicalCenter = GetInfoMedicalCenter(); 
                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()


                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                          dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId into go_join
                                    from go in go_join.DefaultIfEmpty()

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByAgeGroup
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        EmpresaCliente = G.v_Name,
                                        LogoCliente = G.b_Image,
                                        EmpresaPropietaria = MedicalCenter.v_Name,
                                        LogoPropietaria = MedicalCenter.b_Image

                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };


                    var sql = (from a in objEntity.AsEnumerable()

                               let age = GetAge(a.FechaNacimiento.Value)
                               let ageGroup = GetGrupoEtario(age)

                               where !excludeDx.Contains(a.v_DiseasesId)
                               select new DiagnosticsByAgeGroup
                               {
                                   //IdServicio = a.IdServicio,
                                   //IdProtocolId = a.IdProtocolId,
                                   //IdTrabajador = a.IdTrabajador,
                                   //Trabajador = a.Trabajador,
                                   GrupoEtario = ageGroup,

                                   //FechaNacimiento = g.Key.FechaNacimiento,
                                   //EdadTrabajador = age,

                                   //GeneroTrabajador = a.GeneroTrabajador,
                                   //v_DiseasesId = a.v_DiseasesId,
                                   v_DiseasesName = a.v_DiseasesName,

                                   //EmpresaCliente = a.EmpresaCliente,
                                   //LogoCliente = a.LogoCliente,
                                   //EmpresaPropietaria = a.EmpresaPropietaria,
                                   //LogoPropietaria = a.LogoPropietaria

                               });

                    List<DiagnosticsByAgeGroup> gg = new List<DiagnosticsByAgeGroup>();

                    if (!string.IsNullOrEmpty(ageGroupText))
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario } into g
                              where g.Key.GrupoEtario == ageGroupText.Trim()
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count()
                              }).ToList();
                    }
                    else
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario } into g
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count()
                              }).ToList();
                    }

                    return gg.Take(top).OrderByDescending(p => p.CantTrabajador).ToList();

                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //alberto
        public List<DiagnosticsByAgeGroup> ReportDiagnosticsByAgeGroupDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string ageGroupText, int top)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query
                    var MedicalCenter = GetInfoMedicalCenter();
                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()


                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                          dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId into go_join
                                    from go in go_join.DefaultIfEmpty()

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByAgeGroup
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "M" : "F",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        EmpresaCliente = G.v_Name,
                                        LogoCliente = G.b_Image,
                                        EmpresaPropietaria = MedicalCenter.v_Name,
                                        LogoPropietaria = MedicalCenter.b_Image

                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };


                    var sql = (from a in objEntity.AsEnumerable()

                               let age = GetAge(a.FechaNacimiento.Value)
                               let ageGroup = GetGrupoEtario(age)

                               where !excludeDx.Contains(a.v_DiseasesId)
                               select new DiagnosticsByAgeGroup
                               {
                                   //IdServicio = a.IdServicio,
                                   //IdProtocolId = a.IdProtocolId,
                                   //IdTrabajador = a.IdTrabajador,
                                   Trabajador = a.Trabajador,
                                   GrupoEtario = ageGroup,

                                   //FechaNacimiento = g.Key.FechaNacimiento,
                                   //EdadTrabajador = age,

                                   //GeneroTrabajador = a.GeneroTrabajador,
                                   //v_DiseasesId = a.v_DiseasesId,
                                   v_DiseasesName = a.v_DiseasesName,

                                   //EmpresaCliente = a.EmpresaCliente,
                                   //LogoCliente = a.LogoCliente,
                                   //EmpresaPropietaria = a.EmpresaPropietaria,
                                   //LogoPropietaria = a.LogoPropietaria

                               });

                    List<DiagnosticsByAgeGroup> gg = new List<DiagnosticsByAgeGroup>();

                    if (!string.IsNullOrEmpty(ageGroupText))
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario, a.Trabajador, a.v_DiseasesId } into g
                              where g.Key.GrupoEtario == ageGroupText.Trim()
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count(),
                                  Trabajador = g.Key.Trabajador,
                                  v_DiseasesId = g.Key.v_DiseasesId
                              }).ToList();
                    }
                    else
                    {
                        gg = (from a in sql
                              group a by new { a.v_DiseasesName, a.GrupoEtario, a.Trabajador, a.v_DiseasesId } into g
                              select new DiagnosticsByAgeGroup
                              {
                                  GrupoEtario = g.Key.GrupoEtario,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  CantTrabajador = g.Count(),
                                  Trabajador = g.Key.Trabajador,
                                  v_DiseasesId = g.Key.v_DiseasesId
                              }).ToList();
                    }

                    return gg.OrderByDescending(p => p.CantTrabajador).ToList();

                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alberto

        public List<CebeceraReporte> CabeceraReporte(string IdEmpresaCiente)
        {
            try
            {
                  using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var MedicalCenter = GetInfoMedicalCenter(); 
                    var objEntity = (from A in dbContext.organization
                                    where A.v_OrganizationId == IdEmpresaCiente
                                    select new CebeceraReporte
                                    {
                                        Empresacliente = A.v_Name,
                                        LogoCliente = A.b_Image,
                                        EmpresaPropietaria = MedicalCenter.v_Name,
                                        LogoPropietaria = MedicalCenter.b_Image
                                    }).ToList();

                    return objEntity;
                }
               
            }
            catch (Exception)
            {

                throw;
            }
        }

      


        //Alejandro
        public List<DiagnosticsByGender> ReportDiagnosticsByGender(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query
                    var MedicalCenter = GetInfoMedicalCenter(); 
                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGender
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "Masculino" : "Femenino",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        i_SexTypeId = B.i_SexTypeId,

                                        EmpresaCliente = G.v_Name,
                                        LogoCliente = G.b_Image,
                                        EmpresaPropietaria = MedicalCenter.v_Name,
                                        LogoPropietaria = MedicalCenter.b_Image

                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION
                    
                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));
                    
                    var gg = (from a in objEntity.AsEnumerable()
                              //, a.EmpresaCliente, a.LogoCliente, a.EmpresaPropietaria, a.LogoPropietaria
                              group a by new { a.v_DiseasesName, a.GeneroTrabajador} into g
                              //where g.Key.GrupoEtario == ageGroupText
                              select new DiagnosticsByGender
                              {
                                  GeneroTrabajador = g.Key.GeneroTrabajador,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count(),
                                  //LogoCliente = g.Key.LogoCliente,
                                  //EmpresaPropietaria = g.Key.EmpresaPropietaria,
                                  //LogoPropietaria = g.Key.LogoPropietaria

                              }).ToList();


                    return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        public List<DiagnosticsByGender> ReportDiagnosticsByGenderDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query
                    var MedicalCenter = GetInfoMedicalCenter();
                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGender
                                    {
                                        IdServicio = A.v_ServiceId,
                                        IdProtocolId = A.v_ProtocolId,
                                        IdTrabajador = B.v_PersonId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        GeneroTrabajador = B.i_SexTypeId == 1 ? "Masculino" : "Femenino",
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        i_SexTypeId = B.i_SexTypeId,

                                        EmpresaCliente = G.v_Name,
                                        LogoCliente = G.b_Image,
                                        EmpresaPropietaria = MedicalCenter.v_Name,
                                        LogoPropietaria = MedicalCenter.b_Image

                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.GeneroTrabajador, a.Trabajador , a.v_DiseasesId} into g
                              //where g.Key.GrupoEtario == ageGroupText
                              select new DiagnosticsByGender
                              {
                                  GeneroTrabajador = g.Key.GeneroTrabajador,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count(),
                                  Trabajador = g.Key.Trabajador,
                                  v_DiseasesId = g.Key.v_DiseasesId
                              }).ToList();

                    //var max = gg.Max(p => p.NroHallazgos);
                   

                    return gg.OrderByDescending(p => p.NroHallazgos).ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByGroupOccupation> ReportDiagnosticsByGroupOccupation(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {
   
            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGroupOccupation
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_GroupOccupationName = go.v_Name,
                                        v_GroupOccupationId = go.v_GroupOccupationId,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_GroupOccupationName } into g
                              select new DiagnosticsByGroupOccupation
                              {
                                  v_GroupOccupationName = g.Key.v_GroupOccupationName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();


                    return gg.Take(top).OrderByDescending(p => p.NroHallazgos).ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alberto
        public List<DiagnosticsByGroupOccupation> ReportDiagnosticsByGroupOccupationDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top)
        {

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId
                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join go in dbContext.groupoccupation on C.v_GroupOccupationId equals go.v_GroupOccupationId

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByGroupOccupation
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_GroupOccupationName = go.v_Name,
                                        v_GroupOccupationId = go.v_GroupOccupationId,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));


                    //var gg = (from a in objEntity.AsEnumerable()
                    //          group a by new { a.v_DiseasesName, a.GeneroTrabajador, a.Trabajador, a.v_DiseasesId } into g
                    //          //where g.Key.GrupoEtario == ageGroupText
                    //          select new DiagnosticsByGender
                    //          {
                    //              GeneroTrabajador = g.Key.GeneroTrabajador,
                    //              v_DiseasesName = g.Key.v_DiseasesName,
                    //              NroHallazgos = g.Count(),
                    //              Trabajador = g.Key.Trabajador,
                    //              v_DiseasesId = g.Key.v_DiseasesId
                    //          }).ToList();


                    //var gg = (from a in objEntity.AsEnumerable()
                    //          group a by new { a.v_DiseasesName, a.v_GroupOccupationName, a.Trabajador, a.v_DiseasesId } into g
                    //          select new DiagnosticsByGroupOccupation
                    //          {
                    //              v_GroupOccupationName = g.Key.v_GroupOccupationName,
                    //              v_DiseasesName = g.Key.v_DiseasesName,
                    //              NroHallazgos = g.Count(),
                    //              Trabajador = g.Key.Trabajador,
                    //              v_DiseasesId = g.Key.v_DiseasesId
                    //          }).ToList();


                    //return gg.OrderByDescending(p => p.NroHallazgos).ToList();
                    return objEntity.ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByOffice> ReportDiagnosticsByOffice(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top, string[] componentId)
        {
            

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_ComponentName } into g
                              
                              select new DiagnosticsByOffice
                              {
                                  v_ComponentName = g.Key.v_ComponentName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();

                    var dd = gg.OrderByDescending(o => o.NroHallazgos).ToList();
                    var od = dd.Take(top).ToList();

                    return od;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetalle(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, int top, string[] componentId)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N002-DD000000146", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_ComponentName, a.Trabajador, a.v_DiseasesId } into g

                              select new DiagnosticsByOffice
                              {
                                  v_ComponentName = g.Key.v_ComponentName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count(),
                                  Trabajador = g.Key.Trabajador,
                                  v_DiseasesId = g.Key.v_DiseasesId
                              }).ToList();

                    var dd = gg.OrderByDescending(o => o.NroHallazgos).ToList();
                    //var od = dd.Take(top).ToList();

                    return gg;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        //Alejandro
        public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetail(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string[] componentId)
        {
      

            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    var gg = (from a in objEntity.AsEnumerable()
                              group a by new { a.v_DiseasesName, a.v_ComponentName } into g
                              select new DiagnosticsByOffice
                              {
                                  v_ComponentName = g.Key.v_ComponentName,
                                  v_DiseasesName = g.Key.v_DiseasesName,
                                  NroHallazgos = g.Count()
                              }).ToList();


                    return gg;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public List<DiagnosticsByOffice> ReportDiagnosticsByOfficeDetailDetallado(DateTime? FechaInicio, DateTime? FechaFin, string pstrFilterExpression, string[] componentId)
        {


            int isDeleted = (int)SiNo.NO;
            int definitivo = (int)FinalQualification.Definitivo;
            int presuntivo = (int)FinalQualification.Presuntivo;

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join dr in dbContext.diagnosticrepository on A.v_ServiceId equals dr.v_ServiceId

                                    join office in dbContext.component on dr.v_ComponentId equals office.v_ComponentId

                                    join cat in dbContext.systemparameter on new { a = office.i_CategoryId.Value, b = 116 }
                                                                    equals new { a = cat.i_ParameterId, b = cat.i_GroupId } into cat_join
                                    from cat in cat_join.DefaultIfEmpty()

                                    where (dr.i_FinalQualificationId == definitivo ||
                                           dr.i_FinalQualificationId == presuntivo) &&
                                          (dr.i_IsDeleted == isDeleted)

                                    join disea in dbContext.diseases on dr.v_DiseasesId equals disea.v_DiseasesId into disea_join // Diagnosticos
                                    from disea in disea_join.DefaultIfEmpty()

                                    where (A.d_ServiceDate >= FechaInicio && A.d_ServiceDate <= FechaFin)

                                    select new DiagnosticsByOffice
                                    {
                                        v_DiseasesId = disea.v_DiseasesId,
                                        v_DiseasesName = disea.v_Name,
                                        v_ComponentId = office.v_ComponentId,
                                        v_ComponentName = office.i_CategoryId == -1 ? office.v_Name : cat.v_Value1,
                                        v_CustomerOrganizationId = C.v_CustomerOrganizationId,
                                        v_CustomerLocationId = C.v_CustomerLocationId,
                                        IdProtocolId = A.v_ProtocolId,
                                        Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName 
                                    };


                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    if (componentId != null)
                    {
                        objEntity = objEntity.Where(p => componentId.Contains(p.v_ComponentId));
                    }

                    #endregion

                    // discriminar los dx que expresan normalidad
                    // NORMOACUSIA; NORMOPESO; EMETROPE; EXAMEN DE SALUD SIN ALTERACION

                    string[] excludeDx = new[] { "N002-DD000000145", "N009-DD000000181", "N009-DD000000190" };
                    objEntity = objEntity.Where(p => !excludeDx.Contains(p.v_DiseasesId));

                    //var gg = (from a in objEntity.AsEnumerable()
                    //          group a by new { a.v_DiseasesName, a.v_ComponentName } into g
                    //          select new DiagnosticsByOffice
                    //          {
                    //              v_ComponentName = g.Key.v_ComponentName,
                    //              v_DiseasesName = g.Key.v_DiseasesName,
                    //              NroHallazgos = g.Count()
                    //          }).ToList();


                    return objEntity.ToList();
                }
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public List<ReportProduccionProfesional> ReporteProduccionProfesional(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression, string pstrUsuario, string pstrNombreUsuario, string pstrConsultorio, int pintCategoriaId, string EmpresaClienteCabecera)
        {

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
                                    from D in D_join.DefaultIfEmpty()

                                    join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId into E_join
                                    from E in E_join.DefaultIfEmpty()

                                    join F in dbContext.component on E.v_ComponentId equals F.v_ComponentId into F_join
                                    from F in F_join.DefaultIfEmpty()

                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join lc in dbContext.location on new { a = C.v_CustomerOrganizationId, b = C.v_CustomerLocationId }
                                    equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                                    from lc in lc_join.DefaultIfEmpty()


                                    join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
                                           equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
                                       equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 225 }
                                           equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()


                                    where E.d_ApprovedUpdateDate >= FechaInicio && E.d_ApprovedUpdateDate <= FechaFin

                                    select new ReportProduccionProfesional
                                    {
                                        v_CustomerOrganizationId = G.v_OrganizationId,
                                        NroAtencion = A.v_ServiceId,
                                        Fecha = A.d_ServiceDate.Value,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        Dni = B.v_DocNumber,
                                        Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        Titular = B.v_OwnerName,
                                        EmpresaCliente = G.v_Name,
                                        EmpresaTrabajo = D.v_Name,
                                        i_ApprovedUpdateUserId = E.i_ApprovedUpdateUserId.Value,
                                        i_CategoryId = F.i_CategoryId.Value,
                                        v_PersonId = B.v_PersonId,
                                        v_ProtocoloId = A.v_ProtocolId,
                                        FechaInicio = FechaInicio.Value,
                                        FechaFin = FechaFin.Value,
                                        Parentesco = J4.v_Value1,
                                        v_CustomerLocationId = lc.v_LocationId
                                    };

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion
                     
                    var sql = (from a in objEntity.ToList()
                               let age = GetAge(a.FechaNacimiento.Value)
                               let CostoProtocolo = GetServiceCost(a.NroAtencion)
                               let x = pstrUsuario
                               let xx = pstrNombreUsuario
                               let xxx = pstrConsultorio
                               let xxxx = EmpresaClienteCabecera
                               select new ReportProduccionProfesional
                               {
                                   NroAtencion = a.NroAtencion,
                                   Fecha = a.Fecha,
                                   FechaNacimiento = a.FechaNacimiento,
                                   Edad = age,
                                   Dni = a.Dni,
                                   Paciente = a.Paciente,
                                   Titular = a.Titular,
                                   EmpresaCliente = a.EmpresaCliente,
                                   EmpresaTrabajo = a.EmpresaTrabajo,    
                                   CostoProtocolo = CostoProtocolo,
                                   FechaInicio = a.FechaInicio,
                                   FechaFin = a.FechaFin,
                                   Usuario = x,
                                   NombreUsuario = xx,
                                   Consultorio = xxx,
                                   Parentesco = a.Parentesco,
                                   i_CategoryId =a.i_CategoryId,
                                   v_PersonId = a.v_PersonId,
                                   EmpresaClienteCabecera = xxxx
                               }).ToList();

                    var objData = new List<ReportProduccionProfesional>();
                
                    objData = sql.FindAll(s => s.i_CategoryId == pintCategoriaId)
                                                 .GroupBy(x => new { x.i_CategoryId, x.v_PersonId })
                                                 .Select(group => group.First())
                                                 .ToList();
                 
                    return objData;

                }


            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public List<ReportProduccionProfesional> ReporteProduccionProfesionalSinConsultorio(DateTime? FechaInicio, DateTime? FechaFin, string pstrCustomerOrganizationId, string pstrFilterExpression, string pstrUsuario, string pstrNombreUsuario, string pstrConsultorio, int pintCategoriaId, string EmpresaClienteCabecera)
        {

            try
            {
                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    #region Prepare Query

                    var objEntity = from A in dbContext.service
                                    join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                    join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                    from C in C_join.DefaultIfEmpty()

                                    join D in dbContext.organization on C.v_WorkingOrganizationId equals D.v_OrganizationId into D_join
                                    from D in D_join.DefaultIfEmpty()

                                    join E in dbContext.servicecomponent on A.v_ServiceId equals E.v_ServiceId into E_join
                                    from E in E_join.DefaultIfEmpty()

                                    join F in dbContext.component on E.v_ComponentId equals F.v_ComponentId into F_join
                                    from F in F_join.DefaultIfEmpty()

                                    join G in dbContext.organization on C.v_CustomerOrganizationId equals G.v_OrganizationId into G_join
                                    from G in G_join.DefaultIfEmpty()

                                    join lc in dbContext.location on new { a = C.v_CustomerOrganizationId, b = C.v_CustomerLocationId }
                                    equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                                    from lc in lc_join.DefaultIfEmpty()


                                    join J1 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 207 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                    from J1 in J1_join.DefaultIfEmpty()

                                    join J2 in dbContext.systemparameter on new { a = A.i_ServiceTypeOfInsurance.Value, b = 225 }
                                           equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                    from J2 in J2_join.DefaultIfEmpty()

                                    join J3 in dbContext.systemparameter on new { a = A.i_ModalityOfInsurance.Value, b = 226 }
                                       equals new { a = J3.i_ParameterId, b = J3.i_GroupId } into J3_join
                                    from J3 in J3_join.DefaultIfEmpty()

                                    join J4 in dbContext.systemparameter on new { a = B.i_Relationship.Value, b = 225 }
                                           equals new { a = J4.i_ParameterId, b = J4.i_GroupId } into J4_join
                                    from J4 in J4_join.DefaultIfEmpty()


                                    where E.d_ApprovedUpdateDate >= FechaInicio && E.d_ApprovedUpdateDate <= FechaFin

                                    select new ReportProduccionProfesional
                                    {
                                        v_CustomerOrganizationId = G.v_OrganizationId,
                                        NroAtencion = A.v_ServiceId,
                                        Fecha = A.d_ServiceDate.Value,
                                        FechaNacimiento = B.d_Birthdate.Value,
                                        Dni = B.v_DocNumber,
                                        Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                        Titular = B.v_OwnerName,
                                        EmpresaCliente = G.v_Name,
                                        EmpresaTrabajo = D.v_Name,
                                        //i_ApprovedUpdateUserId = E.i_ApprovedUpdateUserId.Value,
                                        i_UpdateUserOccupationalMedicaltId = A.i_UpdateUserOccupationalMedicaltId.Value,
                                        i_CategoryId = F.i_CategoryId.Value,
                                        v_PersonId = B.v_PersonId,
                                        v_ProtocoloId = A.v_ProtocolId,
                                        FechaInicio = FechaInicio.Value,
                                        FechaFin = FechaFin.Value,
                                        Parentesco = J4.v_Value1,
                                        v_CustomerLocationId = lc.v_LocationId
                                    };

                    if (!string.IsNullOrEmpty(pstrFilterExpression))
                    {
                        objEntity = objEntity.Where(pstrFilterExpression);
                    }

                    #endregion

                    var sql = (from a in objEntity.ToList()
                               let age = GetAge(a.FechaNacimiento.Value)
                               let CostoProtocolo = GetServiceCost(a.NroAtencion)
                               let x = pstrUsuario
                               let xx = pstrNombreUsuario
                               let xxx = pstrConsultorio
                               let xxxx = EmpresaClienteCabecera
                               select new ReportProduccionProfesional
                               {
                                   NroAtencion = a.NroAtencion,
                                   Fecha = a.Fecha,
                                   FechaNacimiento = a.FechaNacimiento,
                                   Edad = age,
                                   Dni = a.Dni,
                                   Paciente = a.Paciente,
                                   Titular = a.Titular,
                                   EmpresaCliente = a.EmpresaCliente,
                                   EmpresaTrabajo = a.EmpresaTrabajo,
                                   CostoProtocolo = CostoProtocolo,
                                   FechaInicio = a.FechaInicio,
                                   FechaFin = a.FechaFin,
                                   Usuario = x,
                                   NombreUsuario = xx,
                                   Consultorio = xxx,
                                   Parentesco = a.Parentesco,
                                   i_CategoryId = a.i_CategoryId,
                                   v_PersonId = a.v_PersonId,
                                   EmpresaClienteCabecera = xxxx
                               }).ToList();

                    var objData = new List<ReportProduccionProfesional>();

                    objData = sql.GroupBy(x => new { x.v_PersonId })
                                                 .Select(group => group.First())
                                                 .ToList();

                    return objData;

                }


            }
            catch (Exception)
            {

                throw;
            }
        }


        //float CalcularCostoProtocolo( string ServiceId, string PersonId, string ProtocoloId)
        //{
        //    SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //    float CostoTotalProtocolo = 0;
        //    try
        //    {
        //        var ListaPrecioProtocolo = (from A in dbContext.service
        //                     join B in dbContext.protocolcomponent on A.v_ProtocolId equals B.v_ProtocolId

        //                     where A.v_ServiceId == ServiceId
        //                            && A.v_PersonId == PersonId
        //                            && A.v_ProtocolId == ProtocoloId
        //                     select new {

        //                         PrecioComponente = B.r_Price
        //                     });

        //        foreach (var item in ListaPrecioProtocolo)
        //        {
        //            CostoTotalProtocolo += item.PrecioComponente.Value;
        //        }
        //        return CostoTotalProtocolo;


        //    }
        //    catch (Exception)
        //    {
                
        //        throw;
        //    }
        //}
        #endregion

        #region Pre-Liquidation

        public void UpdateStatusPreLiquidation(ref OperationResult pobjOperationResult, int status, string serviceId, List<string> ClientSession)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // UPDATE

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == serviceId
                                       select a).FirstOrDefault();

                // Crear la entidad con los datos actualizados   
                // Total Diagnósticos
                objEntitySource.i_StatusLiquidation = status;

                //objEntitySource.d_UpdateDate = DateTime.Now;
                //objEntitySource.i_UpdateUserId = Int32.Parse(ClientSession[2]);

                // Guardar los cambios
                dbContext.SaveChanges();
                pobjOperationResult.Success = 1;
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Ok, null);
                return;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                // Llenar entidad Log
                LogBL.SaveLog(ClientSession[0], ClientSession[1], ClientSession[2], LogEventType.CREACION, "SERVICE / PRE-LIQUIDACIÓN", null, Success.Failed, pobjOperationResult.ExceptionMessage);
                return;
            }
        }

        #endregion

        public ServiceShort GetServiceShort(string pstrServiceId)
        {
            //mon.IsActive = true;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.protocol on A.v_ProtocolId equals B.v_ProtocolId into B_join
                                 from B in B_join.DefaultIfEmpty()
                                 join C in dbContext.organization on B.v_CustomerOrganizationId equals C.v_OrganizationId into C_join
                                 from C in C_join.DefaultIfEmpty()
                                 join D in dbContext.person on A.v_PersonId equals D.v_PersonId

                                 where A.v_ServiceId == pstrServiceId

                                 select new ServiceShort
                                 {
                                     Empresa = C.v_Name,
                                     Paciente = D.v_FirstLastName + " " + D.v_SecondLastName + " " + D.v_FirstName,
                                     FechaServicio = A.d_ServiceDate,
                                     DNI = D.v_DocNumber
                                 });


                var sql = (from a in objEntity.ToList()

                           select new ServiceShort
                           {
                               Empresa = a.Empresa,
                               Paciente = a.Paciente,
                               FechaServicio = a.FechaServicio,
                               DNI = a.DNI
                           }).FirstOrDefault();

                return sql;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<multimediafileList> GetFilePdfsByServiceId(ref OperationResult pobjOperationResult, string pstrServiceId)
        {

            int isDeleted = (int)SiNo.NO;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                var query = (from A in dbContext.service
                             join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                             join C in dbContext.servicecomponentmultimedia on B.v_ServiceComponentId equals C.v_ServiceComponentId
                             join D in dbContext.multimediafile on C.v_MultimediaFileId equals D.v_MultimediaFileId

                             where A.v_ServiceId == pstrServiceId &&
                                   A.i_IsDeleted == isDeleted && B.i_IsDeleted == isDeleted && D.i_IsDeleted == isDeleted

                             select new multimediafileList
                             {
                                 v_MultimediaFileId = D.v_MultimediaFileId,
                                 v_FileName = D.v_FileName,
                                 b_File = D.b_File,

                             });

                List<multimediafileList> obj = query.ToList();

                List<multimediafileList> objFinal = obj.FindAll(p => p.v_FileName.Contains(".pdf"));

                pobjOperationResult.Success = 1;
                return objFinal;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }


        // Alberto
        public List<ReportEvaluacionPsicolaboralPersonal> GetReportEvaluacionPsicolaborlaPersonal(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()
                                 
                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                             equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId



                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEvaluacionPsicolaboralPersonal
                                 {
                                     Trabajador = B.v_FirstLastName + " " + B.v_SecondLastName + " " + B.v_FirstName,
                                     Genero = J.v_Value1,
                                     FechaNacimiento = B.d_Birthdate.Value,        
                                     PuestoPostula = B.v_CurrentOccupation,
                                     EmpresaCliente = D.v_Name,
                                     FechaEvaluacion = A.d_ServiceDate.Value,
                                     Evaluador = y.v_FirstName + " " + y.v_FirstLastName + " " + y.v_SecondLastName,
                                     Cpsp = pme.v_ProfessionalCode,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaProfesional = pme.b_SignatureImage
                                 

                                 });

                var MedicalCenter = GetInfoMedicalCenter(); 

                var sql = (from a in objEntity.ToList()
                           let EvaPsicolaborla = ValoresComponente(pstrserviceId, Constants.EVALUACION_PSICOLABORAL)
                           select new ReportEvaluacionPsicolaboralPersonal
                           {
                               
                                Trabajador = a.Trabajador,
                                Genero = a.Genero,
                                FechaNacimiento =a.FechaNacimiento,     
                                Edad = GetAge(a.FechaNacimiento),
                                PuestoPostula = a.PuestoPostula,
                                EmpresaCliente = a.EmpresaCliente,
                                FechaEvaluacion = a.FechaEvaluacion,
                                Cs = (from n in dbContext.organization
                                      where n.v_OrganizationId == Constants.OWNER_ORGNIZATION_ID
                                      select n.v_Name).SingleOrDefault<string>(),
                                Evaluador = a.Evaluador,
                                Cpsp = a.Cpsp,
                                FirmaTrabajador = a.FirmaTrabajador,
                                FirmaProfesional = a.FirmaProfesional,

                                _1 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._1).v_Value1,
                                _2 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._2).v_Value1,
                                _3 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._3).v_Value1,
                                _4 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._4).v_Value1,
                                _5 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._5).v_Value1,
                                _6 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._6).v_Value1,
                                _7 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._7).v_Value1,
                                _8 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._8).v_Value1,
                                _9 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._9).v_Value1,
                                _10 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._10).v_Value1,
                                _11 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._11).v_Value1,
                                _12 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._12).v_Value1,
                                _13 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._13).v_Value1,
                                _14 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._14).v_Value1,
                                _15 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._15).v_Value1,
                                _16 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._16).v_Value1,
                                _17 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._17).v_Value1,
                                _18 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._18).v_Value1,
                                _19 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._19).v_Value1,
                                _20 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._20).v_Value1,
                                _21 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._21).v_Value1,
                                _22 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._22).v_Value1,
                                _23 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._23).v_Value1,
                                _24 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._24).v_Value1,
                                _25 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._25).v_Value1,
                                _26 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._26).v_Value1,
                                _27 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._27).v_Value1,
                                _28 = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants._28).v_Value1,

                                Fatiga = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_OBSERVACIONES).v_Value1,
                                Recomendacion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_FATIGA_RECOMENDACIONES).v_Value1,
                                Somnolencia = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_ESCALA_SOMNOLENCIA).v_Value1,
                                ConclusionFinal = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_CONCLUSION).v_Value1,
                                Conclusion = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_CONCLUSION_FINAL_APTITUD).v_Value1,
                                RiesgoEstres = EvaPsicolaborla.Count == 0 ? string.Empty : EvaPsicolaborla.Find(p => p.v_ComponentFieldId == Constants.EVALUACION_PSICOLABORAL_RIESGO_ESTRES).v_Value1,

                                b_Logo = MedicalCenter.b_Image,
                                EmpresaPropietaria = MedicalCenter.v_Name,
                                EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                                EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                                EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportOsteo> GetReportOsteo(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()

                                 join E in dbContext.servicecomponent on new { a = A.v_ServiceId, b = pstrComponentId }
                                                                        equals new { a = E.v_ServiceId, b = E.v_ComponentId } into E_join
                                 from E in E_join.DefaultIfEmpty()

                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                             equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join y in dbContext.person on me.v_PersonId equals y.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportOsteo
                                 {
                                     ServiceId = A.v_ServiceId,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     FirmaTrabajador = B.b_RubricImage,
                                     FirmaMedico = pme.b_SignatureImage

                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var valorDx = GetDiagnosticByServiceIdAndComponent(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1);

                var sql = (from a in objEntity.ToList()
                           let Osteo = ValoresComponente(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1)
                           let OsteoDina = ValoresComponente(pstrserviceId, Constants.Eva_Dinamica_Osteomuscular)

                           select new ReportOsteo
                           {

                               ServiceId  =a.ServiceId,
                               HuellaTrabajador = a.HuellaTrabajador,
                               FirmaTrabajador = a.FirmaTrabajador,
                               FirmaMedico = a.FirmaMedico,

                               TareasHorasDias = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_DIAS)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_DIAS).v_Value1,
                               TareasFrecuencia = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_FRECUENCIA)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_FRECUENCIA).v_Value1,
                               TareasHorasSemana = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_SEMANA)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_SEMANA).v_Value1,
                               TareasTipo = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_TIPO)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_TIPO).v_Value1,
                               TareasCiclo = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CICLO)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CICLO).v_Value1,
                               TareasCarga = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CARGA)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_CARGA).v_Value1,
                               LateralCervical = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_CERVICAL)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_CERVICAL).v_Value1,
                               LateralLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_LUMBAR)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_LUMBAR).v_Value1,
                               LateralDorsal = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_DORSAL)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_COLUMNA_LATERAL_DORSAL).v_Value1,
                               LordosisCervical = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_CERVICAL).v_Value1,
                               LordosisLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_LORDOSIS_LUMBAR).v_Value1,
                               EscoliosisLumbar = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_LUMBAR).v_Value1Name,
                               EscoliosisDorsal = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_ESCOLIOSIS_DORSAL).v_Value1Name,
                              
                               ContracturaMuscular = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR)  == null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUSCULAR).v_Value1Name,
                               DolorEspalda = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DOLOR_ESPALDA).v_Value1Name,
                               ConclusionDescripcion = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_DESCRIPCION_ID).v_Value1,
                               Dx = valorDx,
                               Aptitud= Osteo.Count == 0 ||Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_APTITUD_ID)== null? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_APTITUD_ID).v_Value1,
                               Recomendaciones = GetRecommendationByServiceIdAndComponent(a.ServiceId, Constants.OSTEO_MUSCULAR_ID_1),


                               OSTEO_MUSCULAR_CONTRACTURA_MUS_CERVICAL = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_CERVICAL) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_CERVICAL).v_Value1Name,

                               OSTEO_MUSCULAR_CONTRACTURA_MUS_DORSAL = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_DORSAL) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_DORSAL).v_Value1Name,

                               OSTEO_MUSCULAR_CONTRACTURA_MUS_LUMBAR = Osteo.Count == 0 || Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_LUMBAR) == null ? string.Empty : Osteo.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_CONTRACTURA_MUS_LUMBAR).v_Value1Name,

                              
                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,



                               EVA_1 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_1) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_1).v_Value1Name,
                               EVA_2 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_2) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_2).v_Value1Name,
                               EVA_3 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_3) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_3).v_Value1Name,
                               EVA_4 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_4) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_4).v_Value1Name,
                               EVA_5 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_5) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_5).v_Value1Name,
                               EVA_6 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_6) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_6).v_Value1Name,
                               EVA_7 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_7) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_7).v_Value1Name,
                               EVA_8 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_8) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_8).v_Value1Name,
                               EVA_9 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_9) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_9).v_Value1Name,
                               EVA_10 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_10) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_10).v_Value1Name,

                               EVA_11 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_11) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_11).v_Value1Name,
                               EVA_12 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_12) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_12).v_Value1Name,
                               EVA_13 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_13) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_13).v_Value1Name,
                               EVA_14 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_14) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_14).v_Value1Name,
                               EVA_15 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_15) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_15).v_Value1Name,
                               EVA_16 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_16) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_16).v_Value1Name,
                               EVA_17 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_17) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_17).v_Value1Name,
                               EVA_18 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_18) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_18).v_Value1Name,
                               EVA_19 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_19) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_19).v_Value1Name,
                               EVA_20 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_20) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_20).v_Value1Name,

                               EVA_21 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_21) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_21).v_Value1Name,
                               EVA_22 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_22) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_22).v_Value1Name,
                               EVA_23 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_23) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_23).v_Value1Name,
                               EVA_24 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_24) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_24).v_Value1Name,
                               EVA_25 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_25) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_25).v_Value1Name,
                               EVA_26 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_26) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_26).v_Value1Name,
                               EVA_27 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_27) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_27).v_Value1Name,
                               EVA_28 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_28) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_28).v_Value1Name,
                               EVA_29 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_29) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_29).v_Value1Name,
                               EVA_30 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_30) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_30).v_Value1Name,

                               EVA_31 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_31) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_31).v_Value1Name,
                               EVA_32 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_32) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_32).v_Value1Name,
                               EVA_33 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_33) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_33).v_Value1Name,
                               EVA_34 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_34) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_34).v_Value1Name,
                               EVA_35 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_35) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_35).v_Value1Name,
                               EVA_36 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_36) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_36).v_Value1Name,
                               EVA_37 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_37) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_37).v_Value1Name,
                               EVA_38 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_38) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_38).v_Value1Name,
                               EVA_39 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_39) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_39).v_Value1Name,
                               EVA_40 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_40) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_40).v_Value1Name,

                               EVA_41 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_41) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_41).v_Value1Name,
                               EVA_42 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_42) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_42).v_Value1Name,
                               EVA_43 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_43) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_43).v_Value1Name,
                               EVA_44 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_44) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_44).v_Value1Name,
                               EVA_45 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_45) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_45).v_Value1Name,
                               EVA_46 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_46) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_46).v_Value1Name,
                               EVA_47 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_47) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_47).v_Value1Name,
                               EVA_48 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_48) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_48).v_Value1Name,
                               EVA_49 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_49) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_49).v_Value1Name,
                               EVA_50 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_50) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_50).v_Value1Name,

                               EVA_51 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_51) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_51).v_Value1Name,
                               EVA_52 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_52) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_52).v_Value1Name,
                               EVA_53 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_53) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_53).v_Value1Name,
                               EVA_54 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_54) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_54).v_Value1Name,
                               EVA_55 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_55) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_55).v_Value1Name,
                               EVA_56 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_56) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_56).v_Value1Name,
                               EVA_57 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_57) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_57).v_Value1Name,
                               EVA_58 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_58) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_58).v_Value1Name,
                               EVA_59 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_59) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_59).v_Value1Name,
                               EVA_60 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_60) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_60).v_Value1Name,

                               EVA_61 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_61) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_61).v_Value1Name,
                               EVA_62 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_62) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_62).v_Value1Name,
                               EVA_63 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_63) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_63).v_Value1Name,
                               EVA_64 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_64) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_64).v_Value1Name,
                               EVA_65 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_65) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_65).v_Value1Name,
                               EVA_66 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_66) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_66).v_Value1Name,
                               EVA_67 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_67) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_67).v_Value1Name,
                               EVA_68 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_68) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_68).v_Value1Name,
                               EVA_69 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_69) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_69).v_Value1Name,
                               EVA_70 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_70) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_70).v_Value1Name,

                               EVA_71 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_71) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_71).v_Value1Name,
                               EVA_72 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_72) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_72).v_Value1Name,
                               EVA_73 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_73) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_73).v_Value1Name,
                               EVA_74 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_74) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_74).v_Value1Name,
                               EVA_75 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_75) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_75).v_Value1Name,
                               EVA_76 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_76) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_76).v_Value1Name,
                               EVA_77 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_77) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_77).v_Value1Name,
                               EVA_78 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_78) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_78).v_Value1Name,
                               EVA_79 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_79) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_79).v_Value1Name,
                               EVA_80 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_80) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_80).v_Value1Name,

                               EVA_81 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_81) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_81).v_Value1Name,
                               EVA_82 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_82) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_82).v_Value1Name,
                               EVA_83 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_83) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_83).v_Value1Name,
                               EVA_84 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_84) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_84).v_Value1Name,
                               EVA_85 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_85) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_85).v_Value1Name,
                               EVA_86 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_86) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_86).v_Value1Name,
                               EVA_87 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_87) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_87).v_Value1Name,
                               EVA_88 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_88) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_88).v_Value1Name,
                               EVA_89 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_89) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_89).v_Value1Name,
                               EVA_90 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_90) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_90).v_Value1Name,

                               EVA_91 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_91) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_91).v_Value1Name,
                               EVA_92 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_92) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_92).v_Value1Name,
                               EVA_93 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_93) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_93).v_Value1Name,
                               EVA_94 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_94) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_94).v_Value1Name,
                               EVA_95 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_95) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_95).v_Value1Name,
                               EVA_96 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_96) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_96).v_Value1Name,
                               EVA_97 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_97) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_97).v_Value1Name,
                               EVA_98 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_98) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_98).v_Value1Name,
                               EVA_99 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_99) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_99).v_Value1Name,
                               EVA_100 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_100) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_100).v_Value1Name,

                               EVA_101 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_101) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_101).v_Value1Name,
                               EVA_102 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_102) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_102).v_Value1Name,
                               EVA_103 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_103) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_103).v_Value1Name,
                               EVA_104 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_104) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_104).v_Value1Name,
                               EVA_105 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_105) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_105).v_Value1Name,
                               EVA_106 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_106) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_106).v_Value1Name,
                               EVA_107 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_107) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_107).v_Value1Name,
                               EVA_108 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_108) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_108).v_Value1Name,
                               EVA_109 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_109) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_109).v_Value1Name,
                               EVA_110 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_110) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_110).v_Value1Name,

                               EVA_111 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_111) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_111).v_Value1Name,
                               EVA_112 = OsteoDina.Count == 0 || OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_112) == null ? "0" : OsteoDina.Find(p => p.v_ComponentFieldId == Constants.EVA_112).v_Value1Name,
                            
                              

                           }).ToList();

                
                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        #region Query Matriz

        public List<Antecedentes> DevolverTodosAntecedentes(DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                //Antecedentes Retornar;
                List<Antecedentes> ListaTotalJerarquizada = new List<Antecedentes>();
                Antecedentes ListaJerarquizadaAntecedentes = new Antecedentes();
                List<AntecedentesList> ListaAntecedentesPorPersona;

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {

                    var ListaAntecedentesTodos = (from A in dbContext.personmedicalhistory
                                 join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                 join E in dbContext.service on A.v_PersonId equals E.v_PersonId
                                 where A.i_IsDeleted == 0
                                 //&& A.v_PersonId == "N009-PP000000208"
                                        &&  E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
                                orderby A.v_PersonId
                                 select new AntecedentesList
                                 {
                                     PersonId = A.v_PersonId,
                                     v_DiseasesName = D.v_Name,
                                     d_StartDate = A.d_StartDate == null ? DateTime.Now: A.d_StartDate.Value,
                                     Detalle_Dx = A.v_DiagnosticDetail,
                                     Parentesco = "",
                                     TipoAntecedente = "P"
                                 }).Union(from A in dbContext.familymedicalantecedents
                                          join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
                                          join E in dbContext.service on A.v_PersonId equals E.v_PersonId

                                          join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
                                              equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
                                          from J1 in J1_join.DefaultIfEmpty()

                                          join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
                                              equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
                                          from J2 in J2_join.DefaultIfEmpty()

                                          where A.i_IsDeleted == isDeleted
                                             //&& A.v_PersonId == "N009-PP000000208"
                                                &&  E.d_ServiceDate < FeFin && E.d_ServiceDate > FeIni
                                          orderby A.v_PersonId
                                          select new AntecedentesList
                                          {
                                              PersonId = A.v_PersonId,
                                              v_DiseasesName = D.v_Name,
                                              d_StartDate = DateTime.Now,
                                              Detalle_Dx = "",
                                              Parentesco = J2.v_Value1,
                                              TipoAntecedente = "F"
                                          }).ToList();


                    var ListaJerarquizada = (from A in dbContext.service
                                    where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                     //&& A.v_PersonId == "N009-PP000000208"
                                    select new Antecedentes
                                    {
                                        PersonId = A.v_PersonId,
                                        ServicioId = A.v_ServiceId
                                    }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.ListaAntecendentes = ListaAntecedentesTodos.FindAll(p => p.PersonId == a.PersonId);
                    });


                    var ListaJerarquizadaGropBy = ListaJerarquizada.AsEnumerable()
                          .GroupBy(x => x.PersonId)
                          .Select(group => group.First());

                    foreach (var item in ListaJerarquizadaGropBy)
                    {
                        ListaJerarquizadaAntecedentes = new Antecedentes();
                        ListaAntecedentesPorPersona = new List<AntecedentesList>();
                        ListaJerarquizadaAntecedentes.PersonId = item.PersonId;
                        ListaJerarquizadaAntecedentes.ServicioId = item.ServicioId;


                        var DetalleTodos = ListaJerarquizada.SelectMany(p => p.ListaAntecendentes).Distinct().ToList();

                        //Antecedentes Personales
                        var DetalleAntecPerson = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "P");

                        for (int i = 0; i < 6; i++)
                        {
                            if (i < DetalleAntecPerson.Count())
                            {
                                if (i == 5)
                                {
                                    int Contador = DetalleAntecPerson.Count - 5;
                                    var x = DetalleAntecPerson.GetRange(5, Contador);

                                    DetalleAntecPerson[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
                                    ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
                                }
                                else
                                {
                                    DetalleAntecPerson[i].v_DiseasesName = DetalleAntecPerson[i].v_DiseasesName + " (" + DetalleAntecPerson[i].d_StartDate.ToString("MM/yyyy") + ")";// + ", " + DetalleAntecPerson[i].Detalle_Dx;
                                    ListaAntecedentesPorPersona.Add(DetalleAntecPerson[i]);
                                }
                            }
                            else
                            {
                                ListaAntecedentesPorPersona.Add(new AntecedentesList());
                            }
                        }


                        //Antecedentes Familiares
                        var DetalleAntecFami = DetalleTodos.FindAll(p => p.PersonId == item.PersonId && p.TipoAntecedente == "F");

                        for (int i = 0; i < 5; i++)
                        {
                            if (i < DetalleAntecFami.Count())
                            {
                                if (i == 4)
                                {
                                    int Contador = DetalleAntecFami.Count - 4;
                                    var y = DetalleAntecFami.GetRange(4, Contador);

                                    DetalleAntecFami[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
                                    ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);

                                }
                                else
                                {
                                    DetalleAntecFami[i].v_DiseasesName = DetalleAntecFami[i].v_DiseasesName + " (" + DetalleAntecFami[i].Parentesco + ")";
                                    ListaAntecedentesPorPersona.Add(DetalleAntecFami[i]);
                                }

                            }
                            else
                            {
                                ListaAntecedentesPorPersona.Add(new AntecedentesList());
                            }
                        }
                        ListaJerarquizadaAntecedentes.ListaAntecendentes = ListaAntecedentesPorPersona;

                        ListaTotalJerarquizada.Add(ListaJerarquizadaAntecedentes);
                    }
 
                    ////5 Antecedentes Personales
                    //var ListaAntcPersonales = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "P");

                    //for (int i = 0; i < 6; i++)
                    //{
                    //    if (i < ListaAntcPersonales.Count())
                    //    {
                    //        if (i == 5)
                    //        {
                    //            int Contador = ListaAntcPersonales.Count - 5;
                    //            var x = ListaAntcPersonales.GetRange(5, Contador);

                    //            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
                    //            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
                    //        }
                    //        else
                    //        {
                    //            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
                    //            ListaAntecedentesPorPersona.Add(ListaAntcPersonales[i]);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        ListaAntecedentesPorPersona.Add(new AntecedentesList());
                    //    }
                    //}

                    ////4 Antecedentes Familiares
                    //var ListaAntcFamiliares = ListaAntecedentesTodos.FindAll(p => p.TipoAntecedente == "F");

                    //for (int i = 0; i < 5; i++)
                    //{
                    //    if (i < ListaAntcFamiliares.Count())
                    //    {
                    //        if (i == 4)
                    //        {
                    //            int Contador = ListaAntcFamiliares.Count - 4;
                    //            var y = ListaAntcFamiliares.GetRange(4, Contador);

                    //            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
                    //            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);

                    //        }
                    //        else
                    //        {
                    //            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
                    //            ListaAntecedentesPorPersona.Add(ListaAntcFamiliares[i]);
                    //        }

                    //    }
                    //    else
                    //    {
                    //        ListaAntecedentesPorPersona.Add(new AntecedentesList());
                    //    }
                    //}

                    return ListaTotalJerarquizada;
                }

            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<DiagnosticosRecomendaciones> DevolverJerarquiaDxRecomendaciones (DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                int definitivo = (int)FinalQualification.Definitivo;
                int presuntivo = (int)FinalQualification.Presuntivo;
            
                List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
                DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
                List<DiagnosticosRecomendacionesList> ListaDxRecomendacionesPorServicio;

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
                                            join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                            from bbb in J7_join.DefaultIfEmpty()
                                            join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                                            join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                            where (ccc.i_IsDeleted == isDeleted) &&
                                                (ccc.i_FinalQualificationId == definitivo ||
                                                ccc.i_FinalQualificationId == presuntivo)
                                               && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                               orderby eee.v_ServiceId
                                            select new DiagnosticosRecomendacionesList
                                            {
                                                ServicioId = eee.v_ServiceId,
                                                Descripcion = ddd.v_Name,
                                                Tipo = "D"
                                            }).Union(from ccc in dbContext.recommendation
                                                     join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                                                     join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                                     where ccc.i_IsDeleted == isDeleted
                                                      && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                                     orderby eee.v_ServiceId
                                                     select new DiagnosticosRecomendacionesList
                                                             {
                                                                 ServicioId = eee.v_ServiceId,
                                                                 Descripcion = ddd.v_Name,
                                                                 Tipo = "R"
                                                             }).ToList();



                    var ListaJerarquizada = (from A in dbContext.service
                                             where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                             select new DiagnosticosRecomendaciones
                                             {
                                                 ServicioId = A.v_ServiceId
                                             }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
                    });

                    foreach (var item in ListaJerarquizada)
                    {
                        ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();
                        ListaDxRecomendacionesPorServicio = new List<DiagnosticosRecomendacionesList>();

                        ListaJerarquizadaDxRecomendaciones.ServicioId = item.ServicioId;


                        var DetalleTodos = ListaJerarquizada.SelectMany(p => p.DetalleDxRecomendaciones).ToList();

                        //Lista Dx
                        var DetalleDx = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "D");

                        for (int i = 0; i < 8; i++)
                        {
                            if (i < DetalleDx.Count())
                            {
                                if (i == 7)
                                {
                                    int Contador = DetalleDx.Count - 7;
                                    var x = DetalleDx.GetRange(7, Contador);

                                    DetalleDx[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
                                    ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
                                }
                                else
                                {
                                    DetalleDx[i].Descripcion = DetalleDx[i].Descripcion;
                                    ListaDxRecomendacionesPorServicio.Add(DetalleDx[i]);
                                }
                            }
                            else
                            {
                                ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
                            }
                        }

                        //Lista Recomendaciones
                        var DetalleReco = DetalleTodos.FindAll(p => p.ServicioId == item.ServicioId && p.Tipo == "R");

                        for (int i = 0; i < 14; i++)
                        {
                            if (i < DetalleReco.Count())
                            {
                                if (i == 13)
                                {
                                    int Contador = DetalleReco.Count - 13;
                                    var x = DetalleReco.GetRange(13, Contador);

                                    DetalleReco[i].Descripcion = string.Join(", ", x.Select(p => p.Descripcion));
                                    ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
                                }
                                else
                                {
                                    DetalleReco[i].Descripcion = DetalleReco[i].Descripcion;
                                    ListaDxRecomendacionesPorServicio.Add(DetalleReco[i]);
                                }
                            }
                            else
                            {
                                ListaDxRecomendacionesPorServicio.Add(new DiagnosticosRecomendacionesList());
                            }
                        }
                        ListaJerarquizadaDxRecomendaciones.DetalleDxRecomendaciones = ListaDxRecomendacionesPorServicio;

                        ListaTotalJerarquizada.Add(ListaJerarquizadaDxRecomendaciones);
                    }
                }
                return ListaTotalJerarquizada;
            }
            catch (Exception)
            {
                
                throw;
            }
        }

        public List<DiagnosticosRecomendaciones> DevolverJerarquiaDx(DateTime? FeIni, DateTime? FeFin)
        {
            try
            {
                int isDeleted = (int)SiNo.NO;
                int definitivo = (int)FinalQualification.Definitivo;
                int presuntivo = (int)FinalQualification.Presuntivo;

                List<DiagnosticosRecomendaciones> ListaTotalJerarquizada = new List<DiagnosticosRecomendaciones>();
                DiagnosticosRecomendaciones ListaJerarquizadaDxRecomendaciones = new DiagnosticosRecomendaciones();

                using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
                {
                    var ListaDxRecoTodos = (from ccc in dbContext.diagnosticrepository
                                            join bbb in dbContext.component on ccc.v_ComponentId equals bbb.v_ComponentId into J7_join
                                            from bbb in J7_join.DefaultIfEmpty()
                                            join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId  // Diagnosticos 
                                            join eee in dbContext.service on ccc.v_ServiceId equals eee.v_ServiceId
                                            where (ccc.i_IsDeleted == isDeleted) &&
                                                (ccc.i_FinalQualificationId == definitivo ||
                                                ccc.i_FinalQualificationId == presuntivo)
                                               && eee.d_ServiceDate < FeFin && eee.d_ServiceDate > FeIni
                                            orderby eee.v_ServiceId
                                            select new DiagnosticosRecomendacionesList
                                            {
                                                ServicioId = eee.v_ServiceId,
                                                Descripcion = ddd.v_Name,
                                                IdCampo = ccc.v_ComponentFieldId,
                                                Tipo = "D",
                                                 IdComponente = bbb.v_ComponentId,
                                                IdDeseases = ddd.v_DiseasesId,
                                                FechaControl = ccc.d_ExpirationDateDiagnostic
                                            }).ToList();



                    var ListaJerarquizada = (from A in dbContext.service
                                             where A.d_ServiceDate < FeFin && A.d_ServiceDate > FeIni
                                             select new DiagnosticosRecomendaciones
                                             {
                                                 ServicioId = A.v_ServiceId
                                             }).ToList();

                    ListaJerarquizada.ForEach(a =>
                    {
                        a.DetalleDxRecomendaciones = ListaDxRecoTodos.FindAll(p => p.ServicioId == a.ServicioId);
                    });

                    //foreach (var item in ListaJerarquizada)
                    //{
                    //    var xxx = ListaJerarquizada.Find(p => p.ServicioId == item.ServicioId).DetalleDxRecomendaciones.Find(o => o.IdCampo == Constants.ANTROPOMETRIA_IMC_ID).Descripcion;
                    //}
                  
                    return ListaJerarquizada;
                }
                
            }
            catch (Exception)
            {

                throw;
            }
        }

        //public List<AntecedentesList> DevolverTodosAntecedentes(string pstrPacientId)
        //{
        //    try
        //    {
        //        int isDeleted = (int)SiNo.NO;
        //        List<AntecedentesList> Retornar = new List<AntecedentesList>();

        //        using (SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel())
        //        {

        //            var query = (from A in dbContext.personmedicalhistory
        //                         join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId
        //                         where A.i_IsDeleted == 0 && A.v_PersonId == pstrPacientId
        //                         select new AntecedentesList
        //                         {
        //                             v_DiseasesName = D.v_Name,
        //                             d_StartDate = A.d_StartDate.Value,
        //                             Detalle_Dx = A.v_DiagnosticDetail,
        //                             Parentesco = "",
        //                             TipoAntecedente ="P"
        //                         }).Union(from A in dbContext.familymedicalantecedents
        //                                  join D in dbContext.diseases on A.v_DiseasesId equals D.v_DiseasesId

        //                                  join J1 in dbContext.systemparameter on new { a = A.i_TypeFamilyId.Value, b = 149 }
        //                                      equals new { a = J1.i_ParameterId, b = J1.i_GroupId } into J1_join
        //                                  from J1 in J1_join.DefaultIfEmpty()

        //                                  join J2 in dbContext.systemparameter on new { a = J1.i_ParentParameterId.Value, b = 149 }
        //                                      equals new { a = J2.i_ParameterId, b = J2.i_GroupId } into J2_join
        //                                  from J2 in J2_join.DefaultIfEmpty()

        //                                  where A.i_IsDeleted == isDeleted && A.v_PersonId == pstrPacientId
        //                                  select new AntecedentesList
        //                                  {
        //                                      v_DiseasesName = D.v_Name,
        //                                      d_StartDate = DateTime.Now,
        //                                      Detalle_Dx = "",
        //                                      Parentesco = J2.v_Value1,
        //                                      TipoAntecedente = "F"
        //                                  }).ToList();


        //            //5 Antecedentes Personales
        //            var ListaAntcPersonales = query.FindAll(p => p.TipoAntecedente == "P");

        //                for (int i = 0; i < 6; i++)
        //                {
        //                    if (i < ListaAntcPersonales.Count())
        //                    {
        //                        if (i == 5)
        //                        {
        //                            int Contador = ListaAntcPersonales.Count - 5;
        //                            var x = ListaAntcPersonales.GetRange(5, Contador);

        //                            ListaAntcPersonales[i].v_DiseasesName = string.Join(", ", x.Select(p => p.v_DiseasesName + " (" + p.d_StartDate.ToString("MM/yyyy") + ")" + ", " + p.Detalle_Dx));
        //                            Retornar.Add(ListaAntcPersonales[i]); 
        //                        }
        //                        else
        //                        {
        //                            ListaAntcPersonales[i].v_DiseasesName = ListaAntcPersonales[i].v_DiseasesName + " (" + ListaAntcPersonales[i].d_StartDate.ToString("MM/yyyy") + ")" + ", " + ListaAntcPersonales[i].Detalle_Dx;
        //                            Retornar.Add(ListaAntcPersonales[i]); 
        //                        }
        //                    }
        //                    else
        //                    {
        //                        Retornar.Add(new AntecedentesList());                                
        //                    }                            
        //                }
                
        //            //4 Antecedentes Familiares
        //                var ListaAntcFamiliares = query.FindAll(p => p.TipoAntecedente == "F");

        //                for (int i = 0; i < 5; i++)
        //                {
        //                    if (i < ListaAntcFamiliares.Count())
        //                    {
        //                        if (i == 4)
        //                        {
        //                            int Contador = ListaAntcFamiliares.Count - 4;
        //                            var y = ListaAntcFamiliares.GetRange(4, Contador);

        //                            ListaAntcFamiliares[i].v_DiseasesName = string.Join(", ", y.Select(p => p.v_DiseasesName + " (" + p.Parentesco + ")"));
        //                            Retornar.Add(ListaAntcFamiliares[i]); 
                          
        //                        }
        //                        else 
        //                        {
        //                            ListaAntcFamiliares[i].v_DiseasesName = ListaAntcFamiliares[i].v_DiseasesName + " (" + ListaAntcFamiliares[i].Parentesco + ")";
        //                            Retornar.Add(ListaAntcFamiliares[i]);
        //                        }
                       
        //                    }
        //                    else
        //                    {
        //                        Retornar.Add(new AntecedentesList());
        //                    }
        //                }

        //                return Retornar;
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}
        

        public List<JerarquiaServicioCamposValores> DevolverValorCampoPorServicio(DateTime? FechaIni, DateTime? FechaFin)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {

                //var query1 = (from A in dbContext.service
                //              join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                //              join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                //              join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                //              where B.i_IsDeleted == isDeleted
                //                && C.i_IsDeleted == isDeleted
                //                && A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                //              select new ValorComponenteList
                //                {
                //                    ServicioId = A.v_ServiceId,
                //                    IdComponente = B.v_ComponentId,
                //                    IdCampo = C.v_ComponentFieldId,
                //                    Valor = D.v_Value1
                //                }).ToList();


                //var query2 = (from A in dbContext.component
                //              join B in dbContext.componentfields on A.v_ComponentId equals B.v_ComponentId
                //              join C in dbContext.componentfield on B.v_ComponentFieldId equals C.v_ComponentFieldId
                //              where A.i_IsDeleted == isDeleted && B.i_IsDeleted == isDeleted && C.i_IsDeleted == isDeleted
                //              select new ValorComponenteList
                //              {
                //                  IdComponente = A.v_ComponentId,
                //                  IdCampo = C.v_ComponentFieldId
                //              }).ToList();


                //var query3 = (from A in query2
                //              join E in query1 on A.IdComponente equals E.IdComponente
                //              //join F in dbContext.componentfields on E.IdCampo equals F.v_ComponentFieldId
                //              //join G in dbContext.componentfield on E.IdCampo equals G.v_ComponentFieldId
                //              //join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId

                //              select new ValorComponenteList
                //              {
                //                  ServicioId = E.ServicioId,
                //                  Valor = E.Valor,
                //                  //NombreComponente = H.v_Name,
                //                  //IdComponente = H.v_ComponentId,
                //                  //NombreCampo = G.v_TextLabel,
                //                  //IdCampo = G.v_ComponentFieldId 

                //              }).ToList();


                //var ListaIds = (from A in dbContext.service
                //                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                //                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                //                where A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni && C.i_IsDeleted == isDeleted
                //                select new
                //                {
                //                    IdCampo = C.v_ServiceComponentFieldsId
                //                }
                //                ).ToList();

                //var Concat = string.Join(", ", ListaIds.Select(p => p.IdCampo));

                //var Array = Concat.Split(',');


                //List<ValorComponenteList> ccc = (from A in dbContext.servicecomponentfieldvalues
                //                                 where Array.Contains(A.v_ServiceComponentFieldsId)
                //                                 select new ValorComponenteList
                //                                 {
                //                                     IdComponente = A.v_Value1
                //                                 }).ToList();


            

                var PreQuery = (from A in dbContext.service                                
                                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId                      
                                where  B.i_IsDeleted == isDeleted
                                     && C.i_IsDeleted == isDeleted
                                     && A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                                   
                                     orderby A.v_ServiceId
                             select new ValorComponenteList
                             {
                                 ServicioId = A.v_ServiceId,
                                 Valor = D.v_Value1,
                                 NombreComponente = H.v_Name,
                                 IdComponente = H.v_ComponentId,
                                 NombreCampo = G.v_TextLabel,
                                 IdCampo = G.v_ComponentFieldId                             
                             }
                             
                            ).ToList();

                //PreQuery.Sort((x, y) => x.ServicioId.CompareTo(y.ServicioId));

                var ListaJerarquizada = (from A in dbContext.service
                                         where A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                                         select new JerarquiaServicioCamposValores
                                         {
                                             ServicioId = A.v_ServiceId
                                         }).ToList();

                ListaJerarquizada.ForEach(a =>
                {
                    a.CampoValores = PreQuery.FindAll(p => p.ServicioId == a.ServicioId);
                });

                //ListaJerarquizada.Sort((x, y) => x.ServicioId.CompareTo(y.ServicioId));

                return ListaJerarquizada;
            }
            catch (Exception)
            {

                throw;
            }

        }
        #endregion

        public List<JerarquiaServicioCamposValores> DevolverValorCampoPorServicioMejorado(List<string> ListaServicioIds)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            int isDeleted = (int)SiNo.NO;

            try
            {
                int rpta = 0;
                var PreQuery = (from A in dbContext.service
                                join B in dbContext.servicecomponent on A.v_ServiceId equals B.v_ServiceId
                                join C in dbContext.servicecomponentfields on B.v_ServiceComponentId equals C.v_ServiceComponentId
                                join D in dbContext.servicecomponentfieldvalues on C.v_ServiceComponentFieldsId equals D.v_ServiceComponentFieldsId
                                join F in dbContext.componentfields on C.v_ComponentFieldId equals F.v_ComponentFieldId
                                join G in dbContext.componentfield on C.v_ComponentFieldId equals G.v_ComponentFieldId
                                join H in dbContext.component on F.v_ComponentId equals H.v_ComponentId
                                where B.i_IsDeleted == isDeleted
                                     && C.i_IsDeleted == isDeleted
                                     && ListaServicioIds.Contains(A.v_ServiceId)
                                //&& A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni

                                orderby A.v_ServiceId
                                select new ValorComponenteList
                                {
                                    ServicioId = A.v_ServiceId,
                                    Valor = D.v_Value1,
                                    NombreComponente = H.v_Name,
                                    IdComponente = H.v_ComponentId,
                                    NombreCampo = G.v_TextLabel,
                                    IdCampo = C.v_ComponentFieldId,
                                    i_GroupId = G.i_GroupId.Value
                                }

                            );

                var finalQuery = (from a in PreQuery.ToList()

                                  let value1 = int.TryParse(a.Valor, out rpta)
                                  join sp in dbContext.systemparameter on new { a = a.i_GroupId, b = rpta }
                                                  equals new { a = sp.i_GroupId, b = sp.i_ParameterId } into sp_join
                                  from sp in sp_join.DefaultIfEmpty()

                                  select new ValorComponenteList
                                  {
                                      ServicioId = a.ServicioId,
                                      Valor = a.Valor,
                                      NombreComponente = a.NombreComponente,
                                      IdComponente = a.IdComponente,
                                      NombreCampo = a.NombreCampo,
                                      IdCampo = a.IdCampo,
                                      ValorName = sp == null ? "" : sp.v_Value1
                                  }).ToList();



                var ListaJerarquizada = (from A in dbContext.service
                                         where ListaServicioIds.Contains(A.v_ServiceId)

                                         //A.d_ServiceDate < FechaFin && A.d_ServiceDate > FechaIni
                                         select new JerarquiaServicioCamposValores
                                         {
                                             ServicioId = A.v_ServiceId
                                         }).ToList();

                ListaJerarquizada.ForEach(a =>
                {
                    a.CampoValores = finalQuery.FindAll(p => p.ServicioId == a.ServicioId);
                });


                return ListaJerarquizada;
            }
            catch (Exception)
            {

                throw;
            }

        }
        // Alberto
        public List<ReportCuestionarioNordico> GetReportCuestionarioNordico(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportCuestionarioNordico
                                 {
                                    Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                    FechaNacimiento = B.d_Birthdate.Value,
                                    Genero = B.i_SexTypeId.Value

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.C_N_ID)

                           select new ReportCuestionarioNordico
                           {
                                Nombre_Trabajador = a.Nombre_Trabajador,
                                FechaNacimiento = a.FechaNacimiento,
                                Genero = a.Genero,
                                Edad = GetAge(a.FechaNacimiento),

                                C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIPO_TRABAJO_REALIZA_ID).v_Value1,
                                C_N_CABECERA_TIEMPO_LABOR_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_TIEMPO_LABOR_ID).v_Value1,
                                C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.OSTEO_MUSCULAR_TAREAS_HORAS_SEMANA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_HORAS_TRABAJO_SEMANAL_ID).v_Value1,
                                C_N_CABECERA_DIESTRO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_DIESTRO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_DIESTRO_ID).v_Value1,
                                C_N_CABECERA_ZURDO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_ZURDO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_CABECERA_ZURDO_ID).v_Value1,
                              
                                C_N_LOCOMOCION_TODOS_CUELLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CUELLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CUELLOS_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_HOMBROS_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CODOS_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_MUÑECA_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_ALTA_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_ESPALDA_BAJA_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_CADERAS_MUSLOS_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_RODILLAS_ID).v_Value1,
                                C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_TODOS_TOBILLOS_PIES_ID).v_Value1,

                                C_N_LOCOMOCION_12_MESES_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CUELLO_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_HOMBROS_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CODOS_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_MUÑECA_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_ALTA_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_ESPALDA_BAJA_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_CADERAS_MUSLOS_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_RODILLAS_ID).v_Value1,
                                C_N_LOCOMOCION_12_MESES_TOBILLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_TOBILLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_12_MESES_TOBILLOS_ID).v_Value1,

                                C_N_LOCOMOCION_7_DIAS_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CUELLO_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_HOMBROS_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_CODOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CODOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CODOS_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_MUÑECA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_MUÑECA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_MUÑECA_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_ALTA_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_ESPALDA_BAJA_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_CADERA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CADERA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_CADERA_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_RODILLAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_RODILLAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_RODILLAS_ID).v_Value1,
                                C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_LOCOMOCION_7_DIAS_TOBILLOS_ID).v_Value1,


                                C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_PROBLEMAS_ESPALDA_BAJA_ID).v_Value1,
                                C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_HOSPITALIZADO_PROBLEMA_ESPALDA_BAJA_ID).v_Value1,
                                C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CAMBIOS_TRABAJO_ACTIVIDAD_PROBLEMA_ESPALDA_BAJA_ID).v_Value1,
                                C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_CURACION_TOTAL_ESPALDA_BAJA_ID).v_Value1,
                                C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_TRABAJO_1_ID).v_Value1,
                                C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_ESPALDA_BAJA_ACTIVIDAD_RECREATIVA_1_ID).v_Value1,

                                C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_DURACION_PRBLEMAS_IMPEDIR_RUTINA_1_ID).v_Value1,
                                C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_VISTO_PROFESIONAL_ESPALDA_BAJA_ID).v_Value1,
                                C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_ESPALDA_BAJA_7_DIAS_ID).v_Value1,


                                C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_LESION_HOMBROS_ACCIDENTES_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_CAMBIO_TRABAJO_ACTIVIDAD_HOMBROS_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_ULTIMOS_12_MESES_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_TIEMPO_TOTAL_PROBLEMAS_HOMBROS_ID).v_Value1,


                                C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_TRABAJO_2_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_ACTIVIDAD_RECREATIVA_2_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_DURACION_PRBLEMAS_IMPEDIR_RUTINA_2_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_VISTO_PROFESIONAL_HOMBROS_ID).v_Value1,
                                C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMAS_HOMBROS_PROBLEMAS_HOMBROS_DURANTE_7_DIAS_ID).v_Value1,

                                C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMA_CUELLO_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_LESIONADO_CUELLO_ACCIDENTE_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_CAMBIO_TRABAJO_PROBLEMA_CUELLO_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_TOTAL_TIEMPO_PROBLEMA_CUELLO_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_DURACION_PRBLEMAS_IMPEDIR_RUTINA_3_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_VISTO_PROFESIONAL_CUELLO_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_PROBLEMAS_CUELLO_DURANTE_7_DIAS_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_TRABAJO_3_ID).v_Value1,
                                C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.C_N_PROBLEMA_CUELLO_ACTIVIDAD_RECREATIVA_3_ID).v_Value1,
                            

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportCuestionarioActividadFisica> GetReportCuestionarioActividadFisica(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportCuestionarioActividadFisica
                                 {
                                     Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaServicio = A.d_ServiceDate.Value,
                                     IdServicio = A.v_ServiceId

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.CUESTIONARIO_ACTIVIDAD_FISICA)

                           select new ReportCuestionarioActividadFisica
                           {
                               Nombre_Trabajador = a.Nombre_Trabajador,
                               FechaServicio = a.FechaServicio,
                               IdServicio = a.IdServicio,


                               CUESTIONARIO_ACTIVIDAD_FISICA_1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_1).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_2).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_3 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_3) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_3).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_4 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_4) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_4).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_5 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_5) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_5).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_6 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_6) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_6).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_7 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_7) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_7).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_8 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_8) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_8).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_9 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_9) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_9).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_10 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_10) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_10).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_11 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_11) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_11).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_12 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_12) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_12).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_13 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_13) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_13).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_14 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_14) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_14).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_15 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_15) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_15).v_Value1,
                               CUESTIONARIO_ACTIVIDAD_FISICA_16 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_16) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.CUESTIONARIO_ACTIVIDAD_FISICA_16).v_Value1,
                            

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportInformeEcograficoProstata> GetReportInformeEcograficoProstata(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeEcograficoProstata
                                 {
                                     Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate.Value,

                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.INFORME_ECOGRAFICO_PROSTATA_ID)

                           select new ReportInformeEcograficoProstata
                           {
                               Nombre_Trabajador = a.Nombre_Trabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),

                               INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_MOTIVO_EXAMEN).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_RECEPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RECEPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RECEPCION).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_PAREDES1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES1).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_PAREDES2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_PAREDES2).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONT_ANECOICO).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_IAMGENES_EXPANSIVAS).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CALCULOS_INTERIOR).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_TAMAÑO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_TAMAÑO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_TAMAÑO).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_PREMICCIONAL).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOL_POSMICCIONAL).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_RETECION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RETECION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_RETECION).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_BORDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_BORDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_BORDES).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_TRANSVERSO).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_ANTERO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ANTERO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ANTERO).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DIAMETRO_LONGITUDINAL).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_VOLUMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_VOLUMEN_VN).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_ECOESTRUCTURA).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_DESCRIPCION_OTROS).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_NINGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_NINGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_NINGUNA).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_OBSERVACIONES).v_Value1,
                               INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.INFORME_ECOGRAFICO_PROSTATA_CONCLUSIONES).v_Value1,

                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportInformeEcograficoAbdominal> GetReportInformeEcograficoAbdominal(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeEcograficoAbdominal
                                 {
                                     Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     FechaServicio = A.d_ServiceDate.Value
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_ABDOMINAL_ID)

                           select new ReportInformeEcograficoAbdominal
                           {
                               Nombre_Trabajador = a.Nombre_Trabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),
                               FechaServicio = a.FechaServicio,
                               ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MOTIVO_EXAMEN).v_Value1,
                               ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD).v_Value1,
                               ECOGRAFIA_ABDOMINAL_BORDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MORFOLOGIA_MOVILIDAD_DESCRIPCION).v_Value1,
                               ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BORDES_DESCRIPCION).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIMENSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PAREMQUIMA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIMENSIONES_DESCRIPCION).v_Value1,
                               ECOGRAFIA_ABDOMINAL_ECOGENICIDA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ECOGENICIDA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ECOGENICIDA).v_Value1,
                               ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_IMAGENES_EXPANSIVAS).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DILATACION_VIAS_BILIARES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_COLEDOCO).v_Value1,
                               ECOGRAFIA_ABDOMINAL_FORMA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA).v_Value1,                               
                               ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_FORMA_DESCRIPCION).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PAREDES1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES1).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PAREDES2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREDES2).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONT_ANECOICO).v_Value1,
                               ECOGRAFIA_ABDOMINAL_BARRO_BILIAR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BARRO_BILIAR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_BARRO_BILIAR).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_INTERIOR).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALCULOS_TAMAÑO).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIAMETRO_TRANSVERSO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P1).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIAMETRO_LOGITUDINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P2).v_Value1,

                               ECOGRAFIA_ABDOMINAL_PANCREAS_MORFOLOGIA_MOVILIDAD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P3) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P3).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P4) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P4).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PANCREAS_MEDIDAS_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P5) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P5).v_Value1,

                               ECOGRAFIA_ABDOMINAL_CABEZA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P6) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P6).v_Value1,

                               ECOGRAFIA_ABDOMINAL_CUELLO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P7) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P7).v_Value1,

                               ECOGRAFIA_ABDOMINAL_CUERNO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P8) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P8).v_Value1,
                               ECOGRAFIA_ABDOMINAL_COLA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_Obs) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_Obs).v_Value1,


                               //ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_MEDIDAD_NO_EVALUABLES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_ANORMAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ANORMAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_ANORMAL).v_Value1,
                               ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_DIAMETRO_ANTOPOSTERIOR).v_Value1,
                               ECOGRAFIA_ABDOMINAL_LONGUITUD = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LONGUITUD) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LONGUITUD).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CALIBRES_VASOS_DESCRIPCION).v_Value1,

                               ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL).v_Value1,
                               ECOGRAFIA_ABDOMINAL_NINGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_NINGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_NINGUNA).v_Value1,
                               ECOGRAFIA_ABDOMINAL_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_OBSERVACIONES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_CONCLUSIONES).v_Value1,
                               ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_PAREMQUIMA_DESCRIPCION).v_Value1,
                               ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_ABDOMINAL_LIQUIDO_LIBRE_ANDOMINAL_DESCRIPCION).v_Value1
                               
                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportInformeEcograficoRenal> GetReportInformeEcograficoRenal(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInformeEcograficoRenal
                                 {
                                     Nombre_Trabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     FechaServicio = A.d_ServiceDate.Value
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.ECOGRAFIA_ABDOMINAL_ID)

                           select new ReportInformeEcograficoRenal
                           {
                               Nombre_Trabajador = a.Nombre_Trabajador,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),
                               FechaServicio = a.FechaServicio,
                               ECOGRAFIA_RENAL_MOTIVO_EXAMEN = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MOTIVO_EXAMEN) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MOTIVO_EXAMEN).v_Value1,
                               ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_DERECHO).v_Value1,


                               ECOGRAFIA_RENAL_LONGITUD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_PARENQUIMA_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_DERECHO).v_Value1,


                               ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_DERECHO).v_Value1,


                               ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_DERECHO).v_Value1,


                               ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_DERECHO).v_Value1,




                               ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MORFOLOGIA_MOVILIDAD_RINION_IZQUIERDO).v_Value1,

                               ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_ANORMAL_RINION_IZQUIERDO).v_Value1,



                               ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_ECOGENICIDAD_RINION_IZQUIERDO).v_Value1,


                               ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_LONGITUD_RINION_IZQUIERDO).v_Value1,


                               ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PARENQUIMA_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXP_SOLIDAS_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_QUISTICAS_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_MICROLITIAS_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_RINION_IZQUIERDO).v_Value1,

                               ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_MEDIDAD_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_MEDIDA_RINION_IZQUIERDO).v_Value1,
                               ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_DERECHO).v_Value1,

                               ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_OTROS_RIÑON_IZQUIERDO).v_Value1,

                               ECOGRAFIA_RENAL_REPLICACION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_REPLICACION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_REPLICACION).v_Value1,

                               ECOGRAFIA_RENAL_PAREDES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PAREDES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_PAREDES).v_Value1,
                               ECOGRAFIA_RENAL_CONT_ANECOICO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONT_ANECOICO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONT_ANECOICO).v_Value1,


                               ECOGRAFIA_RENAL_IMG_EXPANSIVAS = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXPANSIVAS) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_IMG_EXPANSIVAS).v_Value1,
                               ECOGRAFIA_RENAL_CALCULOS_INTERIOR = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR).v_Value1,



                               ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CALCULOS_INTERIOR_MEDIDA).v_Value1,
                               ECOGRAFIA_RENAL_VOL_PREMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_PREMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_PREMICCIONAL).v_Value1,
                               ECOGRAFIA_RENAL_VOL_POSMICCIONAL = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_POSMICCIONAL) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_VOL_POSMICCIONAL).v_Value1,

                               ECOGRAFIA_RENAL_RETENCION = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_RETENCION) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_RETENCION).v_Value1,

                               ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_DESCRIPCION_VEGIGA).v_Value1,
                               ECOGRAFIA_RENAL_NIGUNA = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_NIGUNA) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_NIGUNA).v_Value1,
                               ECOGRAFIA_RENAL_OBSERVACIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_OBSERVACIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_OBSERVACIONES).v_Value1,
                               ECOGRAFIA_RENAL_CONCLUSIONES = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONCLUSIONES) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_CONCLUSIONES).v_Value1,
                               ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.ECOGRAFIA_RENAL_HIDRONEFROSIS_RINION_IZQUIERDO).v_Value1
                             
                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportTestVertigo> GetReportTestVertigo(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on A.i_InsertUserOccupationalMedicalId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportTestVertigo
                                 {
                                     Nombres = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Fecha = A.d_ServiceDate.Value,
                                     Firma = pme.b_SignatureImage,
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let CuestNordi = ValoresComponente(pstrserviceId, Constants.TEST_SINTOMATICO_RESP_ID)

                           select new ReportTestVertigo
                           {
                               Nombres = a.Nombres,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),
                               Fecha = a.Fecha,
                               Firma = a.Firma,
                               TEST_VERTIGO_1 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_1) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_1).v_Value1,
                               TEST_VERTIGO_2 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_2) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_2).v_Value1,
                               TEST_VERTIGO_3 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_3) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_3).v_Value1,
                               TEST_VERTIGO_4 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_4) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_4).v_Value1,
                               TEST_VERTIGO_5 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_5) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_5).v_Value1,
                               TEST_VERTIGO_6 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_6) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_6).v_Value1,
                               TEST_VERTIGO_7 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_7) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_7).v_Value1,
                               TEST_VERTIGO_8 = CuestNordi.Count == 0 || CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_8) == null ? string.Empty : CuestNordi.Find(p => p.v_ComponentFieldId == Constants.TEST_VERTIGO_8).v_Value1,
                              
                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<ReportEvaCardiologica> GetReportEvaluacionCardiologia(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on A.i_InsertUserOccupationalMedicalId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportEvaCardiologica
                                 {
                                     NombreTrabajador = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,                                    
                                     Fecha = A.d_ServiceDate.Value,
                                     FirmaMedico = pme.b_SignatureImage,
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let EvaCardio = ValoresComponente(pstrserviceId, Constants.EVA_CARDIOLOGICA_ID)

                           select new ReportEvaCardiologica
                           {
                               NombreTrabajador = a.NombreTrabajador,
                               Fecha = a.Fecha,
                               FirmaMedico = a.FirmaMedico,
                               EVA_CARDIOLOGICA_SOPLO_CARDIACO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SOPLO_CARDIACO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SOPLO_CARDIACO).v_Value1,
                               EVA_CARDIOLOGICA_PRESION_ALTA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ALTA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ALTA).v_Value1,
                               EVA_CARDIOLOGICA_CANSANCIO_RAPIDO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CANSANCIO_RAPIDO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CANSANCIO_RAPIDO).v_Value1,
                               EVA_CARDIOLOGICA_MAREOS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS).v_Value1,
                               EVA_CARDIOLOGICA_DOLOR_PRECORDIAL = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DOLOR_PRECORDIAL) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DOLOR_PRECORDIAL).v_Value1,
                               EVA_CARDIOLOGICA_PALPITACIONES = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES).v_Value1,
                               EVA_CARDIOLOGICA_ATAQUE_CORAZON = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ATAQUE_CORAZON) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ATAQUE_CORAZON).v_Value1,
                               EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PERDIDA_CONCIENCIA).v_Value1,
                               EVA_CARDIOLOGICA_OBESIDAD = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OBESIDAD) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OBESIDAD).v_Value1,
                               EVA_CARDIOLOGICA_TABAQUISMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_TABAQUISMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_TABAQUISMO).v_Value1,
                               EVA_CARDIOLOGICA_DIABETES = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DIABETES) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DIABETES).v_Value1,
                               EVA_CARDIOLOGICA_DISLIPIDEMIA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISLIPIDEMIA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISLIPIDEMIA).v_Value1,
                               EVA_CARDIOLOGICA_VARICES_PIERNAS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_VARICES_PIERNAS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_VARICES_PIERNAS).v_Value1,
                               EVA_CARDIOLOGICA_SEDENTARISMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SEDENTARISMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_SEDENTARISMO).v_Value1,
                               EVA_CARDIOLOGICA_OTROS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS).v_Value1,
                               
                               EVA_CARDIOLOGICA_PRECORDIAL_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRECORDIAL_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRECORDIAL_1).v_Value1,
                               EVA_CARDIOLOGICA_DESMAYOS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DESMAYOS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DESMAYOS).v_Value1,
                               EVA_CARDIOLOGICA_PALPITACIONES_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PALPITACIONES_1).v_Value1,
                               EVA_CARDIOLOGICA_DISNEA_PAROXISTICA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISNEA_PAROXISTICA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_DISNEA_PAROXISTICA).v_Value1,
                               EVA_CARDIOLOGICA_MAREOS_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_MAREOS_1).v_Value1,
                               EVA_CARDIOLOGICA_CLAUDICACION = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CLAUDICACION) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CLAUDICACION).v_Value1,
                               EVA_CARDIOLOGICA_OTROS_1 = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS_1) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_OTROS_1).v_Value1,

                               EVA_CARDIOLOGICA_FREC_CARDIACA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FREC_CARDIACA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FREC_CARDIACA).v_Value1,
                               EVA_CARDIOLOGICA_PRESION_ARTERIAL = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ARTERIAL) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PRESION_ARTERIAL).v_Value1,
                               EVA_CARDIOLOGICA_CHOQUE_PUNTA = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CHOQUE_PUNTA) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_CHOQUE_PUNTA).v_Value1,

                               EVA_CARDIOLOGICA_RITMO = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_RITMO) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_RITMO).v_Value1,
                               EVA_CARDIOLOGICA_EJE = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_EJE) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_EJE).v_Value1,
                               EVA_CARDIOLOGICA_FC = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FC) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_FC).v_Value1,
                               EVA_CARDIOLOGICA_PR = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PR) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_PR).v_Value1,
                               EVA_CARDIOLOGICA_QRS = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QRS) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QRS).v_Value1,
                               EVA_CARDIOLOGICA_QT = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QT) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_QT).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_Q = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_Q) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_Q).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_P = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_P) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_P).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_R = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_R) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_R).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_S = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_S) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_S).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_T = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_T) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_T).v_Value1,
                               EVA_CARDIOLOGICA_ONDA_U = EvaCardio.Count == 0 || EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_U) == null ? string.Empty : EvaCardio.Find(p => p.v_ComponentFieldId == Constants.EVA_CARDIOLOGICA_ONDA_U).v_Value1,


                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        //Alberto
        public bool PermitirLlamar(string pstrServiceId, int pintPiso)
        {
            //mon.IsActive = true;

          
            try
            {
                bool Respuesta = true;
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from s in dbContext.servicecomponent
                                 join c in dbContext.component on s.v_ComponentId equals c.v_ComponentId
                                 join P in dbContext.systemparameter on new { a = 116, b = c.i_CategoryId.Value }
                                       equals new { a = P.i_GroupId, b = P.i_ParameterId } //into P_join
                                 //from P in P_join.DefaultIfEmpty()

                                 join P1 in dbContext.systemparameter on new { a = 127, b = s.i_ServiceComponentStatusId.Value }
                                equals new { a = P1.i_GroupId, b = P1.i_ParameterId } //into P1_join
                                 //from P1 in P1_join.DefaultIfEmpty()

                                 where s.v_ServiceId == pstrServiceId
                                 select new Piso
                                 {
                                     v_Categoria = P.v_Value1,
                                     ValorPiso = P.v_Value2,
                                     i_CategoriaId = c.i_CategoryId.Value,
                                     i_EstadoComponente = s.i_ServiceComponentStatusId.Value,
                                     v_EstadoComponente = P1.v_Value1
                                 }
                                 );


                var objData = query.AsEnumerable()
                           .GroupBy(x => x.i_CategoriaId)
                           .Select(group => group.First())
                           .OrderBy(o => o.ValorPiso);


                foreach (var item in objData)
                {
                    if (int.Parse(item.ValorPiso.ToString()) < pintPiso && item.i_EstadoComponente != (int)ServiceComponentStatus.Culminado)
                    {
                        Respuesta = false;
                    }
                }

                return Respuesta;
            }
            catch (Exception ex)
            {
                return false;
            }
        }


        // Alberto
        public List<ReportInterconsulta> GetReportInterconsulta(string pstrserviceId, string pstrAltitud, string pstrEspecialidad, string pstrLabor, string pstrSolicita, string pstrObservaciones)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId

                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()

                                 join C1 in dbContext.organization on C.v_EmployerOrganizationId equals C1.v_OrganizationId into C1_join
                                 from C1 in C1_join.DefaultIfEmpty()
                                                              

                                 join J in dbContext.systemparameter on new { a = B.i_SexTypeId.Value, b = 100 }
                                                             equals new { a = J.i_ParameterId, b = J.i_GroupId } into J_join // GENERO
                                 from J in J_join.DefaultIfEmpty()


                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on A.i_InsertUserOccupationalMedicalId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()


                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportInterconsulta
                                 {
                                     ServiceId = A.v_ServiceId,
                                     Paciente = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     HuellaPaciente = B.b_FingerPrintImage,
                                     FirmaPaciente = B.b_RubricImage,
                                     FirmaMedicoEvaluador = pme.b_SignatureImage,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = B.i_SexTypeId.Value,
                                     NroDocumento = B.v_DocNumber,
                                     Puesto = B.v_CurrentOccupation,
                                     Observaciones = pstrObservaciones
                                 });

                var MedicalCenter = GetInfoMedicalCenter();

                var sql = (from a in objEntity.ToList()
                           let Osteo = ValoresComponente(pstrserviceId, Constants.OSTEO_MUSCULAR_ID_1)


                           select new ReportInterconsulta
                           {
                               ServiceId = a.ServiceId,
                               Paciente = a.Paciente,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento),
                               Genero =a.Genero,
                               NroDocumento = a.NroDocumento,
                               HuellaPaciente = a.HuellaPaciente,
                               FirmaPaciente = a.FirmaPaciente,
                               FirmaMedicoEvaluador = a.FirmaMedicoEvaluador,
                               Altitud = pstrAltitud,
                               Especialidad = pstrEspecialidad ,
                               Labor = pstrLabor,
                               Solicita =pstrSolicita,
                               Logo = MedicalCenter.b_Image,
                               Puesto = a.Puesto,
                               Observaciones =a.Observaciones
                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        public bool EsProtocoloComision(string pstrServiceId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var objEntity = (from a in dbContext.service
                                 join b in dbContext.protocol on a.v_ProtocolId equals b.v_ProtocolId
                                 where a.v_ServiceId == pstrServiceId && b.i_HasVigency == 1
                                 select a).FirstOrDefault();


                if (objEntity == null)
                {
                    return false;
                }
                else
                {
                    return true;
                }
                
            }
            catch (Exception)
            {
                
                throw;
            }

        }

        public List<DiagnosticRepositoryList> GetCAPE(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
                           equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                             join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

                             join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
                                      equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

                             join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                        equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
                             from J3 in J3_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
                                                equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
                             from H1 in H1_join.DefaultIfEmpty()

                             join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
                                                                             equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
                             from H2 in H2_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == isDeleted) &&
                                   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {

                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 b_Logo = ooo.b_Image,
                                 v_DocNumber = D.v_DocNumber,
                                v_DocTypeName = J6.v_Value1,
                                 d_BirthDate = D.d_Birthdate,
                                 v_GenderName = J.v_Value1,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 v_OrganizationPartialName = ooo.v_Name,
                                 v_ProtocolName = E.v_Name,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 v_DiseasesName = ddd.v_Name,
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 Grupo = H1.v_Value1,
                                 Factor = H2.v_Value1,
                                 g_Image = pr.b_SignatureImage,
                                 v_ObsStatusService = sss.v_ObsStatusService
                             });


                var q = (from a in query.ToList()
                         select new DiagnosticRepositoryList
                         {
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             b_Logo = a.b_Logo,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber =  a.v_DocTypeName + " - " + a.v_DocNumber,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_ProtocolName = a.v_ProtocolName,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_OccupationName = a.v_OccupationName == "" ? "------" : a.v_OccupationName,
                             v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_ProtocolName),
                              i_AptitudeStatusId = a.i_AptitudeStatusId,

                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             Grupo = a.Grupo,
                             Factor = a.Factor,
                             GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
                             g_Image = a.g_Image,
                             v_ObsStatusService = a.v_ObsStatusService
                           
                           
                         }).ToList();


               
                return q;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<DiagnosticRepositoryList> GetCAPSD(string pstrServiceId, string pstrPath)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
               
                
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
                           equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                             join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

                             join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
                                      equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

                             join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
                                                        equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
                             from J3 in J3_join.DefaultIfEmpty()

                             join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
                                             equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                             from J1 in J1_join.DefaultIfEmpty()

                             join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
                                                             equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                             from J2 in J2_join.DefaultIfEmpty()

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
                                                equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
                             from H1 in H1_join.DefaultIfEmpty()

                             join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
                                                                             equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
                             from H2 in H2_join.DefaultIfEmpty()

                             where (ccc.v_ServiceId == pstrServiceId) &&
                                   (ccc.i_IsDeleted == isDeleted) &&
                                   (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {
                                 v_ServiceId = sss.v_ServiceId,
                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 b_Logo = ooo.b_Image,
                                 v_DocNumber = D.v_DocNumber,
                                 v_DocTypeName = J6.v_Value1,
                                 d_BirthDate = D.d_Birthdate,
                                 v_GenderName = J.v_Value1,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 v_OrganizationPartialName = ooo.v_Name,
                                 v_ProtocolName = E.v_Name,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 v_DiseasesName = ddd.v_Name,
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 Grupo = H1.v_Value1,
                                 Factor = H2.v_Value1,
                                 g_Image = pr.b_SignatureImage,
                                 v_EsoTypeName= H.v_Value1,
                                 v_ObsStatusService = sss.v_ObsStatusService
                                 
                             });

                var MedicalCenter = GetInfoMedicalCenter();
                var q = (from a in query.ToList()
                         select new DiagnosticRepositoryList
                         {
                             v_ServiceId = a.v_ServiceId,
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             b_Logo = a.b_Logo,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber =  a.v_DocNumber,
                             d_BirthDate = a.d_BirthDate,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_ProtocolName = a.v_ProtocolName,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_OccupationName = a.v_OccupationName,
                             v_OrganizationName = string.Format("{0} ", a.v_OrganizationPartialName),
                             i_AptitudeStatusId = a.i_AptitudeStatusId,

                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             //v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             g_Image = a.g_Image,
                             LogoPropietaria = MedicalCenter.b_Image,
                             pathSinRestriccion = a.i_AptitudeStatusId == 2 ?pstrPath + "\\Resources\\cuadradonegro.jpg":"",
                             pathConRestriccion = a.i_AptitudeStatusId == 5 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
                             pathObservado = a.i_AptitudeStatusId == 4 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
                             pathNoApto = a.i_AptitudeStatusId == 3 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
                             Grupo = a.Grupo,
                             Factor = a.Factor,
                             GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
                             v_EsoTypeName = a.v_EsoTypeName,
                             v_ObsStatusService = a.v_ObsStatusService

                         }).ToList();



                return q;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public List<DiagnosticRepositoryList> GetCAPSM(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
                             join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                             join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = sc.v_ComponentId }
                                                       equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
                             from d in d_join.DefaultIfEmpty()

                             join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
                                                 equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
                             equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO

                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId


                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
                                      equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                  

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
                                                equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
                             from H1 in H1_join.DefaultIfEmpty()

                             join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
                                                                             equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
                             from H2 in H2_join.DefaultIfEmpty()

                             where (sss.v_ServiceId == pstrServiceId) &&
                                 (d.i_IsDeleted == 0 || d.i_IsDeleted == null) &&
                                   (sss.i_IsDeleted == isDeleted) 
                                 
                                 select new DiagnosticRepositoryList
                             {
                                 v_ServiceId = sss.v_ServiceId,
                                 Categoria = J8.v_Value1,
                                 Resultado = d.v_DiseasesId,
                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 b_Logo = ooo.b_Image,
                                 v_DocNumber = D.v_DocNumber,
                                 v_DocTypeName = J6.v_Value1,
                                 d_BirthDate = D.d_Birthdate,
                                 v_GenderName = J.v_Value1,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 v_OrganizationPartialName = ooo.v_Name,
                                 v_ProtocolName = E.v_Name,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 v_DiseasesName = ddd.v_Name,
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 Grupo = H1.v_Value1,
                                 Factor = H2.v_Value1,
                                 g_Image = pr.b_SignatureImage,
                                 v_EsoTypeName = H.v_Value1,
                                 i_DiagnosticTypeId = d.i_DiagnosticTypeId,
                                 v_ComponentId = sc.v_ComponentId,
                                 v_ObsStatusService = sss.v_ObsStatusService
                             }).ToList();

                var MedicalCenter = GetInfoMedicalCenter();

                //var e = query.OrderBy(a => a.v_ComponentId);
                //var ee = e.ToList().Find(p => p.v_ComponentId == "N009-ME000000054");

                var q = (from a in query.ToList()
                         orderby a.Resultado descending
                         select new DiagnosticRepositoryList
                         {
                             v_ServiceId =a.v_ServiceId,
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             b_Logo = a.b_Logo,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber = a.v_DocTypeName + " - " + a.v_DocNumber,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_ProtocolName = a.v_ProtocolName,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_OccupationName = a.v_OccupationName,
                             v_OrganizationName = string.Format("{0} ", a.v_OrganizationPartialName),
                             i_AptitudeStatusId = a.i_AptitudeStatusId,

                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             Grupo = a.Grupo,
                             Factor = a.Factor,
                             GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
                             g_Image = a.g_Image,
                             LogoPropietaria = MedicalCenter.b_Image,
                             v_EsoTypeName = a.v_EsoTypeName,
                             Categoria = a.Categoria,
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                             Resultado = a.Resultado == null || a.i_DiagnosticTypeId == (int)TipoDx.Normal ? "NORMAL" : "ALTERADO",
                             v_ObsStatusService = a.v_ObsStatusService
                         }).ToList();

                var objData = q.AsEnumerable()
                         .GroupBy(x => x.Categoria)
                         .Select(group => group.First());

                return objData.ToList();

                //return null;
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        //public List<DiagnosticRepositoryList> GetCAPC(string pstrServiceId, string pstrPath)
        //{
        //    //mon.IsActive = true;
        //    var isDeleted = 0;
        //    try
        //    {
        //        SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

        //        var query = (from sss in dbContext.service
        //                     join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
        //                     join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
        //                     join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = c.v_ComponentId }
        //                                               equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
        //                     from d in d_join.DefaultIfEmpty()

        //                     join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
        //                                         equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

        //                     join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
        //                     from ccc in ccc_join.DefaultIfEmpty()  // ESO

        //                     join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
        //                     from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

        //                     join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

        //                     join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
        //                                        equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

        //                     join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
        //                   equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


        //                     join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

        //                     join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

        //                     join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

        //                     join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

        //                     join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
        //                                         equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

        //                     join G in dbContext.systemparameter on new { a = sss.i_AptitudeStatusId.Value, b = 124 }
        //                              equals new { a = G.i_ParameterId, b = G.i_GroupId }  // ESTADO APTITUD ESO                    

        //                     join J3 in dbContext.systemparameter on new { a = 119, b = sss.i_MasterServiceId.Value }  // DESCRIPCION DEL SERVICIO
        //                                                equals new { a = J3.i_GroupId, b = J3.i_ParameterId } into J3_join
        //                     from J3 in J3_join.DefaultIfEmpty()

        //                     join J1 in dbContext.systemuser on new { i_InsertUserId = ccc.i_InsertUserId.Value }
        //                                     equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
        //                     from J1 in J1_join.DefaultIfEmpty()

        //                     join J2 in dbContext.systemuser on new { i_UpdateUserId = ccc.i_UpdateUserId.Value }
        //                                                     equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
        //                     from J2 in J2_join.DefaultIfEmpty()

        //                     join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
        //                     from su in su_join.DefaultIfEmpty()

        //                     join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
        //                     from pr in pr_join.DefaultIfEmpty()

        //                     join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
        //                                        equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
        //                     from H1 in H1_join.DefaultIfEmpty()

        //                     join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
        //                                                                     equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
        //                     from H2 in H2_join.DefaultIfEmpty()

        //                     where (ccc.v_ServiceId == pstrServiceId) &&
        //                           (ccc.i_IsDeleted == isDeleted) &&
        //                           (ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
        //                           ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

        //                     select new DiagnosticRepositoryList
        //                     {
        //                         Categoria = J8.v_Value1,
        //                         Resultado = d.v_DiseasesId,
        //                         v_ServiceId = sss.v_ServiceId,
        //                         v_FirstName = D.v_FirstName,
        //                         v_FirstLastName = D.v_FirstLastName,
        //                         v_SecondLastName = D.v_SecondLastName,
        //                         b_Logo = ooo.b_Image,
        //                         v_DocNumber = D.v_DocNumber,
        //                         v_DocTypeName = J6.v_Value1,
        //                         d_BirthDate = D.d_Birthdate,
        //                         v_GenderName = J.v_Value1,
        //                         i_EsoTypeId_Old = E.i_EsoTypeId.Value,
        //                         v_OccupationName = D.v_CurrentOccupation,
        //                         v_OrganizationPartialName = ooo.v_Name,
        //                         v_ProtocolName = E.v_Name,
        //                         i_AptitudeStatusId = sss.i_AptitudeStatusId,
        //                         d_ServiceDate = sss.d_ServiceDate,
        //                         v_DiseasesName = ddd.v_Name,
        //                         v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
        //                         Grupo = H1.v_Value1,
        //                         Factor = H2.v_Value1,
        //                         g_Image = pr.b_SignatureImage,
        //                         v_EsoTypeName = H.v_Value1
        //                     }).ToList();

        //        var MedicalCenter = GetInfoMedicalCenter();
        //        var q = (from a in query.ToList()
        //                 orderby a.Resultado descending
        //                 select new DiagnosticRepositoryList
        //                 {
        //                     v_ServiceId =a.v_ServiceId,
        //                     v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
        //                     b_Logo = a.b_Logo,
        //                     v_DocTypeName = a.v_DocTypeName,
        //                     d_BirthDate = a.d_BirthDate,
        //                     v_DocNumber = a.v_DocTypeName + " - " + a.v_DocNumber,
        //                     i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
        //                     v_GenderName = a.v_GenderName,
        //                     v_ProtocolName = a.v_ProtocolName,
        //                     i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
        //                     v_OccupationName = a.v_OccupationName,
        //                     v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_ProtocolName),
        //                     i_AptitudeStatusId = a.i_AptitudeStatusId,

        //                     v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
        //                     v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
        //                     v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
        //                     v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
        //                     Grupo = a.Grupo,
        //                     Factor = a.Factor,
        //                     GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
        //                     g_Image = a.g_Image,
        //                     LogoPropietaria = MedicalCenter.b_Image,
        //                     v_EsoTypeName = a.v_EsoTypeName,
        //                     Categoria = a.Categoria,
        //                     Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO",
        //                    pathSinRestriccion = a.i_AptitudeStatusId == 2 ?pstrPath + "\\Resources\\cuadradonegro.jpg":"",
        //                     pathConRestriccion = a.i_AptitudeStatusId == 5 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
        //                     pathObservado = a.i_AptitudeStatusId == 4 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
        //                     pathNoApto = a.i_AptitudeStatusId == 3 ? pstrPath + "\\Resources\\cuadradonegro.jpg" : "",
        //                 }).ToList();

        //        var objData = q.AsEnumerable()
        //                 .GroupBy(x => x.Categoria)
        //                 .Select(group => group.First());

        //        return objData.ToList();
        //    }
        //    catch (Exception ex)
        //    {
        //        return null;
        //    }
        //}
        
        public List<CategoriaResultados> GetListCategoriaResultados(string pstrServiceId)
        {
            try
            {
               SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

               var query = (from s in dbContext.service
                            join sc in dbContext.servicecomponent on s.v_ServiceId equals sc.v_ServiceId
                            join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                            join d in dbContext.diagnosticrepository on new {a= sc.v_ServiceId, b= c.v_ComponentId } 
                                                        equals new{a = d.v_ServiceId, b = d.v_ComponentId} into d_join
                             from d in d_join.DefaultIfEmpty()

                            join J in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId } 


                            where s.i_IsDeleted == 0 && sc.i_IsDeleted == 0 && s.v_ServiceId == pstrServiceId
                            select new CategoriaResultados
                            {
                                Categoria = J.v_Value1,
                                Resultado =  d.v_DiseasesId

                            }).ToList();

                  var q = (from a in query.ToList()
                           orderby a.Resultado descending
                         select new CategoriaResultados
                         {
                             Categoria = a.Categoria,
                             Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO"
                         }).ToList();

               var objData = q.AsEnumerable()                          
                           .GroupBy(x => x.Categoria)
                           .Select(group => group.First());

               return objData.ToList();
                             
            }
            catch (Exception)
            {
                
                throw;
            }
        }


        public List<DiagnosticRepositoryList> GetCAPC(string pstrServiceId)
        {
            //mon.IsActive = true;
            var isDeleted = 0;
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var query = (from sss in dbContext.service
                             join sc in dbContext.servicecomponent on sss.v_ServiceId equals sc.v_ServiceId
                             join c in dbContext.component on sc.v_ComponentId equals c.v_ComponentId
                             join d in dbContext.diagnosticrepository on new { a = sc.v_ServiceId, b = c.v_ComponentId }
                                                       equals new { a = d.v_ServiceId, b = d.v_ComponentId } into d_join
                             from d in d_join.DefaultIfEmpty()

                             join J8 in dbContext.systemparameter on new { a = c.i_CategoryId.Value, b = 116 }
                                                 equals new { a = J8.i_ParameterId, b = J8.i_GroupId }

                             join ccc in dbContext.diagnosticrepository on sss.v_ServiceId equals ccc.v_ServiceId into ccc_join
                             from ccc in ccc_join.DefaultIfEmpty()  // ESO

                             join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                             from ddd in ddd_join.DefaultIfEmpty()  // Diagnosticos

                             join D in dbContext.person on sss.v_PersonId equals D.v_PersonId

                             join J in dbContext.systemparameter on new { a = D.i_SexTypeId.Value, b = 100 }
                                                equals new { a = J.i_ParameterId, b = J.i_GroupId }  // GENERO

                             join J6 in dbContext.datahierarchy on new { a = D.i_DocTypeId.Value, b = 106 }
                           equals new { a = J6.i_ItemId, b = J6.i_GroupId }  // TIPO DOCUMENTO


                             join E in dbContext.protocol on sss.v_ProtocolId equals E.v_ProtocolId

                             join F in dbContext.groupoccupation on E.v_GroupOccupationId equals F.v_GroupOccupationId

                             join ooo in dbContext.organization on E.v_CustomerOrganizationId equals ooo.v_OrganizationId

                             join lll in dbContext.location on E.v_EmployerLocationId equals lll.v_LocationId

                             join H in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                 equals new { a = H.i_ParameterId, b = H.i_GroupId }  // TIPO ESO [ESOA,ESOR,ETC]

                             join su in dbContext.systemuser on sss.i_UpdateUserOccupationalMedicaltId.Value equals su.i_SystemUserId into su_join
                             from su in su_join.DefaultIfEmpty()

                             join pr in dbContext.professional on su.v_PersonId equals pr.v_PersonId into pr_join
                             from pr in pr_join.DefaultIfEmpty()

                             join H1 in dbContext.systemparameter on new { a = D.i_BloodGroupId.Value, b = 154 }
                                                equals new { a = H1.i_ParameterId, b = H1.i_GroupId } into H1_join
                             from H1 in H1_join.DefaultIfEmpty()

                             join H2 in dbContext.systemparameter on new { a = D.i_BloodFactorId.Value, b = 155 }
                                                                             equals new { a = H2.i_ParameterId, b = H2.i_GroupId } into H2_join
                             from H2 in H2_join.DefaultIfEmpty()

                             where (sss.v_ServiceId == pstrServiceId) &&
                                   (d.i_IsDeleted == isDeleted || d.i_IsDeleted == null)  &&
                                   (sss.i_IsDeleted == isDeleted) 
                                   //(ccc.i_FinalQualificationId == (int)FinalQualification.Definitivo ||
                                   //ccc.i_FinalQualificationId == (int)FinalQualification.Presuntivo)

                             select new DiagnosticRepositoryList
                             {
                                 i_CategoryId = c.i_CategoryId.Value,
                                 Categoria = J8.v_Value1,
                                 Resultado = d.v_DiseasesId,
                                 v_FirstName = D.v_FirstName,
                                 v_FirstLastName = D.v_FirstLastName,
                                 v_SecondLastName = D.v_SecondLastName,
                                 b_Logo = ooo.b_Image,
                                 v_DocNumber = D.v_DocNumber,
                                 v_DocTypeName = J6.v_Value1,
                                 d_BirthDate = D.d_Birthdate,
                                 v_GenderName = J.v_Value1,
                                 i_EsoTypeId_Old = E.i_EsoTypeId.Value,
                                 v_OccupationName = D.v_CurrentOccupation,
                                 v_OrganizationPartialName = ooo.v_Name,
                                 v_ProtocolName = E.v_Name,
                                 i_AptitudeStatusId = sss.i_AptitudeStatusId,
                                 d_ServiceDate = sss.d_ServiceDate,
                                 v_DiseasesName = ddd.v_Name,
                                 v_DiagnosticRepositoryId = ccc.v_DiagnosticRepositoryId,
                                 Grupo = H1.v_Value1,
                                 Factor = H2.v_Value1,
                                 g_Image = pr.b_SignatureImage,
                                 v_EsoTypeName = H.v_Value1,
                                 v_ServiceId =sss.v_ServiceId,
                                 i_DiagnosticTypeId = d.i_DiagnosticTypeId,
                                 v_ComponentId = sc.v_ComponentId,
                                 v_ObsStatusService = sss.v_ObsStatusService
                             }).ToList();

                var MedicalCenter = GetInfoMedicalCenter();

                var q = (from a in query.ToList()
                         orderby a.Resultado descending
                         select new DiagnosticRepositoryList
                         {
                             i_CategoryId = a.i_CategoryId,
                             v_ServiceId =a.v_ServiceId,
                             v_PersonName = string.Format("{0} {1}, {2}", a.v_FirstLastName, a.v_SecondLastName, a.v_FirstName),
                             b_Logo = a.b_Logo,
                             v_DocTypeName = a.v_DocTypeName,
                             v_DocNumber = a.v_DocNumber,
                             d_BirthDate = a.d_BirthDate,
                             i_Age = a.d_BirthDate == null ? (int?)null : DateTime.Today.AddTicks(-a.d_BirthDate.Value.Ticks).Year - 1,
                             v_GenderName = a.v_GenderName,
                             v_ProtocolName = a.v_ProtocolName,
                             i_EsoTypeId = a.i_EsoTypeId_Old.ToString(),
                             v_OccupationName = a.v_OccupationName,
                             v_OrganizationName = string.Format("{0} / {1}", a.v_OrganizationPartialName, a.v_ProtocolName),
                             i_AptitudeStatusId = a.i_AptitudeStatusId,

                             v_ServiceDate = a.d_ServiceDate == null ? string.Empty : a.d_ServiceDate.Value.ToShortDateString(),
                             v_DiagnosticRepositoryId = a.v_DiagnosticRepositoryId,
                             v_RecomendationsName = ConcatenateRecommendation(a.v_DiagnosticRepositoryId),
                             //v_RestrictionsName = ConcatenateRestriction(a.v_DiagnosticRepositoryId) == "" ? "Ninguno" : ConcatenateRestriction(a.v_DiagnosticRepositoryId),
                             Grupo = a.Grupo,
                             Factor = a.Factor,
                             GrupoFactorSanguineo = a.Grupo + " - " + a.Factor,
                             g_Image = a.g_Image,
                             LogoPropietaria = MedicalCenter.b_Image,
                             v_EsoTypeName = a.v_EsoTypeName,
                             Categoria = a.Categoria,
                             //Resultado = a.Resultado == null ? "NORMAL" : "ALTERADO",
                             i_DiagnosticTypeId = a.i_DiagnosticTypeId,
                              Resultado = a.Resultado == null || a.i_DiagnosticTypeId == (int)TipoDx.Normal ? "NORMAL" : "ALTERADO",
                             v_RestrictionsName = ConcatenateRestrictionByCategoria(a.i_CategoryId, a.v_ServiceId) == "" ?"NINGUNO" : ConcatenateRestrictionByCategoria(a.i_CategoryId,a.v_ServiceId),
                             v_ObsStatusService = a.v_ObsStatusService
                         }).ToList();

                var objData = q.AsEnumerable()
                         .GroupBy(x => x.Categoria)
                         .Select(group => group.First());


                return objData.ToList();
            }
            catch (Exception ex)
            {
                return null;
            }
        }


        public string DevolverValorDeCampo (string pstrServiceComponentId, string pstrCampoId)
        {
             SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

             var query = (from sss in dbContext.servicecomponentfields
                          join vvv in dbContext.servicecomponentfieldvalues on sss.v_ServiceComponentFieldsId equals vvv.v_ServiceComponentFieldsId
                          where sss.v_ServiceComponentId == pstrServiceComponentId && sss.v_ComponentFieldId == pstrCampoId

                          select new
                          {
                              Valor = vvv.v_Value1
                          }).FirstOrDefault();

             return query.Valor;
        }


        public List<ReporteAtencionMedicaDetallado> ReporteAtencionMedicaDetallada(DateTime? FechaInicio, DateTime? Fechafin, int? pintProfesionalId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

            ReporteAtencionMedicaDetallado oReporteAtencionMedicaDetallado;
            List<ReporteAtencionMedicaDetallado> oLista = new List<ReporteAtencionMedicaDetallado>();

            //var x = dbContext.reporteatencionmedica(FechaInicio, Fechafin, pintProfesionalId).ToList();

            //foreach (var item in x)
            //{
            //    oReporteAtencionMedicaDetallado = new ReporteAtencionMedicaDetallado();
            //    oReporteAtencionMedicaDetallado.Trabajador = item.Trabajador;
            //    oReporteAtencionMedicaDetallado.FechaServicio = item.FechaServicio;
            //    oReporteAtencionMedicaDetallado.Producto = item.Producto;
            //    oReporteAtencionMedicaDetallado.CantidadRecetada = item.CantidadRecetada == null ? 0 : item.CantidadRecetada.Value;
            //    oReporteAtencionMedicaDetallado.CantidadVendida = item.CantidadVendida == null ? 0 : item.CantidadVendida.Value;
            //    oReporteAtencionMedicaDetallado.PrecioVenta = item.PrecioVenta == null ? 0 : item.PrecioVenta.Value;
            //    oReporteAtencionMedicaDetallado.Importe = item.Importe == null ? 0 : item.Importe.Value;
            //    oReporteAtencionMedicaDetallado.TipoDocVenta =item.TipoDocVenta;
            //    oReporteAtencionMedicaDetallado.NroDocVenta = item.NroDocVenta;
            //    oReporteAtencionMedicaDetallado.CondicionPago = item.CondicionPago;
            //    oReporteAtencionMedicaDetallado.Vendedor = item.Vendedor;
            //    oReporteAtencionMedicaDetallado.Profesional = item.Profesional;
            //    oLista.Add(oReporteAtencionMedicaDetallado);
            //}

            return null;
        }

        // Alberto
        public List<ServiceList> ReporteTiempoTrabajadores(string pstrFilterExpression, DateTime? pdatBeginDate, DateTime? pdatEndDate, List<string> componentIds)
        {
         
       try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var query = from A in dbContext.service

                            join A1 in dbContext.servicecomponent on A.v_ServiceId equals A1.v_ServiceId into A1_join
                            from A1 in A1_join.DefaultIfEmpty()

                            join A2 in dbContext.component on A1.v_ComponentId equals A2.v_ComponentId into A2_join
                            from A2 in A2_join.DefaultIfEmpty()

                            join A3 in dbContext.systemparameter on new { a = A2.i_CategoryId.Value, b = 116 } equals new { a = A3.i_ParameterId, b = A3.i_GroupId } into A3_join
                            from A3 in A3_join.DefaultIfEmpty()


                            join B in dbContext.systemparameter on new { a = A.i_ServiceStatusId.Value, b = 125 } equals new { a = B.i_ParameterId, b = B.i_GroupId } into B_join
                            from B in B_join.DefaultIfEmpty()

                            join C in dbContext.systemparameter on new { a = A.i_MasterServiceId.Value, b = 119 } equals new { a = C.i_ParameterId, b = C.i_GroupId } into C_join
                            from C in C_join.DefaultIfEmpty()

                            join D in dbContext.calendar on A.v_ServiceId equals D.v_ServiceId into D_join
                            from D in D_join.DefaultIfEmpty()

                            join E in dbContext.protocol on A.v_ProtocolId equals E.v_ProtocolId

                            join F in dbContext.organization on E.v_EmployerOrganizationId equals F.v_OrganizationId

                            join G in dbContext.location on E.v_EmployerLocationId equals G.v_LocationId

                            join H in dbContext.systemparameter on new { a = E.i_MasterServiceTypeId.Value, b = 119 } equals new { a = H.i_ParameterId, b = H.i_GroupId } into H_join
                            from H in H_join.DefaultIfEmpty()

                            join I in dbContext.person on A.v_PersonId equals I.v_PersonId

                            join K in dbContext.systemparameter on new { a = A.i_AptitudeStatusId.Value, b = 124 } equals new { a = K.i_ParameterId, b = K.i_GroupId } into K_join
                            from K in K_join.DefaultIfEmpty()

                            join L in dbContext.datahierarchy on new { a = I.i_DocTypeId.Value, b = 106 } equals new { a = L.i_ItemId, b = L.i_GroupId } into L_join
                            from L in L_join.DefaultIfEmpty()

                            join et in dbContext.systemparameter on new { a = E.i_EsoTypeId.Value, b = 118 }
                                                equals new { a = et.i_ParameterId, b = et.i_GroupId } into et_join  // TIPO ESO [ESOA,ESOR,ETC]
                            from et in et_join.DefaultIfEmpty()

                            // Empresa / Sede Cliente ******************************************************
                            join oc in dbContext.organization on new { a = E.v_CustomerOrganizationId }
                                    equals new { a = oc.v_OrganizationId } into oc_join
                            from oc in oc_join.DefaultIfEmpty()

                            join lc in dbContext.location on new { a = E.v_CustomerOrganizationId, b = E.v_CustomerLocationId }
                                  equals new { a = lc.v_OrganizationId, b = lc.v_LocationId } into lc_join
                            from lc in lc_join.DefaultIfEmpty()

                            //**********************************************************************************

                            join J1 in dbContext.systemuser on new { i_InsertUserId = A.i_InsertUserId.Value }
                                                            equals new { i_InsertUserId = J1.i_SystemUserId } into J1_join
                            from J1 in J1_join.DefaultIfEmpty()

                            join J2 in dbContext.systemuser on new { i_UpdateUserId = A.i_UpdateUserId.Value }
                                                            equals new { i_UpdateUserId = J2.i_SystemUserId } into J2_join
                            from J2 in J2_join.DefaultIfEmpty()
                            where A.i_IsDeleted == 0 && D.i_LineStatusId == (int)LineStatus.EnCircuito && A1.i_IsRequiredId ==1
                            select new ServiceList
                            {
                                v_ServiceComponentId = A1.v_ServiceComponentId,
                                i_ServiceComponentStatusId = A1.i_ServiceComponentStatusId,
                                v_ServiceId = A.v_ServiceId,
                                v_CalendarId = D.v_CalendarId,
                                v_ProtocolId = A.v_ProtocolId,
                                v_PersonId = A.v_PersonId,
                                i_MasterServiceId = A.i_MasterServiceId.Value,
                                v_MasterServiceName = C.v_Value1,
                                i_ServiceStatusId = A.i_ServiceStatusId.Value,
                                v_ServiceStatusName = B.v_Value1,
                                i_AptitudeStatusId = A.i_AptitudeStatusId.Value,
                                d_ServiceDate = (DateTime)A.d_ServiceDate,
                                d_GlobalExpirationDate = (DateTime)A.d_GlobalExpirationDate,
                                d_ObsExpirationDate = (DateTime)A.d_ObsExpirationDate,
                                i_FlagAgentId = A.i_FlagAgentId.Value,
                                d_DateTimeCalendar = (DateTime)D.d_DateTimeCalendar,

                                v_OrganizationName = F.v_Name,
                                v_GenderName = G.v_Name,
                                v_ServiceTypeName = H.v_Value1,
                                i_ServiceTypeId = E.i_MasterServiceTypeId.Value,
                                i_EsoTypeId = E.i_EsoTypeId.Value,
                                v_LocationId = E.v_EmployerLocationId,
                                v_LocationName = G.v_Name,
                                v_Pacient = I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_FirstName,
                                v_PacientDocument = I.v_FirstName + " " + I.v_FirstLastName + " " + I.v_SecondLastName + " " + I.v_DocNumber,
                                v_ProtocolName = E.v_Name,
                                v_CreationUser = J1.v_UserName,
                                v_UpdateUser = J2.v_UserName,
                                d_CreationDate = A.d_InsertDate,
                                d_UpdateDate = A.d_UpdateDate,
                                v_AptitudeStatusName = K.v_Value1,
                                v_DocTypeName = L.v_Value1,
                                v_DocNumber = I.v_DocNumber,
                                v_CustomerOrganizationId = E.v_CustomerOrganizationId,
                                v_CustomerLocationId = E.v_CustomerLocationId,
                                v_EsoTypeName = et.v_Value1,
                                i_StatusLiquidation = A.i_InsertUserOccupationalMedicalId,
                                v_ComponentId = A1.v_ComponentId,
                                i_IsFac = A.i_IsFac,
                                i_ServiceId = D.i_ServiceId.Value,
                                i_CategoriaId = A2.i_CategoryId,
                                v_Categoria = A3.v_Value1,
                                HoraIngreso = A1.d_StartDate,
                                HoraSalida = A1.d_EndDate
                              
                            };

                if (!string.IsNullOrEmpty(pstrFilterExpression))
                {
                    query = query.Where(pstrFilterExpression);
                }
                if (pdatBeginDate.HasValue && pdatEndDate.HasValue)
                {
                    query = query.Where("d_ServiceDate >= @0 && d_ServiceDate <= @1", pdatBeginDate.Value, pdatEndDate.Value);
                }


                List<ServiceList> objData = query.ToList();


                if (componentIds != null)
                {
                    var xx = objData.FindAll(p => componentIds.Contains(p.v_ComponentId));

                    var y = xx.GroupBy(g => new { g.i_CategoriaId, g.v_PersonId , g.v_ServiceId})
                                  .Select(s => s.First())
                                  .OrderBy(o => o.HoraSalida).ToList();


                    List<ServiceList> Resultado = new List<ServiceList>();
                    ServiceList oServiceList;
                    for (int i = 0; i < y.Count; i++)
                    {
                        oServiceList = new ServiceList();

                        oServiceList.v_Pacient = y[i].v_Pacient;
                        oServiceList.v_Categoria = y[i].v_Categoria;
                        oServiceList.d_ServiceDate = y[i].d_ServiceDate;
                        oServiceList.HoraIngreso = y[i].HoraIngreso;
                        oServiceList.HoraSalida = y[i].HoraSalida;
                        if (i == 0)
                        {
                            var x = 0;
                            oServiceList.TiempoMuerto = x;
                        }
                        else
                        {
                            if (y[i].HoraIngreso != null && y[i - 1].HoraSalida != null)
                            {
                                var x = y[i].HoraIngreso.Value - y[i - 1].HoraSalida.Value;
                                oServiceList.TiempoMuerto = x.Minutes;
                            }
                            else
                            {
                                oServiceList.TiempoMuerto = 0;
                            }
                        }

                        Resultado.Add(oServiceList);
                        
                    }

                    return Resultado;
                }
                else
                {
                     //.GroupBy(x => new { x.i_CategoryId, x.v_PersonId })
                    var y = objData.GroupBy(g => new { g.i_CategoriaId, g.v_PersonId, g.v_ServiceId })
                               .Select(s => s.First())
                               .OrderBy(o => o.HoraSalida).ToList();

                    List<ServiceList> Resultado = new List<ServiceList>();
                    ServiceList oServiceList;
                    for (int i = 0; i < y.Count; i++)
                    {
                        oServiceList = new ServiceList();

                        oServiceList.v_Pacient = y[i].v_Pacient;
                        oServiceList.v_Categoria = y[i].v_Categoria;
                        oServiceList.d_ServiceDate = y[i].d_ServiceDate;
                        oServiceList.HoraIngreso = y[i].HoraIngreso;
                        oServiceList.HoraSalida = y[i].HoraSalida;
                        if (i == 0)
                        {
                            var x = 0;
                            oServiceList.TiempoMuerto =x;
                        }
                        else
                        {
                            if (y[i].HoraIngreso != null && y[i - 1].HoraSalida != null)
                            {
                                var x = y[i].HoraIngreso.Value - y[i - 1].HoraSalida.Value;
                                oServiceList.TiempoMuerto = x.Minutes;
                            }
                            else
                            {
                                oServiceList.TiempoMuerto = 0;
                            }
                          
                        }
                      
                        

                        Resultado.Add(oServiceList);

                    }
                    return Resultado;
                }

                //List<TiempoTrabajador> objData = query.ToList();
                //return objData;
            }
            catch (Exception)
            {

                throw;
            }
        }

        // Alberto
        public List<ReportTestChoferes> GetReportTestSueño(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 from D in D_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportTestChoferes
                                 {
                                     Nombre = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaServicio = A.d_ServiceDate.Value,
                                     FechaNacimiento = B.d_Birthdate,
                                     DNI = B.v_DocNumber,
                                     Empresa = D.v_Name
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var sql = (from a in objEntity.ToList()
                           let Test = ValoresComponente(pstrserviceId, Constants.TEST_CHOFERES_ID)

                           select new ReportTestChoferes
                           {
                               Nombre = a.Nombre,
                               FechaServicio = a.FechaServicio,
                               DNI = a.DNI,
                               Empresa = a.Empresa,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               P_1 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_1_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_1_ID).v_Value1,
                               P_2 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_2_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_2_ID).v_Value1,
                               P_3 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_3_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_3_ID).v_Value1,
                               P_4 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_4_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_4_ID).v_Value1,
                               P_5 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_5_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_5_ID).v_Value1,
                               P_6 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_6_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_6_ID).v_Value1,
                               P_7 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_7_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_7_ID).v_Value1,
                               Puntaje = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_PUNTAJE_ID) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_CHOFERES_PUNTAJE_ID).v_Value1,
                               Logo = MedicalCenter.b_Image,                           
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        // Alberto
        public List<TestSomnolencia> GetReportTestSomnolencia(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId
                                 join C in dbContext.protocol on A.v_ProtocolId equals C.v_ProtocolId into C_join
                                 from C in C_join.DefaultIfEmpty()

                                 join D in dbContext.organization on C.v_CustomerOrganizationId equals D.v_OrganizationId into D_join
                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                    equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 // Usuario Medico Evaluador / Medico Aprobador ****************************
                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 from D in D_join.DefaultIfEmpty()
                                 where A.v_ServiceId == pstrserviceId
                                 select new TestSomnolencia
                                 {
                                     Nombre = B.v_FirstName + " " + B.v_FirstLastName + " " + B.v_SecondLastName,
                                     FechaServicio = A.d_ServiceDate.Value,
                                     FechaNacimiento = B.d_Birthdate,
                                     DNI = B.v_DocNumber,
                                     Empresa = D.v_Name,
                                     FirmaTrabajador = B.b_RubricImage,
                                     HuellaTrabajador = B.b_FingerPrintImage,
                                     FirmaProfesional = pme.b_SignatureImage
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
                var sql = (from a in objEntity.ToList()
                           let Test = ValoresComponente(pstrserviceId, Constants.TEST_SOMNOLENCIA_ID)

                           select new TestSomnolencia
                           {
                               Nombre = a.Nombre,
                               FechaServicio = a.FechaServicio,
                               DNI = a.DNI,
                               Empresa = a.Empresa,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               TEST_SOMNOLENCIA_SENTADO_LEYENDO = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_LEYENDO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_LEYENDO).v_Value1,
                               TEST_SOMNOLENCIA_MIRANDO_TV = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_MIRANDO_TV) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_MIRANDO_TV).v_Value1,
                               TEST_SOMNOLENCIA_SENTADO_QUIETO = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_QUIETO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_SENTADO_QUIETO).v_Value1,
                               TEST_SOMNOLENCIA_VIAJANDO = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_VIAJANDO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_VIAJANDO).v_Value1,
                               TEST_SOMNOLENCIA_CONVERSANDO = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONVERSANDO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONVERSANDO).v_Value1,
                               TEST_SOMNOLENCIA_LUEGO_COMIDA = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_LUEGO_COMIDA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_LUEGO_COMIDA).v_Value1,
                               TEST_SOMNOLENCIA_CONDUCIENDO = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONDUCIENDO) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_CONDUCIENDO).v_Value1,
                               TEST_SOMNOLENCIA_DESCANSAR = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_DESCANSAR) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_DESCANSAR).v_Value1,
                               TEST_SOMNOLENCIA_PUNTAJE = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_PUNTAJE) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_PUNTAJE).v_Value1,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               FirmaProfesional = a.FirmaProfesional,
                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,
                               Dxs = GetDiagnosticByServiceIdAndComponentAndField(pstrserviceId, pstrComponentId, Constants.TEST_SOMNOLENCIA_PUNTAJE) == null ? "Sin Somnolencia Diurna" : GetDiagnosticByServiceIdAndComponentAndField(pstrserviceId, pstrComponentId, Constants.TEST_SOMNOLENCIA_PUNTAJE),
                               Conclusiones = GetRecommendationByServiceIdAndComponentAndField(pstrserviceId, pstrComponentId, Constants.TEST_SOMNOLENCIA_PUNTAJE) == null ? "------" : GetRecommendationByServiceIdAndComponentAndField(pstrserviceId, pstrComponentId, Constants.TEST_SOMNOLENCIA_PUNTAJE)
                           }).ToList();

                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }


        public string GetDiagnosticByServiceIdAndComponentAndField(string pstrServiceId, string pstrComponent, string pstrFieldId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.diagnosticrepository
                         join ddd in dbContext.diseases on ccc.v_DiseasesId equals ddd.v_DiseasesId into ddd_join
                         from ddd in ddd_join.DefaultIfEmpty()

                         join eee in dbContext.recommendation on new { a = pstrServiceId, b = pstrComponent }
                                                                    equals new { a = eee.v_ServiceId, b = eee.v_ComponentId } into eee_join
                         from eee in eee_join.DefaultIfEmpty()

                         join fff in dbContext.masterrecommendationrestricction on eee.v_MasterRecommendationId
                                                                equals fff.v_MasterRecommendationRestricctionId into fff_join
                         from fff in fff_join.DefaultIfEmpty()

                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0 && ccc.v_ComponentFieldId == pstrFieldId
                         select new
                         {
                             v_DiseasesName = ddd.v_Name
                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_DiseasesName));
        }


        private string GetRecommendationByServiceIdAndComponentAndField(string pstrServiceId, string pstrComponent, string pstrFieldId)
        {
            SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
            var query = (from ccc in dbContext.recommendation
                         join ddd in dbContext.masterrecommendationrestricction on ccc.v_MasterRecommendationId equals ddd.v_MasterRecommendationRestricctionId  // Diagnosticos      
                         join eee in dbContext.diagnosticrepository on ccc.v_DiagnosticRepositoryId equals eee.v_DiagnosticRepositoryId
                         where ccc.v_ServiceId == pstrServiceId && ccc.v_ComponentId == pstrComponent &&
                               ccc.i_IsDeleted == 0 && eee.v_ComponentFieldId == Constants.TEST_SOMNOLENCIA_PUNTAJE
                         select new
                         {
                             v_Recommendation = ddd.v_Name

                         }).ToList();


            return string.Join(", ", query.Select(p => p.v_Recommendation));
        }
        
        // Alberto
        public List<ReportTestSintomaticoResp> GetReportTestSintomaticoResp(string pstrserviceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                var groupUbigeo = 113;
                var objEntity = (from A in dbContext.service
                                 join B in dbContext.person on A.v_PersonId equals B.v_PersonId



                                 join E in dbContext.servicecomponent on new { a = pstrserviceId, b = pstrComponentId }
                                                                       equals new { a = E.v_ServiceId, b = E.v_ComponentId }

                                 join me in dbContext.systemuser on E.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()

                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()

                                 join H in dbContext.person on me.v_PersonId equals H.v_PersonId into H_join
                                 from H in H_join.DefaultIfEmpty()


                                 // Ubigeo de la persona *******************************************************
                                 join dep in dbContext.datahierarchy on new { a = B.i_DepartmentId.Value, b = groupUbigeo }
                                                      equals new { a = dep.i_ItemId, b = dep.i_GroupId } into dep_join
                                 from dep in dep_join.DefaultIfEmpty()

                                 join prov in dbContext.datahierarchy on new { a = B.i_ProvinceId.Value, b = groupUbigeo }
                                                       equals new { a = prov.i_ItemId, b = prov.i_GroupId } into prov_join
                                 from prov in prov_join.DefaultIfEmpty()

                                 join distri in dbContext.datahierarchy on new { a = B.i_DistrictId.Value, b = groupUbigeo }
                                                       equals new { a = distri.i_ItemId, b = distri.i_GroupId } into distri_join
                                 from distri in distri_join.DefaultIfEmpty()
                                 //*********************************************************************************************

                                 let varDpto = dep.v_Value1 == null ? "" : dep.v_Value1
                                 let varProv = prov.v_Value1 == null ? "" : prov.v_Value1
                                 let varDistri = distri.v_Value1 == null ? "" : distri.v_Value1

                                 where A.v_ServiceId == pstrserviceId
                                 select new ReportTestSintomaticoResp
                                 {
                                     Nombres = B.v_FirstName ,
                                     Apellidos =  B.v_FirstLastName + " " + B.v_SecondLastName,
                                     DNI= B.v_DocNumber,
                                     FechaNacimiento = B.d_Birthdate.Value,
                                     Genero = B.i_SexTypeId,
                                     Direccion = B.v_AdressLocation,
                                     Huella = B.b_FingerPrintImage,
                                     Firma = B.b_RubricImage,
                                     ApeMedico = H.v_FirstLastName + " " + H.v_SecondLastName,
                                     NomMedico = H.v_FirstName,
                                     DireMedico = H.v_AdressLocation,
                                     CMP = pme.v_ProfessionalCode,
                                     FechaServicio = A.d_ServiceDate.Value,
                                     //FirmaMedico = pme.b_SignatureImage,
                                     LugarProcedencia = varDistri + "-" + varProv + "-" + varDpto, // Santa Anita - Lima - Lima
                                   
                                 });

                var MedicalCenter = GetInfoMedicalCenter();
               
                var sql = (from a in objEntity.ToList()
                           let Test = ValoresComponente(pstrserviceId, Constants.TEST_SINTOMATICO_RESP_ID)
                           let rx = ValoresComponente(pstrserviceId, Constants.RX_TORAX_ID)
                           let Lab = ValoresComponente(pstrserviceId, Constants.BK_DIRECTO_ID)
                           let FirmaMedicoMedicina = ObtenerFirmaMedicoExamen(pstrserviceId, Constants.EXAMEN_FISICO_ID, Constants.EXAMEN_FISICO_7C_ID)
                           select new ReportTestSintomaticoResp
                           {
                               Nombres = a.Nombres,
                               Apellidos = a.Apellidos,
                               DNI = a.DNI,
                               FechaNacimiento = a.FechaNacimiento,
                               Genero = a.Genero,
                               Direccion = a.Direccion,
                               Huella = a.Huella,
                               Firma = a.Firma,
                               ApeMedico = a.ApeMedico,
                               NomMedico = a.NomMedico,
                               DireMedico = a.DireMedico,
                               CMP = a.CMP,
                               FechaServicio = a.FechaServicio,
                               FirmaMedico = FirmaMedicoMedicina,
                               Edad = GetAge(a.FechaNacimiento),
                               LugarProcedencia = a.LugarProcedencia,
                               b_Logo = MedicalCenter.b_Image,
                               EmpresaPropietaria = MedicalCenter.v_Name,
                               EmpresaPropietariaDireccion = MedicalCenter.v_Address,
                               EmpresaPropietariaTelefono = MedicalCenter.v_PhoneNumber,
                               EmpresaPropietariaEmail = MedicalCenter.v_Mail,

                               TEST_SINTOMATICO_P1 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P1) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P1).v_Value1,
                               TEST_SINTOMATICO_P2 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P2) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P2).v_Value1,
                               TEST_SINTOMATICO_P3 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P3) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P3).v_Value1,
                               TEST_SINTOMATICO_P4 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P4) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P4).v_Value1,
                               TEST_SINTOMATICO_P5 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P5) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P5).v_Value1,
                               TEST_SINTOMATICO_P6 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P6) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P6).v_Value1,
                               TEST_SINTOMATICO_P7 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P7) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P7).v_Value1,                           
                               TEST_SINTOMATICO_P8 = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P8) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_P8).v_Value1,
                               TEST_SINTOMATICO_Obs = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_Obs) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_Obs).v_Value1,
                               
                               TEST_SINTOMATICO_EL_LA = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_EL_LA) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_EL_LA).v_Value1,
                               TEST_SINTOMATICO_REQ_EST_AMP = Test.Count == 0 || Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_REQ_EST_AMP) == null ? string.Empty : Test.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_REQ_EST_AMP).v_Value1,
                               TEST_SINTOMATICO_BK_ESPUTO = Lab.Count == 0 || Lab.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_BK_ESPUTO) == null ? string.Empty : Lab.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_BK_ESPUTO).v_Value1,
                               TEST_SINTOMATICO_BK_ESPUTO_2 = Lab.Count == 0 || Lab.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_BK_ESPUTO_2) == null ? string.Empty : Lab.Find(p => p.v_ComponentFieldId == Constants.TEST_SINTOMATICO_BK_ESPUTO_2).v_Value1,

                               TEST_SINTOMATICO_RX = rx.Count == 0 || rx.Find(p => p.v_ComponentFieldId == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID) == null ? string.Empty : rx.Find(p => p.v_ComponentFieldId == Constants.RX_CONCLUSIONES_RADIOGRAFICAS_DESCRIPCION_ID).v_Value1,
                           }).ToList();


                return sql;
            }
            catch (Exception)
            {

                throw;
            }
        }

        public void ActualizarFechaEntregaServicio(string pstrServiceId, DateTime? pFechaEntrega)
        {
            try
            {

                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                // Obtener la entidad fuente
                var objEntitySource = (from a in dbContext.service
                                       where a.v_ServiceId == pstrServiceId
                                       select a).FirstOrDefault();

                //objEntitySource.d_FechaEntrega = pFechaEntrega;

                // Guardar los cambios
                dbContext.SaveChanges();

                return;

            }
            catch (Exception ex)
            {

                // Llenar entidad Log
                return;
            }


        }

        //AMC
        public IEnumerable<ListaExamenes> DevolverExamenesPorProtocolo(string pstrEmpresaId, string pstrSedeId, string pstrProtocoloId, DateTime? Fechainicio, DateTime? FechaFin)
        {
            try
            {
                //SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();
                //ListaExamenes oListaExamenes = new ListaExamenes();
                //List<ListaExamenes> ListListaExamenes = new List<ListaExamenes>();

                //var query = dbContext.consolidadoexamenes("", pstrEmpresaId, pstrSedeId, pstrProtocoloId, Fechainicio, FechaFin, -1).ToList();

                //var CantidadPacientes = query.GroupBy(x => new { x.T_Paciente, x.T_Id_Servicio })
                //                               .Select(group => group.First())
                //                               .ToList();


                //for (int i = 0; i < CantidadPacientes.Count; i++)
                //{
                //    oListaExamenes = new ListaExamenes();

                //    oListaExamenes.Paciente = CantidadPacientes[i].T_Paciente;
                //    oListaExamenes.ServiceId = CantidadPacientes[i].T_Id_Servicio;
                //    oListaExamenes.FechaServicio = CantidadPacientes[i].T_FechaServicio;

                //    oListaExamenes.AcidoUrico_N009_ME000000086 = query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000086" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.AglutinacionesLamina_N009_ME000000025 = query.Find(p => p.T_Id_Componente == "N009-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.AntigenoProstatico_N009_ME000000009 = query.Find(p => p.T_Id_Componente == "N009-ME000000009" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000009" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Bioquimica3_N009_ME000000088 = query.Find(p => p.T_Id_Componente == "N009-ME000000088" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000088" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Bioquimica2_N009_ME000000087 = query.Find(p => p.T_Id_Componente == "N009-ME000000087" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009_ME000000087" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.BkDirecto_N009_ME000000081 = query.Find(p => p.T_Id_Componente == "N009-ME000000081" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000081" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.BkEsputo_N002_ME000000030 = query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ColesterolHDL_N009_ME000000074 = query.Find(p => p.T_Id_Componente == "N009-ME000000074" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000074" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ColesterolLDL_N002_ME000000011 = query.Find(p => p.T_Id_Componente == "N002-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000011" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ColesterolLDL_N009_ME000000075 = query.Find(p => p.T_Id_Componente == "N009-ME000000075" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000075" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();

                //    oListaExamenes.ColesterolTotal_N009_ME000000016 = query.Find(p => p.T_Id_Componente == "N009-ME000000016" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000016" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ColesterolVLDL_N009_ME000000076 = query.Find(p => p.T_Id_Componente == "N009-ME000000076" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000076" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.CoprocultivoSalmonela_N002_ME000000018 = query.Find(p => p.T_Id_Componente == "N002-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Creatina_N009_ME000000028 = query.Find(p => p.T_Id_Componente == "N009-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenCompletoOrina_N002_ME000000014 = query.Find(p => p.T_Id_Componente == "N002-ME000000014" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000014" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenCompletoOrina_N009_ME000000046 = query.Find(p => p.T_Id_Componente == "N009-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VHI_N009_ME000000030 = query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000030" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Fecatest_N009_ME000000097 = query.Find(p => p.T_Id_Componente == "N009-ME000000097" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000097" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Glucosa_N009_ME000000008 = query.Find(p => p.T_Id_Componente == "N009-ME000000008" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000008" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.GrupoFactorSanguineo_N009_ME000000000 = query.Find(p => p.T_Id_Componente == "N009-ME000000000" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000000" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.HAVIGM_N009_ME000000004 = query.Find(p => p.T_Id_Componente == "N009-ME000000004" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000004" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Hematocrito_N009_ME000000001 = query.Find(p => p.T_Id_Componente == "N009-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Hemoglobina_N009_ME000000006 = query.Find(p => p.T_Id_Componente == "N009-ME000000006" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000006" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.HemogramaCompleto_N009_ME000000045 = query.Find(p => p.T_Id_Componente == "N009-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.HisopadoFaringeo_N009_ME000000095 = query.Find(p => p.T_Id_Componente == "N009-ME000000095" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000095" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.InmunoEnzima_N009_ME000000005 = query.Find(p => p.T_Id_Componente == "N009-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ParasitologicoSeriado_N009_ME000000049 = query.Find(p => p.T_Id_Componente == "N009-ME000000049" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000049" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ParasitologicoSimple_N009_ME000000010 = query.Find(p => p.T_Id_Componente == "N009-ME000000010" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000010" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.PerfilHepatico_N009_ME000000096 = query.Find(p => p.T_Id_Componente == "N009-ME000000096" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000096" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.PlomoSangre_N009_ME000000060 = query.Find(p => p.T_Id_Componente == "N009-ME000000060" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000060" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.SeriologiaLues_N002_ME000000013 = query.Find(p => p.T_Id_Componente == "N002-ME000000013" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000013" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.SubUniBetaCualitativo_N009_ME000000027 = query.Find(p => p.T_Id_Componente == "N009-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TGO_N009_ME000000054 = query.Find(p => p.T_Id_Componente == "N009-ME000000054" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000054" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TGP_N009_ME000000055 = query.Find(p => p.T_Id_Componente == "N009-ME000000055" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000055" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TIFICOH_N009_ME000000080 = query.Find(p => p.T_Id_Componente == "N009-ME000000080" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000080" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TIFICOO_N009_ME000000079 = query.Find(p => p.T_Id_Componente == "N009-ME000000079" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000079" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ToxicologicoAlcoholemia_N009_ME000000041 = query.Find(p => p.T_Id_Componente == "N009-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000041" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ToxicologicoAnfetaminas_N009_ME000000043 = query.Find(p => p.T_Id_Componente == "N009-ME000000043" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000043" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ToxicologicoBenzodiazepinas_N009_ME000000040 = query.Find(p => p.T_Id_Componente == "N009-ME000000040" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000040" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ToxicologicoCarboxihemoglobina_N002_ME000000042 = query.Find(p => p.T_Id_Componente == "N002-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.ToxicologicoColinesterasa_N009_ME000000042 = query.Find(p => p.T_Id_Componente == "N009-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000042" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ToxicologicoCocainaMarihuana_N009_ME000000053 = query.Find(p => p.T_Id_Componente == "N009-ME000000053" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000053" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Trigliceridos_N002_ME000000012 = query.Find(p => p.T_Id_Componente == "N002-ME000000012" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000012" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Trigliceridos_N009_ME000000017 = query.Find(p => p.T_Id_Componente == "N009-ME000000017" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000017" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Urea_N009_ME000000073 = query.Find(p => p.T_Id_Componente == "N009-ME000000073" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000073" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VDRL_N009_ME000000003 = query.Find(p => p.T_Id_Componente == "N009-ME000000003" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000003" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Odontograma_N002_ME000000027 = query.Find(p => p.T_Id_Componente == "N002-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000027" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Electrocardiograma_N002_ME000000025 = query.Find(p => p.T_Id_Componente == "N002-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000025" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.PruebaEsfuerzo_N002_ME000000029 = query.Find(p => p.T_Id_Componente == "N002-ME000000029" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000029" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.EvaCardiologica_N009_ME000000092 = query.Find(p => p.T_Id_Componente == "N009-ME000000092" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000092" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.RadiografiaTorax_N002_ME000000032 = query.Find(p => p.T_Id_Componente == "N002-ME000000032" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000032" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.EcografiaRenal_N009_ME000000019 = query.Find(p => p.T_Id_Componente == "N009-ME000000019" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000019" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.EcografiaProstata_N009_ME000000020 = query.Find(p => p.T_Id_Componente == "N009-ME000000020" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000020" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.EcografiaAbdominal_N009_ME000000051 = query.Find(p => p.T_Id_Componente == "N009-ME000000051" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000051" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.RadiografiaOIT_N009_ME000000062 = query.Find(p => p.T_Id_Componente == "N009-ME000000062" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000062" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.InformePsicologico_N002_ME000000033 = query.Find(p => p.T_Id_Componente == "N002-ME000000033" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000033" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.FuncionesVitales_N002_ME000000001 = query.Find(p => p.T_Id_Componente == "N002-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000001" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Antropometria_N002_ME000000002 = query.Find(p => p.T_Id_Componente == "N002-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000002" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenFisico_N002_ME000000022 = query.Find(p => p.T_Id_Componente == "N002-ME000000022" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000022" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenAlturaGeografica_N002_ME000000045 = query.Find(p => p.T_Id_Componente == "N002-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000045" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.ExamenOsteomuscular_N002_ME000000046 = query.Find(p => p.T_Id_Componente == "N002-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000046" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenAlturaEstructural_N009_ME000000015 = query.Find(p => p.T_Id_Componente == "N009-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000015" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.CuestionarioActividadFisica_N009_ME000000018 = query.Find(p => p.T_Id_Componente == "N009-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000018" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TamizajeDermatologico_N009_ME000000044 = query.Find(p => p.T_Id_Componente == "N009-ME000000044" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000044" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenFisico7C_N009_ME000000052 = query.Find(p => p.T_Id_Componente == "N009-ME000000052" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000052" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.ExamenOsteomuscular2_N009_ME000000084 = query.Find(p => p.T_Id_Componente == "N009-ME000000084" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000084" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.EvaluacionNeurologica_N009_ME000000085 = query.Find(p => p.T_Id_Componente == "N009-ME000000085" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000085" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.CuestionarioNordicoOsteomuscular_N009_ME000000089 = query.Find(p => p.T_Id_Componente == "N009-ME000000089" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000089" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.TestVertigo_N009_ME000000090 = query.Find(p => p.T_Id_Componente == "N009-ME000000090" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000090" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.OsteoMuscular_N009_ME000000091 = query.Find(p => p.T_Id_Componente == "N009-ME000000091" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000091" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.VacunaFiebreAmarilla_N009_ME000000063 = query.Find(p => p.T_Id_Componente == "N009-ME000000063" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000063" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaInfluencia_N009_ME000000064 = query.Find(p => p.T_Id_Componente == "N009-ME000000064" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000064" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaDifteria_N009_ME000000065 = query.Find(p => p.T_Id_Componente == "N009-ME000000065" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000065" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaHepatitisA_N009_ME000000066 = query.Find(p => p.T_Id_Componente == "N009-ME000000066" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000066" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaHepatitisB_N009_ME000000067 = query.Find(p => p.T_Id_Componente == "N009-ME000000067" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000067" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaAntirrabica_N009_ME000000068 = query.Find(p => p.T_Id_Componente == "N009-ME000000068" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000068" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.InfluenzaA1H1N1_N009_ME000000069 = query.Find(p => p.T_Id_Componente == "N009-ME000000069" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000069" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaTriple_N009_ME000000070 = query.Find(p => p.T_Id_Componente == "N009-ME000000070" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000070" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.VacunaVaricela_N009_ME000000071 = query.Find(p => p.T_Id_Componente == "N009-ME000000071" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000071" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Oftalmolgia_N002_ME000000028 = query.Find(p => p.T_Id_Componente == "N002-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000028" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                //    oListaExamenes.TestOjoSeco_N009_ME000000083 = query.Find(p => p.T_Id_Componente == "N009-ME000000083" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000083" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Petrinovic_N009_ME000000098 = query.Find(p => p.T_Id_Componente == "N009-ME000000098" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000098" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Audiometria_N002_ME000000005 = query.Find(p => p.T_Id_Componente == "N002-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000005" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Espirometria_N002_ME000000031 = query.Find(p => p.T_Id_Componente == "N002-ME000000031" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N002-ME000000031" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();
                //    oListaExamenes.Electroencefalograma_N009_ME000000099 = query.Find(p => p.T_Id_Componente == "N009-ME000000099" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio) == null ? "NO REALIZADO" : query.Find(p => p.T_Id_Componente == "N009-ME000000099" && p.T_Id_Servicio == CantidadPacientes[i].T_Id_Servicio).T_REALIZADO.ToString();


                    //ListListaExamenes.Add(oListaExamenes);
                //}





                //return ListListaExamenes;
            return null;
            }
            catch (Exception)
            {
                throw;
            }
        }

        public List<Categoria> GetAllComponents(ref OperationResult pobjOperationResult)
        {

            int isDeleted = (int)SiNo.NO;

            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();


                //var query = (from A in dbContext.component                           
                //             join C in dbContext.component on A.v_ComponentId equals C.v_ComponentId                            
                //             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                //                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                //             from F in F_join.DefaultIfEmpty()

                //             where                                
                //                   A.i_IsDeleted == isDeleted

                //             select new Categoria
                //             {
                //                 v_ComponentId = A.v_ComponentId,
                //                 v_ComponentName = C.v_Name,                                
                //                 i_CategoryId = C.i_CategoryId,
                //                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1

                //             }).ToList();

                var query = (from C in dbContext.component
                             join F in dbContext.systemparameter on new { a = C.i_CategoryId.Value, b = 116 }
                                      equals new { a = F.i_ParameterId, b = F.i_GroupId } into F_join
                             from F in F_join.DefaultIfEmpty()

                             where C.i_IsDeleted == isDeleted


                             select new Categoria
                             {
                                 v_ComponentId = C.v_ComponentId,
                                 v_ComponentName = C.v_Name,
                                 //i_ServiceComponentStatusId = A.i_ServiceComponentStatusId.Value,
                                 //v_ServiceComponentStatusName = B.v_Value1,
                                 //d_StartDate = A.d_StartDate.Value,
                                 //d_EndDate = A.d_EndDate.Value,
                                 //i_QueueStatusId = A.i_QueueStatusId.Value,
                                 //v_QueueStatusName = D.v_Value1,
                                 //ServiceStatusId = E.i_ServiceStatusId.Value,
                                 //v_Motive = E.v_Motive,
                                 i_CategoryId = C.i_CategoryId,
                                 v_CategoryName = C.i_CategoryId.Value == -1 ? C.v_Name : F.v_Value1,
                                 //v_ServiceId = E.v_ServiceId,
                                 //v_ServiceComponentId = A.v_ServiceComponentId,
                             });




                var objData = query.AsEnumerable()
                           .Where(s => s.i_CategoryId != -1)
                           .GroupBy(x => x.i_CategoryId)
                           .Select(group => group.First());


                List<Categoria> obj = objData.ToList();

                Categoria objCategoriaList;
                List<Categoria> Lista = new List<Categoria>();

                //int CategoriaId_Old = 0;
                for (int i = 0; i < obj.Count(); i++)
                {
                    objCategoriaList = new Categoria();

                    objCategoriaList.i_CategoryId = obj[i].i_CategoryId.Value;
                    objCategoriaList.v_CategoryName = obj[i].v_CategoryName;
                    var x = query.ToList().FindAll(p => p.i_CategoryId == obj[i].i_CategoryId.Value);

                    x.Sort((z, y) => z.v_ComponentName.CompareTo(y.v_ComponentName));
                    ComponentDetailList objComponentDetailList;
                    List<ComponentDetailList> ListaComponentes = new List<ComponentDetailList>();
                    foreach (var item in x)
                    {
                        objComponentDetailList = new ComponentDetailList();

                        objComponentDetailList.v_ComponentId = item.v_ComponentId;
                        objComponentDetailList.v_ComponentName = item.v_ComponentName;
                        //objComponentDetailList.v_ServiceComponentId = item.v_ServiceComponentId;
                        ListaComponentes.Add(objComponentDetailList);
                    }
                    objCategoriaList.Componentes = ListaComponentes;

                    Lista.Add(objCategoriaList);

                }



                pobjOperationResult.Success = 1;
                return Lista;
            }
            catch (Exception ex)
            {
                pobjOperationResult.Success = 0;
                pobjOperationResult.ExceptionMessage = Common.Utils.ExceptionFormatter(ex);
                return null;
            }
        }

        public List<ReporteApnea> ReporteApnea(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var servicios = (from ser in dbContext.service
                                 join serCom in dbContext.servicecomponent on ser.v_ServiceId equals serCom.v_ServiceId
                                 join per in dbContext.person on ser.v_PersonId equals per.v_PersonId
                                 join doc in dbContext.datahierarchy on new { a = per.i_DocTypeId.Value, b = 106 } equals new { a = doc.i_ItemId, b = doc.i_GroupId } into doc_join
                                 from doc in doc_join.DefaultIfEmpty()
                                 join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId
                                 join empCli in dbContext.organization on prot.v_CustomerOrganizationId equals empCli.v_OrganizationId
                                 join empTrab in dbContext.organization on prot.v_WorkingOrganizationId equals empTrab.v_OrganizationId
                                 join empEmp in dbContext.organization on prot.v_EmployerOrganizationId equals empEmp.v_OrganizationId
                                 join gen in dbContext.systemparameter on new { a = per.i_DocTypeId.Value, b = 100 } equals new { a = gen.i_ParameterId, b = gen.i_GroupId } into gen_join
                                 from gen in gen_join.DefaultIfEmpty()
                                 join me in dbContext.systemuser on serCom.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()
                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where ser.v_ServiceId == pstrServiceId
                                 select new ReporteApnea
                                 {
                                     ServiceId = ser.v_ServiceId,
                                     ServiceComponentId = serCom.v_ServiceComponentId,
                                     FechaServicio = ser.d_ServiceDate.Value,
                                     Nombres = per.v_FirstName,
                                     ApellidoPaterno = per.v_FirstLastName,
                                     ApellidoMaterno = per.v_SecondLastName,
                                     NombreCompleto = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                     FechaNacimiento = per.d_Birthdate.Value,
                                     //Edad = "",
                                     TipoDocumentoId = per.i_DocTypeId.Value,
                                     TipoDocumento = doc.v_Value1,
                                     NroDocumento = per.v_DocNumber,
                                     EmpresaCliente = empCli.v_Name,
                                     EmpresaTrabajo = empTrab.v_Name,
                                     EmpresaEmpleadora = empEmp.v_Name,
                                     Puesto = per.v_CurrentOccupation,
                                     GeneroId = per.i_SexTypeId.Value,
                                     Genero = gen.v_Value1,
                                     FirmaTrabajador = per.b_RubricImage,
                                     HuellaTrabajador = per.b_FingerPrintImage,
                                     FirmaUsuarioGraba = pme.b_SignatureImage,
                                 }).ToList();

                var valor = ValoresComponente(pstrServiceId, pstrComponentId).ToList();
                var sql = (from a in servicios.ToList()
                            select new ReporteApnea
                            {
                                ServiceId = a.ServiceId,
                                ServiceComponentId = a.ServiceComponentId,
                                FechaServicio = a.FechaServicio,
                                Nombres = a.Nombres,
                                ApellidoPaterno = a.ApellidoPaterno,
                                ApellidoMaterno = a.ApellidoMaterno,
                                NombreCompleto = a.NombreCompleto,
                                FechaNacimiento = a.FechaNacimiento,
                                Edad = GetAge(a.FechaNacimiento.Value),
                                TipoDocumentoId = a.TipoDocumentoId,
                                TipoDocumento = a.TipoDocumento,
                                NroDocumento = a.NroDocumento,
                                EmpresaCliente = a.EmpresaCliente,
                                EmpresaTrabajo = a.EmpresaTrabajo,
                                EmpresaEmpleadora = a.EmpresaEmpleadora,
                                Puesto = a.Puesto,
                                GeneroId = a.GeneroId,
                                Genero = a.Genero,
                                FirmaTrabajador = a.FirmaTrabajador,
                                HuellaTrabajador = a.HuellaTrabajador,
                                FirmaUsuarioGraba = a.FirmaUsuarioGraba,

                                TrabajaDeNoche1 = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001618") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001618").v_Value1,
                                DiasDeTrabajo2 = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001619") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001619").v_Value1,
                                DiasDeDescanso3 = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001620") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001620").v_Value1,
                                Hta1 = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001621") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001621").v_Value1,
                                MedicacionRiesgo2= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001622") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001622").v_Value1,
                                PolisomnografiaRealizada3= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001623") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001623").v_Value1,
                                RptaSiFecha4= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001624") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001624").v_Value1,
                                AntChoqueEnMina5= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001625") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001625").v_Value1,
                                AntChoqueFuera6= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001626") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001626").v_Value1,
                                SentadoLeyendo1= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001627") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001627").v_Value1,
                                MirandoLaTelevision2= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001628") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001628").v_Value1,
                                
                                SentadoEnUnLugarPublico3= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001629") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001629").v_Value1,
                                ComoPasajeroDeAutoMicro4= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001630") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001630").v_Value1,
                                RecostadoEnLaTarde5= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001631") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001631").v_Value1,
                                SentadoYHablando6= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001632") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001632").v_Value1,
                                SentadoDepuesDeAlmorzar7= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001633") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001633").v_Value1,
                                ManejandoElAutoCuando8= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001634") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001634").v_Value1,
                                PuntajeTotal= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001635") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001635").v_Value1,
                                RoncaAiDormir1= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001636") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001636").v_Value1,
                                HaceRuidosAlRespirar2= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001637") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001637").v_Value1,
                                DejaDeRespirarDuerme3= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001638") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001638").v_Value1,
                                
                                ComparadoConSusCompa4= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001639") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001639").v_Value1,
                                AccidenteCabeceo5= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001640") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001640").v_Value1,
                                AccidenteFallaHumana6= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001641") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001641").v_Value1,
                                EstaRecibiendoTratamiento7= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001642") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001642").v_Value1,
                                SeLeHaRealzadoUnaPsg8= valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-MF000001643") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-MF000001643").v_Value1,
                            }).ToList();

                return sql;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        public List<ReporteCuestionarioNordico> ReporteCuestionarioNordico(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var servicios = (from ser in dbContext.service
                                 join serCom in dbContext.servicecomponent on ser.v_ServiceId equals serCom.v_ServiceId
                                 join per in dbContext.person on ser.v_PersonId equals per.v_PersonId
                                 join doc in dbContext.datahierarchy on new { a = per.i_DocTypeId.Value, b = 106 } equals new { a = doc.i_ItemId, b = doc.i_GroupId } into doc_join
                                 from doc in doc_join.DefaultIfEmpty()
                                 join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId
                                 join empCli in dbContext.organization on prot.v_CustomerOrganizationId equals empCli.v_OrganizationId
                                 join empTrab in dbContext.organization on prot.v_WorkingOrganizationId equals empTrab.v_OrganizationId
                                 join empEmp in dbContext.organization on prot.v_EmployerOrganizationId equals empEmp.v_OrganizationId
                                 join gen in dbContext.systemparameter on new { a = per.i_DocTypeId.Value, b = 100 } equals new { a = gen.i_ParameterId, b = gen.i_GroupId } into gen_join
                                 from gen in gen_join.DefaultIfEmpty()
                                 join me in dbContext.systemuser on serCom.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()
                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where ser.v_ServiceId == pstrServiceId
                                 select new ReporteCuestionarioNordico
                                 {
                                     ServiceId = ser.v_ServiceId,
                                     ServiceComponentId = serCom.v_ServiceComponentId,
                                     FechaServicio = ser.d_ServiceDate.Value,
                                     Nombres = per.v_FirstName,
                                     ApellidoPaterno = per.v_FirstLastName,
                                     ApellidoMaterno = per.v_SecondLastName,
                                     NombreCompleto = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                     FechaNacimiento = per.d_Birthdate.Value,
                                     //Edad = "",
                                     TipoDocumentoId = per.i_DocTypeId.Value,
                                     TipoDocumento = doc.v_Value1,
                                     NroDocumento = per.v_DocNumber,
                                     EmpresaCliente = empCli.v_Name,
                                     EmpresaTrabajo = empTrab.v_Name,
                                     EmpresaEmpleadora = empEmp.v_Name,
                                     Puesto = per.v_CurrentOccupation,
                                     GeneroId = per.i_SexTypeId.Value,
                                     Genero = gen.v_Value1,
                                     FirmaTrabajador = per.b_RubricImage,
                                     HuellaTrabajador = per.b_FingerPrintImage,
                                     FirmaUsuarioGraba = pme.b_SignatureImage,
                                 }).ToList();

                var valor = ValoresComponentesUserControl(pstrServiceId, pstrComponentId).ToList();
                var sql = (from a in servicios.ToList()
                           select new ReporteCuestionarioNordico
                           {
                               ServiceId = a.ServiceId,
                               ServiceComponentId = a.ServiceComponentId,
                               FechaServicio = a.FechaServicio,
                               Nombres = a.Nombres,
                               ApellidoPaterno = a.ApellidoPaterno,
                               ApellidoMaterno = a.ApellidoMaterno,
                               NombreCompleto = a.NombreCompleto,
                               FechaNacimiento = a.FechaNacimiento,
                               Edad = GetAge(a.FechaNacimiento.Value),
                               TipoDocumentoId = a.TipoDocumentoId,
                               TipoDocumento = a.TipoDocumento,
                               NroDocumento = a.NroDocumento,
                               EmpresaCliente = a.EmpresaCliente,
                               EmpresaTrabajo = a.EmpresaTrabajo,
                               EmpresaEmpleadora = a.EmpresaEmpleadora,
                               Puesto = a.Puesto,
                               GeneroId = a.GeneroId,
                               Genero = a.Genero,
                               FirmaTrabajador = a.FirmaTrabajador,
                               HuellaTrabajador = a.HuellaTrabajador,
                               FirmaUsuarioGraba = a.FirmaUsuarioGraba,
                               Cbo1Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000001") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000001").v_Value1,
                               Cbo1Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000002") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000002").v_Value1,
                               Cbo1Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000003") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000003").v_Value1,
                               Cbo1Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000004") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000004").v_Value1,
                               Cbo1Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000005") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000005").v_Value1,
                               Cbo1HombroDir = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000006") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000006").v_Value1,
                               Cbo1CodoDir = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000007") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000007").v_Value1,
                               Cbo1ManoDir = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000008") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000008").v_Value1,

                               Txt2Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000009") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000009").v_Value1,
                               Txt2Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000010") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000010").v_Value1,
                               Txt2Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000011") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000011").v_Value1,
                               Txt2Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000012") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000012").v_Value1,
                               Txt2Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000013") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000013").v_Value1,
                               Cbo3Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000014") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000014").v_Value1,
                               Cbo3Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000015") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000015").v_Value1,
                               Cbo3Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000016") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000016").v_Value1,
                               Cbo3Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000017") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000017").v_Value1,
                               Cbo3Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000018") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000018").v_Value1,

                               Cbo4Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000019") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000019").v_Value1,
                               Cbo4Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000020") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000020").v_Value1,
                               Cbo4Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000021") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000021").v_Value1,
                               Cbo4Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000022") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000022").v_Value1,
                               Cbo4Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000023") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000023").v_Value1,
                               Cbo5Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000024") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000024").v_Value1,
                               Cbo5Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000025") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000025").v_Value1,
                               Cbo5Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000026") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000026").v_Value1,
                               Cbo5Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000027") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000027").v_Value1,
                               Cbo5Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000028") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000028").v_Value1,

                               Cbo6Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000029") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000029").v_Value1,
                               Cbo6Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000030") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000030").v_Value1,
                               Cbo6Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000031") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000031").v_Value1,
                               Cbo6Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000032") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000032").v_Value1,
                               Cbo6Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000033") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000033").v_Value1,
                               Cbo7Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000034") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000034").v_Value1,
                               Cbo7Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000035") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000035").v_Value1,
                               Cbo7Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000036") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000036").v_Value1,
                               Cbo7Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000037") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000037").v_Value1,
                               Cbo7Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000038") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000038").v_Value1,

                               Cbo8Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000039") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000039").v_Value1,
                               Cbo8Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000040") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000040").v_Value1,
                               Cbo8Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000041") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000041").v_Value1,
                               Cbo8Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000042") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000042").v_Value1,
                               Cbo8Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000043") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000043").v_Value1,
                               Cbo9Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000044") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000044").v_Value1,
                               Cbo9Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000045") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000045").v_Value1,
                               Cbo9Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000046") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000046").v_Value1,
                               Cbo9Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000047") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000047").v_Value1,
                               Cbo9Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000048") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000048").v_Value1,

                               Cbo10Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000049") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000049").v_Value1,
                               Cbo10Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000050") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000050").v_Value1,
                               Cbo10Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000051") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000051").v_Value1,
                               Cbo10Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000052") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000052").v_Value1,
                               Cbo10Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000053") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000053").v_Value1,
                               Txt11Cuello = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000054") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000054").v_Value1,
                               Txt11Hombro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000055") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000055").v_Value1,
                               Txt11Dorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000056") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000056").v_Value1,
                               Txt11Codo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000057") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000057").v_Value1,
                               Txt11Mano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000058") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-CSN00000058").v_Value1,
                         
                           }).ToList();

                return sql;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

        public List<ReporteUcOsteoMuscular> ReporteUcOSteoMuscular(string pstrServiceId, string pstrComponentId)
        {
            try
            {
                SigesoftEntitiesModel dbContext = new SigesoftEntitiesModel();

                var servicios = (from ser in dbContext.service
                                 join serCom in dbContext.servicecomponent on ser.v_ServiceId equals serCom.v_ServiceId
                                 join per in dbContext.person on ser.v_PersonId equals per.v_PersonId
                                 join doc in dbContext.datahierarchy on new { a = per.i_DocTypeId.Value, b = 106 } equals new { a = doc.i_ItemId, b = doc.i_GroupId } into doc_join
                                 from doc in doc_join.DefaultIfEmpty()
                                 join prot in dbContext.protocol on ser.v_ProtocolId equals prot.v_ProtocolId
                                 join empCli in dbContext.organization on prot.v_CustomerOrganizationId equals empCli.v_OrganizationId
                                 join empTrab in dbContext.organization on prot.v_WorkingOrganizationId equals empTrab.v_OrganizationId
                                 join empEmp in dbContext.organization on prot.v_EmployerOrganizationId equals empEmp.v_OrganizationId
                                 join gen in dbContext.systemparameter on new { a = per.i_DocTypeId.Value, b = 100 } equals new { a = gen.i_ParameterId, b = gen.i_GroupId } into gen_join
                                 from gen in gen_join.DefaultIfEmpty()
                                 join me in dbContext.systemuser on serCom.i_ApprovedUpdateUserId equals me.i_SystemUserId into me_join
                                 from me in me_join.DefaultIfEmpty()
                                 join pme in dbContext.professional on me.v_PersonId equals pme.v_PersonId into pme_join
                                 from pme in pme_join.DefaultIfEmpty()
                                 where ser.v_ServiceId == pstrServiceId
                                 select new ReporteUcOsteoMuscular
                                 {
                                     ServiceId = ser.v_ServiceId,
                                     ServiceComponentId = serCom.v_ServiceComponentId,
                                     FechaServicio = ser.d_ServiceDate.Value,
                                     Nombres = per.v_FirstName,
                                     ApellidoPaterno = per.v_FirstLastName,
                                     ApellidoMaterno = per.v_SecondLastName,
                                     NombreCompleto = per.v_FirstLastName + " " + per.v_SecondLastName + " " + per.v_FirstName,
                                     FechaNacimiento = per.d_Birthdate.Value,
                                     //Edad = "",
                                     TipoDocumentoId = per.i_DocTypeId.Value,
                                     TipoDocumento = doc.v_Value1,
                                     NroDocumento = per.v_DocNumber,
                                     EmpresaCliente = empCli.v_Name,
                                     EmpresaTrabajo = empTrab.v_Name,
                                     EmpresaEmpleadora = empEmp.v_Name,
                                     Puesto = per.v_CurrentOccupation,
                                     GeneroId = per.i_SexTypeId.Value,
                                     Genero = gen.v_Value1,
                                     FirmaTrabajador = per.b_RubricImage,
                                     HuellaTrabajador = per.b_FingerPrintImage,
                                     FirmaUsuarioGraba = pme.b_SignatureImage,
                                 }).ToList();

                var valor = ValoresComponentesUserControl(pstrServiceId, pstrComponentId).ToList();
                var sql = (from a in servicios
                           select new ReporteUcOsteoMuscular
                           {
                                ServiceId = a.ServiceId,
                                ServiceComponentId = a.ServiceComponentId,
                                FechaServicio = a.FechaServicio,
                                Nombres = a.Nombres,
                                ApellidoPaterno = a.ApellidoPaterno,
                                ApellidoMaterno = a.ApellidoMaterno,
                                NombreCompleto = a.NombreCompleto,
                                FechaNacimiento = a.FechaNacimiento,
                                Edad = GetAge(a.FechaNacimiento.Value),
                                TipoDocumentoId = a.TipoDocumentoId,
                                TipoDocumento = a.TipoDocumento,
                                NroDocumento = a.NroDocumento,
                                EmpresaCliente = a.EmpresaCliente,
                                EmpresaTrabajo = a.EmpresaTrabajo,
                                EmpresaEmpleadora = a.EmpresaEmpleadora,
                                Puesto = a.Puesto,
                                GeneroId = a.GeneroId,
                                Genero = a.Genero,
                                FirmaTrabajador = a.FirmaTrabajador,
                                HuellaTrabajador = a.HuellaTrabajador,
                                FirmaUsuarioGraba = a.FirmaUsuarioGraba,
                                txtAnamnesis = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001").v_Value1,//// = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001").v_Value1,////"N009-OTM00000001";//System.Windows.Forms.TextBox();
                                cboCondiAmbEspacio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000002") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000002").v_Value1,//// = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001").v_Value1,////"N009-OTM00000002";//System.Windows.Forms.ComboBox();
                                cboCondiAmbTemperatura = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000003") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000003").v_Value1,//// = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000001").v_Value1,////"N009-OTM00000003";//System.Windows.Forms.ComboBox();
                                cboCondiAmbVibraciones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000004") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000004").v_Value1,////"N009-OTM00000004";//System.Windows.Forms.ComboBox();
                                cboCondiAmbSueloInestable = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000005") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000005").v_Value1,////"N009-OTM00000005";//System.Windows.Forms.ComboBox();
                                cboCondiAmbDesniveles = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000006") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000006").v_Value1,////"N009-OTM00000006";//System.Windows.Forms.ComboBox();
                                cboCondiAmbAltura = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000007") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000007").v_Value1,////"N009-OTM00000007";//System.Windows.Forms.ComboBox();
                                cboCondiAmbPostura = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000008") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000008").v_Value1,////"N009-OTM00000008";//System.Windows.Forms.ComboBox();
                                cboCondiAmbSuelo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000009") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000009").v_Value1,////"N009-OTM00000009";//System.Windows.Forms.ComboBox();
                                cboExigRitmo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000010") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000010").v_Value1,////"N009-OTM00000010";//System.Windows.Forms.ComboBox();
                                cboExigDistancias = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000011") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000011").v_Value1,////"N009-OTM00000011";//System.Windows.Forms.ComboBox();
                                cboExigPeriodo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000012") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000012").v_Value1,////"N009-OTM00000012";//System.Windows.Forms.ComboBox();
                                cboExigEsfuerzo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000013") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000013").v_Value1,////"N009-OTM00000013";//System.Windows.Forms.ComboBox();
                                cboEsfFisAlzar = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000014") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000014").v_Value1,////"N009-OTM00000014";//System.Windows.Forms.ComboBox();
                                cboEsfFisExiste = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000015") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000015").v_Value1,////"N009-OTM00000015";//System.Windows.Forms.ComboBox();
                                cboEsfFisCuerpo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000016") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000016").v_Value1,////"N009-OTM00000016";//System.Windows.Forms.ComboBox();
                                cboEsfFisExige = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000017") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000017").v_Value1,////"N009-OTM00000017";//System.Windows.Forms.ComboBox();
                                cboCarCargaPeso = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000018") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000018").v_Value1,////"N009-OTM00000018";//System.Windows.Forms.ComboBox();
                                cboCarCargaManipulacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000019") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000019").v_Value1,////"N009-OTM00000019";//System.Windows.Forms.ComboBox();
                                cboCarCargaEquilibrio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000020") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000020").v_Value1,////"N009-OTM00000020";//System.Windows.Forms.ComboBox();

                                cboCarCargaVolumen = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000021") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000021").v_Value1,////"N009-OTM00000021";//System.Windows.Forms.ComboBox();
                                cboExpToxCadmio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000022") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000022").v_Value1,////"N009-OTM00000022";//System.Windows.Forms.ComboBox();
                                cboExpToxMercurio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000023") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000023").v_Value1,////"N009-OTM00000023";//System.Windows.Forms.ComboBox();
                                cboExpToxMagneso = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000024") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000024").v_Value1,////"N009-OTM00000024";//System.Windows.Forms.ComboBox();
                                txt2Exposicion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000025") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000025").v_Value1,////"N009-OTM00000025";//System.Windows.Forms.TextBox();
                                txt2DiasSemana = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000026") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000026").v_Value1,////"N009-OTM00000026";//System.Windows.Forms.TextBox();
                                txt2HorasSentado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000027") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000027").v_Value1,////"N009-OTM00000027";//System.Windows.Forms.TextBox();
                                txt2Repetitivo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000028") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000028").v_Value1,////"N009-OTM00000028";//System.Windows.Forms.TextBox();
                                txt2Anios = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000029") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000029").v_Value1,////"N009-OTM00000029";//System.Windows.Forms.TextBox();
                                txt2Horas = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000030") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000030").v_Value1,////"N009-OTM00000030";//System.Windows.Forms.TextBox();
                                cbo2RiesgoLevanta = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000031") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000031").v_Value1,////"N009-OTM00000031";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoDesplaza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000032") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000032").v_Value1,////"N009-OTM00000032";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoSentado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000033") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000033").v_Value1,////"N009-OTM00000033";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoPie = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000034") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000034").v_Value1,////"N009-OTM00000034";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoTracciona = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000035") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000035").v_Value1,////"N009-OTM00000035";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoEmpuja = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000036") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000036").v_Value1,////"N009-OTM00000036";//System.Windows.Forms.ComboBox();
                                cbo2RiesgoColoca = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000037") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000037").v_Value1,////"N009-OTM00000037";//System.Windows.Forms.ComboBox();
                                cboEjeLordosisCervical = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000038") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000038").v_Value1,////"N009-OTM00000038";//System.Windows.Forms.ComboBox();
                                cboEjeCifosisDorsal = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000039") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000039").v_Value1,////"N009-OTM00000039";//System.Windows.Forms.ComboBox();
                                cboEjeLordosisLumbar = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000040") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000040").v_Value1,////"N009-OTM00000040";//System.Windows.Forms.ComboBox();
                                cboRotacionExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000041") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000041").v_Value1,////"N009-OTM00000041";//System.Windows.Forms.ComboBox();
                                cboRotacionInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000042") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000042").v_Value1,////"N009-OTM00000042";//System.Windows.Forms.ComboBox();
                                cboInversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000043") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000043").v_Value1,////"N009-OTM00000043";//System.Windows.Forms.ComboBox();
                                cboPlantiflexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000044") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000044").v_Value1,////"N009-OTM00000044";//System.Windows.Forms.ComboBox();
                                cboEversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000045") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000045").v_Value1,////"N009-OTM00000045";//System.Windows.Forms.ComboBox();
                                cboDorsoflexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000046") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000046").v_Value1,////"N009-OTM00000046";//System.Windows.Forms.ComboBox();
                                cboMmiiFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000047") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000047").v_Value1,////"N009-OTM00000047";//System.Windows.Forms.ComboBox();
                                cboMmiiExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000048") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000048").v_Value1,////"N009-OTM00000048";//System.Windows.Forms.ComboBox();
                                cboMmiiContraResistencia = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000049") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000049").v_Value1,////"N009-OTM00000049";//System.Windows.Forms.ComboBox();
                                cboCircunduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000050") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000050").v_Value1,////"N009-OTM00000050";//System.Windows.Forms.ComboBox();

                                cboDesviacionRadial = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000051") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000051").v_Value1,////"N009-OTM00000051";//System.Windows.Forms.ComboBox();
                                cboExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000052") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000052").v_Value1,////"N009-OTM00000052";//System.Windows.Forms.ComboBox();
                                cboDesviacionCubital = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000053") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000053").v_Value1,////"N009-OTM00000053";//System.Windows.Forms.ComboBox();
                                cboFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000054") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000054").v_Value1,////"N009-OTM00000054";//System.Windows.Forms.ComboBox();
                                cboGenuvaro = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000055") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000055").v_Value1,////"N009-OTM00000055";//System.Windows.Forms.ComboBox();
                                cboGenuvalgo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000056") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000056").v_Value1,////"N009-OTM00000056";//System.Windows.Forms.ComboBox();
                                cboPieCavo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000057") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000057").v_Value1,////"N009-OTM00000057";//System.Windows.Forms.ComboBox();
                                cboPiePlano = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000058") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000058").v_Value1,////"N009-OTM00000058";//System.Windows.Forms.ComboBox();
                                cboEvaPropicepcion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000059") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000059").v_Value1,////"N009-OTM00000059";//System.Windows.Forms.ComboBox();
                                cboPruebaMancuerda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000060") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000060").v_Value1,////"N009-OTM00000060";//System.Windows.Forms.ComboBox();
                                cboRotulianoIzq = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000061") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000061").v_Value1,////"N009-OTM00000061";//System.Windows.Forms.ComboBox();
                                cboRotulianoDer = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000062") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000062").v_Value1,////"N009-OTM00000062";//System.Windows.Forms.ComboBox();
                                cboLasegueIzq = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000063") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000063").v_Value1,////"N009-OTM00000063";//System.Windows.Forms.ComboBox();
                                cboSchoverIzq = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000064") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000064").v_Value1,////"N009-OTM00000064";//System.Windows.Forms.ComboBox();
                                cboSchoverDer = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000065") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000065").v_Value1,////"N009-OTM00000065";//System.Windows.Forms.ComboBox();
                                cboLasegueDer = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000066") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000066").v_Value1,////"N009-OTM00000066";//System.Windows.Forms.ComboBox();
                                cboPhalenIzq = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000067") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000067").v_Value1,////"N009-OTM00000067";//System.Windows.Forms.ComboBox();
                                cboTinelIzq = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000068") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000068").v_Value1,////"N009-OTM00000068";//System.Windows.Forms.ComboBox();
                                cboTinelDer = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000069") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000069").v_Value1,////"N009-OTM00000069";//System.Windows.Forms.ComboBox();
                                cboPhalenDer = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000070") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000070").v_Value1,////"N009-OTM00000070";//System.Windows.Forms.ComboBox();
                                cboPalpacionDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000071") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000071").v_Value1,////"N009-OTM00000071";//System.Windows.Forms.ComboBox();
                                cboPalpacionContractura = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000072") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000072").v_Value1,////"N009-OTM00000072";//System.Windows.Forms.ComboBox();
                                cboPalpacionApofisis = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000073") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000073").v_Value1,////"N009-OTM00000073";//System.Windows.Forms.ComboBox();
                                txtPalpacionDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000074") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000074").v_Value1,////"N009-OTM00000074";//System.Windows.Forms.TextBox();
                                txtPalpacionContractura = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000075") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000075").v_Value1,////"N009-OTM00000075";//System.Windows.Forms.TextBox();
                                txtPalpacionApofisis = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000076") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000076").v_Value1,////"N009-OTM00000076";//System.Windows.Forms.TextBox();
                                cboLumbatExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000077") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000077").v_Value1,////"N009-OTM00000077";//System.Windows.Forms.ComboBox();
                                cboLumbatFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000078") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000078").v_Value1,////"N009-OTM00000078";//System.Windows.Forms.ComboBox();
                                cboCervicalExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000079") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000079").v_Value1,////"N009-OTM00000079";//System.Windows.Forms.ComboBox();
                                cboCervicalFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000080") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000080").v_Value1,////"N009-OTM00000080";//System.Windows.Forms.ComboBox();
                                cboLumbatLateIzquierda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000081") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000081").v_Value1,////"N009-OTM00000081";//System.Windows.Forms.ComboBox();
                                LumbatLateDerecha = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000082") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000082").v_Value1,////"N009-OTM00000082";//System.Windows.Forms.ComboBox();
                                LumbatRotacionIzquierda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000083") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000083").v_Value1,////"N009-OTM00000083";//System.Windows.Forms.ComboBox();

                                LumbatRotacionDerecha = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000084") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000084").v_Value1,////"N009-OTM00000084";//System.Windows.Forms.ComboBox();
                                CervicalLateIzquierda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000085") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000085").v_Value1,////"N009-OTM00000085";//System.Windows.Forms.ComboBox();
                                CervicalLateDerecha = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000086") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000086").v_Value1,////"N009-OTM00000086";//System.Windows.Forms.ComboBox();
                                CervicalRotaIzquierda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000087") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000087").v_Value1,////"N009-OTM00000087";//System.Windows.Forms.ComboBox();
                                CervicalRotaDerecha = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000088") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000088").v_Value1,////"N009-OTM00000088";//System.Windows.Forms.ComboBox();
                                LumbatIrradiacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000089") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000089").v_Value1,////"N009-OTM00000089";//System.Windows.Forms.ComboBox();
                                CervicalIrradiacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000090") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000090").v_Value1,////"N009-OTM00000090";//System.Windows.Forms.ComboBox();
                                AsimetriaEscoliosis = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000091") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000091").v_Value1,////"N009-OTM00000091";//System.Windows.Forms.ComboBox();
                                AsimetriaHombros = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000092") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000092").v_Value1,////"N009-OTM00000092";//System.Windows.Forms.ComboBox();
                                AsimetriaLumbar = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000093") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000093").v_Value1,////"N009-OTM00000093";//System.Windows.Forms.ComboBox();
                                AsimetriaCaderas = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000094") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000094").v_Value1,////"N009-OTM00000094";//System.Windows.Forms.ComboBox();
                                AsimetriaHipercifocis = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000095") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000095").v_Value1,////"N009-OTM00000095";//System.Windows.Forms.ComboBox();
                                AsimetriaRodillas = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000096") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000096").v_Value1,////"N009-OTM00000096";//System.Windows.Forms.ComboBox();
                                EquilibrioLateralIzquierdo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000097") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000097").v_Value1,////"N009-OTM00000097";//System.Windows.Forms.ComboBox();
                                EquilibrioLateralDerecho = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000098") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000098").v_Value1,////"N009-OTM00000098";//System.Windows.Forms.ComboBox();
                                EquilibrioPosterior = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000099") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000099").v_Value1,////"N009-OTM00000099";//System.Windows.Forms.ComboBox();
                                EquilibrioAnterior = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000100") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000100").v_Value1,////"N009-OTM00000100";//System.Windows.Forms.ComboBox();
                                MarchaClaudicacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000101") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000101").v_Value1,////"N009-OTM00000101";//System.Windows.Forms.ComboBox();
                                TobilloIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000102") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000102").v_Value1,////"N009-OTM00000102";//System.Windows.Forms.ComboBox();
                                RodillaIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000103") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000103").v_Value1,////"N009-OTM00000103";//System.Windows.Forms.ComboBox();
                                CaderaIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000104") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000104").v_Value1,////"N009-OTM00000104";//System.Windows.Forms.ComboBox();
                                MunecaIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000105") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000105").v_Value1,////"N009-OTM00000105";//System.Windows.Forms.ComboBox();
                                CodoIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000106") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000106").v_Value1,////"N009-OTM00000106";//System.Windows.Forms.ComboBox();
                                HombroIzqRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000107") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000107").v_Value1,////"N009-OTM00000107";//System.Windows.Forms.ComboBox();
                                TobilloIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000108") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000108").v_Value1,////"N009-OTM00000108";//System.Windows.Forms.ComboBox();
                                RodillaIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000109") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000109").v_Value1,////"N009-OTM00000109";//System.Windows.Forms.ComboBox();
                                CaderaIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000110") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000110").v_Value1,////"N009-OTM00000110";//System.Windows.Forms.ComboBox();
                                MunecaIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000111") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000111").v_Value1,////"N009-OTM00000111";//System.Windows.Forms.ComboBox();
                                CodoIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000112") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000112").v_Value1,////"N009-OTM00000112";//System.Windows.Forms.ComboBox();
                                TobilloIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000113") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000113").v_Value1,////"N009-OTM00000113";//System.Windows.Forms.ComboBox();
                                RodillaIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000114") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000114").v_Value1,////"N009-OTM00000114";//System.Windows.Forms.ComboBox();
                                CaderaIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000115") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000115").v_Value1,////"N009-OTM00000115";//System.Windows.Forms.ComboBox();
                                MunecaIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000116") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000116").v_Value1,////"N009-OTM00000116";//System.Windows.Forms.ComboBox();
                                HombroIzqExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000117") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000117").v_Value1,////"N009-OTM00000117";//System.Windows.Forms.ComboBox();
                                CodoIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000118") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000118").v_Value1,////"N009-OTM00000118";//System.Windows.Forms.ComboBox();
                                TobilloDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000119") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000119").v_Value1,////"N009-OTM00000119";//System.Windows.Forms.ComboBox();
                                RodillaDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000120") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000120").v_Value1,////"N009-OTM00000120";//System.Windows.Forms.ComboBox();
                                CaderaDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000121") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000121").v_Value1,////"N009-OTM00000121";//System.Windows.Forms.ComboBox();
                                MunecaDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000122") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000122").v_Value1,////"N009-OTM00000122";//System.Windows.Forms.ComboBox();
                                HombroIzqFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000123") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000123").v_Value1,////"N009-OTM00000123";//System.Windows.Forms.ComboBox();
                                CodoDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000124") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000124").v_Value1,////"N009-OTM00000124";//System.Windows.Forms.ComboBox();
                                TobilloDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000125") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000125").v_Value1,////"N009-OTM00000125";//System.Windows.Forms.ComboBox();
                                RodillaDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000126") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000126").v_Value1,////"N009-OTM00000126";//System.Windows.Forms.ComboBox();
                                CaderaDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000127") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000127").v_Value1,////"N009-OTM00000127";//System.Windows.Forms.ComboBox();
                                MunecaDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000128") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000128").v_Value1,////"N009-OTM00000128";//System.Windows.Forms.ComboBox();
                                HombroDerRotInt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000129") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000129").v_Value1,////"N009-OTM00000129";//System.Windows.Forms.ComboBox();
                                CodoDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000130") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000130").v_Value1,////"N009-OTM00000130";//System.Windows.Forms.ComboBox();
                                TobilloDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000131") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000131").v_Value1,////"N009-OTM00000131";//System.Windows.Forms.ComboBox();
                                RodillaDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000132") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000132").v_Value1,////"N009-OTM00000132";//System.Windows.Forms.ComboBox();
                                CaderaDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000133") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000133").v_Value1,////"N009-OTM00000133";//System.Windows.Forms.ComboBox();
                                MunecaDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000134") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000134").v_Value1,////"N009-OTM00000134";//System.Windows.Forms.ComboBox();
                                HombroDerExtension = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000135") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000135").v_Value1,////"N009-OTM00000135";//System.Windows.Forms.ComboBox();
                                CodoDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000136") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000136").v_Value1,////"N009-OTM00000136";//System.Windows.Forms.ComboBox();
                                HombroDerFlexion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000137") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000137").v_Value1,////"N009-OTM00000137";//System.Windows.Forms.ComboBox();
                                TobilloIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000138") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000138").v_Value1,////"N009-OTM00000138";//System.Windows.Forms.ComboBox();
                                RodillaIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000139") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000139").v_Value1,////"N009-OTM00000139";//System.Windows.Forms.ComboBox();
                                CaderaIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000140") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000140").v_Value1,////"N009-OTM00000140";//System.Windows.Forms.ComboBox();
                                TobilloIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000141") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000141").v_Value1,////"N009-OTM00000141";//System.Windows.Forms.ComboBox();
                                MunecaIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000142") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000142").v_Value1,////"N009-OTM00000142";//System.Windows.Forms.ComboBox();
                                RodillaIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000143") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000143").v_Value1,////"N009-OTM00000143";//System.Windows.Forms.ComboBox();
                                CaderaIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000144") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000144").v_Value1,////"N009-OTM00000144";//System.Windows.Forms.ComboBox();
                                CodoIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000145") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000145").v_Value1,////"N009-OTM00000145";//System.Windows.Forms.ComboBox();
                                TobilloIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000146") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000146").v_Value1,////"N009-OTM00000146";//System.Windows.Forms.ComboBox();
                                MunecaIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000147") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000147").v_Value1,////"N009-OTM00000147";//System.Windows.Forms.ComboBox();
                                RodillaIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000148") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000148").v_Value1,////"N009-OTM00000148";//System.Windows.Forms.ComboBox();
                                CaderaIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000149") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000149").v_Value1,////"N009-OTM00000149";//System.Windows.Forms.ComboBox();
                                CodoIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000150") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000150").v_Value1,////"N009-OTM00000150";//System.Windows.Forms.ComboBox();
                                TobilloIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000151") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000151").v_Value1,////"N009-OTM00000151";//System.Windows.Forms.ComboBox();
                                MunecaIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000152") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000152").v_Value1,////"N009-OTM00000152";//System.Windows.Forms.ComboBox();
                                RodillaIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000153") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000153").v_Value1,////"N009-OTM00000153";//System.Windows.Forms.ComboBox();
                                HombroIzqTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000154") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000154").v_Value1,////"N009-OTM00000154";//System.Windows.Forms.ComboBox();
                                CaderaIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000155") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000155").v_Value1,////"N009-OTM00000155";//System.Windows.Forms.ComboBox();
                                CodoIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000156") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000156").v_Value1,////"N009-OTM00000156";//System.Windows.Forms.ComboBox();
                                TobilloIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000157") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000157").v_Value1,////"N009-OTM00000157";//System.Windows.Forms.ComboBox();
                                MunecaIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000158") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000158").v_Value1,////"N009-OTM00000158";//System.Windows.Forms.ComboBox();
                                RodillaIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000159") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000159").v_Value1,////"N009-OTM00000159";//System.Windows.Forms.ComboBox();
                                HombroIzqFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000160") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000160").v_Value1,////"N009-OTM00000160";//System.Windows.Forms.ComboBox();
                                CaderaIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000161") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000161").v_Value1,////"N009-OTM00000161";//System.Windows.Forms.ComboBox();
                                CodoIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000162") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000162").v_Value1,////"N009-OTM00000162";//System.Windows.Forms.ComboBox();
                                TobilloDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000163") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000163").v_Value1,////"N009-OTM00000163";//System.Windows.Forms.ComboBox();
                                MunecaIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000164") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000164").v_Value1,////"N009-OTM00000164";//System.Windows.Forms.ComboBox();
                                RodillaDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000165") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000165").v_Value1,////"N009-OTM00000165";//System.Windows.Forms.ComboBox();
                                HombroIzqAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000166") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000166").v_Value1,////"N009-OTM00000166";//System.Windows.Forms.ComboBox();
                                CaderaDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000167") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000167").v_Value1,////"N009-OTM00000167";//System.Windows.Forms.ComboBox();
                                CodoIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000168") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000168").v_Value1,////"N009-OTM00000168";//System.Windows.Forms.ComboBox();
                                TobilloDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000169") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000169").v_Value1,////"N009-OTM00000169";//System.Windows.Forms.ComboBox();
                                MunecaDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000170") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000170").v_Value1,////"N009-OTM00000170";//System.Windows.Forms.ComboBox();
                                RodillaDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000171") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000171").v_Value1,////"N009-OTM00000171";//System.Windows.Forms.ComboBox();
                                HombroIzqAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000172") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000172").v_Value1,////"N009-OTM00000172";//System.Windows.Forms.ComboBox();
                                CaderaDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000173") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000173").v_Value1,////"N009-OTM00000173";//System.Windows.Forms.ComboBox();
                                CodoDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000174") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000174").v_Value1,////"N009-OTM00000174";//System.Windows.Forms.ComboBox();
                                TobilloDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000175") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000175").v_Value1,////"N009-OTM00000175";//System.Windows.Forms.ComboBox();
                                MunecaDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000176") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000176").v_Value1,////"N009-OTM00000176";//System.Windows.Forms.ComboBox();
                                RodillaDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000177") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000177").v_Value1,////"N009-OTM00000177";//System.Windows.Forms.ComboBox();
                                HombroIzqRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000178") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000178").v_Value1,////"N009-OTM00000178";//System.Windows.Forms.ComboBox();
                                CaderaDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000179") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000179").v_Value1,////"N009-OTM00000179";//System.Windows.Forms.ComboBox();
                                CodoDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000180") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000180").v_Value1,////"N009-OTM00000180";//System.Windows.Forms.ComboBox();
                                TobilloDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000181") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000181").v_Value1,////"N009-OTM00000181";//System.Windows.Forms.ComboBox();
                                MunecaDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000182") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000182").v_Value1,////"N009-OTM00000182";//System.Windows.Forms.ComboBox();
                                RodillaDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000183") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000183").v_Value1,////"N009-OTM00000183";//System.Windows.Forms.ComboBox();
                                HombroDerTono = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000184") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000184").v_Value1,////"N009-OTM00000184";//System.Windows.Forms.ComboBox();
                                CaderaDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000185") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000185").v_Value1,////"N009-OTM00000185";//System.Windows.Forms.ComboBox();
                                CodoDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000186") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000186").v_Value1,////"N009-OTM00000186";//System.Windows.Forms.ComboBox();
                                TobilloDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000187") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000187").v_Value1,////"N009-OTM00000187";//System.Windows.Forms.ComboBox();
                                MunecaDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000189") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000189").v_Value1,////"N009-OTM00000189";//System.Windows.Forms.ComboBox();
                                RodillaDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000190") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000190").v_Value1,////"N009-OTM00000190";//System.Windows.Forms.ComboBox();
                                HombroDerFuerza = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000191") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000191").v_Value1,////"N009-OTM00000191";//System.Windows.Forms.ComboBox();
                                CaderaDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000192") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000192").v_Value1,////"N009-OTM00000192";//System.Windows.Forms.ComboBox();
                                CodoDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000193") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000193").v_Value1,////"N009-OTM00000193";//System.Windows.Forms.ComboBox();
                                TobilloIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000194") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000194").v_Value1,////"N009-OTM00000194";//System.Windows.Forms.ComboBox();
                                MunecaDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000195") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000195").v_Value1,////"N009-OTM00000195";//System.Windows.Forms.ComboBox();
                                RodillaIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000196") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000196").v_Value1,////"N009-OTM00000196";//System.Windows.Forms.ComboBox();
                                HombroDerAbduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000197") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000197").v_Value1,////"N009-OTM00000197";//System.Windows.Forms.ComboBox();
                                CaderaIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000198") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000198").v_Value1,////"N009-OTM00000198";//System.Windows.Forms.ComboBox();
                                CodoDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000199") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000199").v_Value1,////"N009-OTM00000199";//System.Windows.Forms.ComboBox();
                                TobilloDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000200") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000200").v_Value1,////"N009-OTM00000200";//System.Windows.Forms.ComboBox();
                                MunecaIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000201") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000201").v_Value1,////"N009-OTM00000201";//System.Windows.Forms.ComboBox();
                                RodillaDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000202") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000202").v_Value1,////"N009-OTM00000202";//System.Windows.Forms.ComboBox();
                                HombroDerAduccion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000203") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000203").v_Value1,////"N009-OTM00000203";//System.Windows.Forms.ComboBox();
                                CaderaDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000204") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000204").v_Value1,////"N009-OTM00000204";//System.Windows.Forms.ComboBox();
                                CodoIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000205") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000205").v_Value1,////"N009-OTM00000205";//System.Windows.Forms.ComboBox();
                                MunecaDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000206") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000206").v_Value1,////"N009-OTM00000206";//System.Windows.Forms.ComboBox();
                                HombroDerRotExt = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000207") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000207").v_Value1,////"N009-OTM00000207";//System.Windows.Forms.ComboBox();
                                CodoDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000208") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000208").v_Value1,////"N009-OTM00000208";//System.Windows.Forms.ComboBox();
                                HombroIzqDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000209") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000209").v_Value1,////"N009-OTM00000209";//System.Windows.Forms.ComboBox();
                                HombroDerDolor = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000210") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000210").v_Value1,////"N009-OTM00000210";//System.Windows.Forms.ComboBox();
                                CodoIzqSupinacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000211") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000211").v_Value1,////"N009-OTM00000211";//System.Windows.Forms.ComboBox();
                                CodoIzqPronacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000212") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000212").v_Value1,////"N009-OTM00000212";//System.Windows.Forms.ComboBox();
                                CodoDerSupinacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000213") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000213").v_Value1,////"N009-OTM00000213";//System.Windows.Forms.ComboBox();
                                CodoDerPronacion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000214") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000214").v_Value1,////"N009-OTM00000214";//System.Windows.Forms.ComboBox();
                                MunecaIzqRadial = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000215") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000215").v_Value1,////"N009-OTM00000215";//System.Windows.Forms.ComboBox();
                                MunecaIzqCubital = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000216") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000216").v_Value1,////"N009-OTM00000216";//System.Windows.Forms.ComboBox();
                                MunecaDerRadial = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000217") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000217").v_Value1,////"N009-OTM00000217";//System.Windows.Forms.ComboBox();
                                MunecaDerCubital = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000218") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000218").v_Value1,////"N009-OTM00000218";//System.Windows.Forms.ComboBox();
                                MunecaIzqInversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000219") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000219").v_Value1,////"N009-OTM00000219";//System.Windows.Forms.ComboBox();
                                MunecaIzqEversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000220") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000220").v_Value1,////"N009-OTM00000220";//System.Windows.Forms.ComboBox();
                                MunecaDerInversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000221") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000221").v_Value1,////"N009-OTM00000221";//System.Windows.Forms.ComboBox();
                                MunecaDerEversion = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000222") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000222").v_Value1,////"N009-OTM00000222";//System.Windows.Forms.ComboBox();
                                txtDescripcionHallazgos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000223") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000223").v_Value1,////"N009-OTM00000223";//System.Windows.Forms.TextBox();
                                Conclusiones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000224") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000224").v_Value1,////"N009-OTM00000224";//System.Windows.Forms.ComboBox();


                                rbAbdomenExcelente = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000274") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000274").v_Value1,////"N009-OTM00000225";

                                rbAbdomenPromedio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000225") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000225").v_Value1,////"N009-OTM00000225";
                                rbAbdomenRegular = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000226") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000226").v_Value1,////"N009-OTM00000226";
                                rbAbdomenPobre = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000227") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000227").v_Value1,////"N009-OTM00000227";
                                txtAbdomenPuntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000228") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000228").v_Value1,////"N009-OTM00000228";
                                txtAbdomenObservaciones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000229") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000229").v_Value1,////"N009-OTM00000229";
                                rbCaderaExcelente = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000230") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000230").v_Value1,////"N009-OTM00000230";
                                rbCaderaPromedio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000231") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000231").v_Value1,////"N009-OTM00000231";
                                rbCaderaRegular = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000232") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000232").v_Value1,////"N009-OTM00000232";
                                rbCaderaPobre = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000233") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000233").v_Value1,////"N009-OTM00000233";
                                txtCaderaPuntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000234") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000234").v_Value1,////"N009-OTM00000234";
                                txtCaderaOnservaciones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235").v_Value1,////"N009-OTM00000235";

                                rbMusloExcelente = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236").v_Value1,////"N009-OTM00000236";
                                //rbMusloPromedio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236").v_Value1,////"N009-OTM00000236";
                                //rbMusloRegular = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236").v_Value1,////"N009-OTM00000236";
                                //rbMusloPobre = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236").v_Value1,////"N009-OTM00000236";
                                //txtMusloPuntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000235") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000236").v_Value1,////"N009-OTM00000235OTM00000236";
                               
                                txtMusloObservaciones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000241") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000241").v_Value1,////"N009-OTM00000241";

                                rbAbdomenLateralExcelente = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242").v_Value1,////"N009-OTM00000242";
                                //rbAbdomenLateralPromedio = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242").v_Value1,////"N009-OTM00000242";
                                //rbAbdomenLateralRegular = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242").v_Value1,////"N009-OTM00000242";
                                //rbAbdomenLateralPobre = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000242").v_Value1,////"N009-OTM00000242OTM00000242";
                               
                                txtAbdomenLateralPuntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000246") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000246").v_Value1,////"N009-OTM00000246";
                                txtAbdomenLateralObservaciones = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000247") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000247").v_Value1,////"N009-OTM00000247";

                                rbAbduccion180Optimo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000248") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000248").v_Value1,////"N009-OTM00000248";
                                rbAbduccion180Limitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000249") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000249").v_Value1,////"N009-OTM00000249";
                                rbAbduccion180MuyLimitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000250") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000250").v_Value1,////"N009-OTM00000250";
                                txtAbduccion180Puntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000251") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000251").v_Value1,////"N009-OTM00000251";
                                rbAbduccion180DolorSI = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000252") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000252").v_Value1,////"N009-OTM00000252";
                                rbAbduccion180DolorNO = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000253") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000253").v_Value1,////"N009-OTM00000253";
                                rbAbduccion60Optimo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000254") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000254").v_Value1,////"N009-OTM00000254";
                                rbAbduccion60Limitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000255") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000255").v_Value1,////"N009-OTM00000255";
                                rbAbduccion60MuyLimitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000256") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000256").v_Value1,////"N009-OTM00000256";
                                txtAbduccion60Puntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000257") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000257").v_Value1,////"N009-OTM00000257";
                                rbAbduccion60DolorSI = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000258") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000258").v_Value1,////"N009-OTM00000258";
                                rbAbduccion60DolorNO = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000259") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000259").v_Value1,////"N009-OTM00000259";

                                rbRotacion090Optimo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000260") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000260").v_Value1,////"N009-OTM00000260";
                                rbRotacion090Limitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000261") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000261").v_Value1,////"N009-OTM00000261";
                                rbRotacion090MuyLimitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000262") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000262").v_Value1,////"N009-OTM00000262";
                                txtRotacion090Puntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000263") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000263").v_Value1,////"N009-OTM00000263";
                                rbRotacion090DolorSI = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000264") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000264").v_Value1,////"N009-OTM00000264";
                                rbRotacion090DolorNO = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000265") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000265").v_Value1,////"N009-OTM00000265";
                                rbRotacionExtIntOptimo = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000266") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000266").v_Value1,////"N009-OTM00000266";
                                rbRotacionExtIntLimitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000267") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000267").v_Value1,////"N009-OTM00000267";
                                rbRotacionExtIntMuyLimitado = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000268") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000268").v_Value1,////"N009-OTM00000268";
                                txtRotacionExtIntPuntos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000269") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000269").v_Value1,////"N009-OTM00000269";
                                rbRotacionExtIntDolorSI = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000270") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000270").v_Value1,////"N009-OTM00000270";
                                rbRotacionExtIntDolorNO = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000271") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000271").v_Value1,////"N009-OTM00000271";
                                txtTotalAptitudEspalda = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000272") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000272").v_Value1,////"N009-OTM00000272";
                                txtTotalRangos = valor.Count() == 0 || valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000273") == null ? string.Empty : valor.Find(p => p.v_ComponentFieldId == "N009-OTM00000273").v_Value1,////"N009-OTM00000273";
                         
                           }).ToList();

                return sql;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw;
            }
        }

    }
}
